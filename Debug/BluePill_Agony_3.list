
BluePill_Agony_3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006164  08000130  08000130  00010130  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004cc  08006298  08006298  00016298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006764  08006764  00020448  2**0
                  CONTENTS
  4 .ARM          00000000  08006764  08006764  00020448  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006764  08006764  00020448  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08006764  08006764  00016764  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  0800676c  0800676c  0001676c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000448  20000000  08006774  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000224  20000448  08006bbc  00020448  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000066c  08006bbc  0002066c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020448  2**0
                  CONTENTS, READONLY
 12 .debug_info   000158ba  00000000  00000000  00020471  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000209b  00000000  00000000  00035d2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006f8  00000000  00000000  00037dc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006a8  00000000  00000000  000384c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004fe9  00000000  00000000  00038b68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00006176  00000000  00000000  0003db51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007414f  00000000  00000000  00043cc7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000b7e16  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000336c  00000000  00000000  000b7e68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000448 	.word	0x20000448
 800014c:	00000000 	.word	0x00000000
 8000150:	0800627c 	.word	0x0800627c

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	2000044c 	.word	0x2000044c
 800016c:	0800627c 	.word	0x0800627c

08000170 <__aeabi_drsub>:
 8000170:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000174:	e002      	b.n	800017c <__adddf3>
 8000176:	bf00      	nop

08000178 <__aeabi_dsub>:
 8000178:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800017c <__adddf3>:
 800017c:	b530      	push	{r4, r5, lr}
 800017e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000182:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000186:	ea94 0f05 	teq	r4, r5
 800018a:	bf08      	it	eq
 800018c:	ea90 0f02 	teqeq	r0, r2
 8000190:	bf1f      	itttt	ne
 8000192:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000196:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800019e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a2:	f000 80e2 	beq.w	800036a <__adddf3+0x1ee>
 80001a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001ae:	bfb8      	it	lt
 80001b0:	426d      	neglt	r5, r5
 80001b2:	dd0c      	ble.n	80001ce <__adddf3+0x52>
 80001b4:	442c      	add	r4, r5
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	ea82 0000 	eor.w	r0, r2, r0
 80001c2:	ea83 0101 	eor.w	r1, r3, r1
 80001c6:	ea80 0202 	eor.w	r2, r0, r2
 80001ca:	ea81 0303 	eor.w	r3, r1, r3
 80001ce:	2d36      	cmp	r5, #54	; 0x36
 80001d0:	bf88      	it	hi
 80001d2:	bd30      	pophi	{r4, r5, pc}
 80001d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e4:	d002      	beq.n	80001ec <__adddf3+0x70>
 80001e6:	4240      	negs	r0, r0
 80001e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001f8:	d002      	beq.n	8000200 <__adddf3+0x84>
 80001fa:	4252      	negs	r2, r2
 80001fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000200:	ea94 0f05 	teq	r4, r5
 8000204:	f000 80a7 	beq.w	8000356 <__adddf3+0x1da>
 8000208:	f1a4 0401 	sub.w	r4, r4, #1
 800020c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000210:	db0d      	blt.n	800022e <__adddf3+0xb2>
 8000212:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000216:	fa22 f205 	lsr.w	r2, r2, r5
 800021a:	1880      	adds	r0, r0, r2
 800021c:	f141 0100 	adc.w	r1, r1, #0
 8000220:	fa03 f20e 	lsl.w	r2, r3, lr
 8000224:	1880      	adds	r0, r0, r2
 8000226:	fa43 f305 	asr.w	r3, r3, r5
 800022a:	4159      	adcs	r1, r3
 800022c:	e00e      	b.n	800024c <__adddf3+0xd0>
 800022e:	f1a5 0520 	sub.w	r5, r5, #32
 8000232:	f10e 0e20 	add.w	lr, lr, #32
 8000236:	2a01      	cmp	r2, #1
 8000238:	fa03 fc0e 	lsl.w	ip, r3, lr
 800023c:	bf28      	it	cs
 800023e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000242:	fa43 f305 	asr.w	r3, r3, r5
 8000246:	18c0      	adds	r0, r0, r3
 8000248:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800024c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000250:	d507      	bpl.n	8000262 <__adddf3+0xe6>
 8000252:	f04f 0e00 	mov.w	lr, #0
 8000256:	f1dc 0c00 	rsbs	ip, ip, #0
 800025a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800025e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000262:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000266:	d31b      	bcc.n	80002a0 <__adddf3+0x124>
 8000268:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800026c:	d30c      	bcc.n	8000288 <__adddf3+0x10c>
 800026e:	0849      	lsrs	r1, r1, #1
 8000270:	ea5f 0030 	movs.w	r0, r0, rrx
 8000274:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000278:	f104 0401 	add.w	r4, r4, #1
 800027c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000280:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000284:	f080 809a 	bcs.w	80003bc <__adddf3+0x240>
 8000288:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800028c:	bf08      	it	eq
 800028e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000292:	f150 0000 	adcs.w	r0, r0, #0
 8000296:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029a:	ea41 0105 	orr.w	r1, r1, r5
 800029e:	bd30      	pop	{r4, r5, pc}
 80002a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a4:	4140      	adcs	r0, r0
 80002a6:	eb41 0101 	adc.w	r1, r1, r1
 80002aa:	3c01      	subs	r4, #1
 80002ac:	bf28      	it	cs
 80002ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002b2:	d2e9      	bcs.n	8000288 <__adddf3+0x10c>
 80002b4:	f091 0f00 	teq	r1, #0
 80002b8:	bf04      	itt	eq
 80002ba:	4601      	moveq	r1, r0
 80002bc:	2000      	moveq	r0, #0
 80002be:	fab1 f381 	clz	r3, r1
 80002c2:	bf08      	it	eq
 80002c4:	3320      	addeq	r3, #32
 80002c6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ca:	f1b3 0220 	subs.w	r2, r3, #32
 80002ce:	da0c      	bge.n	80002ea <__adddf3+0x16e>
 80002d0:	320c      	adds	r2, #12
 80002d2:	dd08      	ble.n	80002e6 <__adddf3+0x16a>
 80002d4:	f102 0c14 	add.w	ip, r2, #20
 80002d8:	f1c2 020c 	rsb	r2, r2, #12
 80002dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e0:	fa21 f102 	lsr.w	r1, r1, r2
 80002e4:	e00c      	b.n	8000300 <__adddf3+0x184>
 80002e6:	f102 0214 	add.w	r2, r2, #20
 80002ea:	bfd8      	it	le
 80002ec:	f1c2 0c20 	rsble	ip, r2, #32
 80002f0:	fa01 f102 	lsl.w	r1, r1, r2
 80002f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002f8:	bfdc      	itt	le
 80002fa:	ea41 010c 	orrle.w	r1, r1, ip
 80002fe:	4090      	lslle	r0, r2
 8000300:	1ae4      	subs	r4, r4, r3
 8000302:	bfa2      	ittt	ge
 8000304:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000308:	4329      	orrge	r1, r5
 800030a:	bd30      	popge	{r4, r5, pc}
 800030c:	ea6f 0404 	mvn.w	r4, r4
 8000310:	3c1f      	subs	r4, #31
 8000312:	da1c      	bge.n	800034e <__adddf3+0x1d2>
 8000314:	340c      	adds	r4, #12
 8000316:	dc0e      	bgt.n	8000336 <__adddf3+0x1ba>
 8000318:	f104 0414 	add.w	r4, r4, #20
 800031c:	f1c4 0220 	rsb	r2, r4, #32
 8000320:	fa20 f004 	lsr.w	r0, r0, r4
 8000324:	fa01 f302 	lsl.w	r3, r1, r2
 8000328:	ea40 0003 	orr.w	r0, r0, r3
 800032c:	fa21 f304 	lsr.w	r3, r1, r4
 8000330:	ea45 0103 	orr.w	r1, r5, r3
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f1c4 040c 	rsb	r4, r4, #12
 800033a:	f1c4 0220 	rsb	r2, r4, #32
 800033e:	fa20 f002 	lsr.w	r0, r0, r2
 8000342:	fa01 f304 	lsl.w	r3, r1, r4
 8000346:	ea40 0003 	orr.w	r0, r0, r3
 800034a:	4629      	mov	r1, r5
 800034c:	bd30      	pop	{r4, r5, pc}
 800034e:	fa21 f004 	lsr.w	r0, r1, r4
 8000352:	4629      	mov	r1, r5
 8000354:	bd30      	pop	{r4, r5, pc}
 8000356:	f094 0f00 	teq	r4, #0
 800035a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800035e:	bf06      	itte	eq
 8000360:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000364:	3401      	addeq	r4, #1
 8000366:	3d01      	subne	r5, #1
 8000368:	e74e      	b.n	8000208 <__adddf3+0x8c>
 800036a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800036e:	bf18      	it	ne
 8000370:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000374:	d029      	beq.n	80003ca <__adddf3+0x24e>
 8000376:	ea94 0f05 	teq	r4, r5
 800037a:	bf08      	it	eq
 800037c:	ea90 0f02 	teqeq	r0, r2
 8000380:	d005      	beq.n	800038e <__adddf3+0x212>
 8000382:	ea54 0c00 	orrs.w	ip, r4, r0
 8000386:	bf04      	itt	eq
 8000388:	4619      	moveq	r1, r3
 800038a:	4610      	moveq	r0, r2
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	ea91 0f03 	teq	r1, r3
 8000392:	bf1e      	ittt	ne
 8000394:	2100      	movne	r1, #0
 8000396:	2000      	movne	r0, #0
 8000398:	bd30      	popne	{r4, r5, pc}
 800039a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800039e:	d105      	bne.n	80003ac <__adddf3+0x230>
 80003a0:	0040      	lsls	r0, r0, #1
 80003a2:	4149      	adcs	r1, r1
 80003a4:	bf28      	it	cs
 80003a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003aa:	bd30      	pop	{r4, r5, pc}
 80003ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003b0:	bf3c      	itt	cc
 80003b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003b6:	bd30      	popcc	{r4, r5, pc}
 80003b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003c4:	f04f 0000 	mov.w	r0, #0
 80003c8:	bd30      	pop	{r4, r5, pc}
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf1a      	itte	ne
 80003d0:	4619      	movne	r1, r3
 80003d2:	4610      	movne	r0, r2
 80003d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003d8:	bf1c      	itt	ne
 80003da:	460b      	movne	r3, r1
 80003dc:	4602      	movne	r2, r0
 80003de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e2:	bf06      	itte	eq
 80003e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003e8:	ea91 0f03 	teqeq	r1, r3
 80003ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003f0:	bd30      	pop	{r4, r5, pc}
 80003f2:	bf00      	nop

080003f4 <__aeabi_ui2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f04f 0500 	mov.w	r5, #0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e750      	b.n	80002b4 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_i2d>:
 8000414:	f090 0f00 	teq	r0, #0
 8000418:	bf04      	itt	eq
 800041a:	2100      	moveq	r1, #0
 800041c:	4770      	bxeq	lr
 800041e:	b530      	push	{r4, r5, lr}
 8000420:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000424:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000428:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800042c:	bf48      	it	mi
 800042e:	4240      	negmi	r0, r0
 8000430:	f04f 0100 	mov.w	r1, #0
 8000434:	e73e      	b.n	80002b4 <__adddf3+0x138>
 8000436:	bf00      	nop

08000438 <__aeabi_f2d>:
 8000438:	0042      	lsls	r2, r0, #1
 800043a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800043e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000442:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000446:	bf1f      	itttt	ne
 8000448:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800044c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000450:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000454:	4770      	bxne	lr
 8000456:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800045a:	bf08      	it	eq
 800045c:	4770      	bxeq	lr
 800045e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000462:	bf04      	itt	eq
 8000464:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000468:	4770      	bxeq	lr
 800046a:	b530      	push	{r4, r5, lr}
 800046c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000470:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000474:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000478:	e71c      	b.n	80002b4 <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_ul2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f04f 0500 	mov.w	r5, #0
 800048a:	e00a      	b.n	80004a2 <__aeabi_l2d+0x16>

0800048c <__aeabi_l2d>:
 800048c:	ea50 0201 	orrs.w	r2, r0, r1
 8000490:	bf08      	it	eq
 8000492:	4770      	bxeq	lr
 8000494:	b530      	push	{r4, r5, lr}
 8000496:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800049a:	d502      	bpl.n	80004a2 <__aeabi_l2d+0x16>
 800049c:	4240      	negs	r0, r0
 800049e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004ae:	f43f aed8 	beq.w	8000262 <__adddf3+0xe6>
 80004b2:	f04f 0203 	mov.w	r2, #3
 80004b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ba:	bf18      	it	ne
 80004bc:	3203      	addne	r2, #3
 80004be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c2:	bf18      	it	ne
 80004c4:	3203      	addne	r2, #3
 80004c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d2:	fa20 f002 	lsr.w	r0, r0, r2
 80004d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004da:	ea40 000e 	orr.w	r0, r0, lr
 80004de:	fa21 f102 	lsr.w	r1, r1, r2
 80004e2:	4414      	add	r4, r2
 80004e4:	e6bd      	b.n	8000262 <__adddf3+0xe6>
 80004e6:	bf00      	nop

080004e8 <__aeabi_dmul>:
 80004e8:	b570      	push	{r4, r5, r6, lr}
 80004ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004f6:	bf1d      	ittte	ne
 80004f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004fc:	ea94 0f0c 	teqne	r4, ip
 8000500:	ea95 0f0c 	teqne	r5, ip
 8000504:	f000 f8de 	bleq	80006c4 <__aeabi_dmul+0x1dc>
 8000508:	442c      	add	r4, r5
 800050a:	ea81 0603 	eor.w	r6, r1, r3
 800050e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000512:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000516:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051a:	bf18      	it	ne
 800051c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000520:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000524:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000528:	d038      	beq.n	800059c <__aeabi_dmul+0xb4>
 800052a:	fba0 ce02 	umull	ip, lr, r0, r2
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000536:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800053a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800053e:	f04f 0600 	mov.w	r6, #0
 8000542:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000546:	f09c 0f00 	teq	ip, #0
 800054a:	bf18      	it	ne
 800054c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000550:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000554:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000558:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800055c:	d204      	bcs.n	8000568 <__aeabi_dmul+0x80>
 800055e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000562:	416d      	adcs	r5, r5
 8000564:	eb46 0606 	adc.w	r6, r6, r6
 8000568:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800056c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000570:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000574:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000578:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800057c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000580:	bf88      	it	hi
 8000582:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000586:	d81e      	bhi.n	80005c6 <__aeabi_dmul+0xde>
 8000588:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800058c:	bf08      	it	eq
 800058e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000592:	f150 0000 	adcs.w	r0, r0, #0
 8000596:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059a:	bd70      	pop	{r4, r5, r6, pc}
 800059c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005a0:	ea46 0101 	orr.w	r1, r6, r1
 80005a4:	ea40 0002 	orr.w	r0, r0, r2
 80005a8:	ea81 0103 	eor.w	r1, r1, r3
 80005ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b0:	bfc2      	ittt	gt
 80005b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005ba:	bd70      	popgt	{r4, r5, r6, pc}
 80005bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c0:	f04f 0e00 	mov.w	lr, #0
 80005c4:	3c01      	subs	r4, #1
 80005c6:	f300 80ab 	bgt.w	8000720 <__aeabi_dmul+0x238>
 80005ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ce:	bfde      	ittt	le
 80005d0:	2000      	movle	r0, #0
 80005d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005d6:	bd70      	pople	{r4, r5, r6, pc}
 80005d8:	f1c4 0400 	rsb	r4, r4, #0
 80005dc:	3c20      	subs	r4, #32
 80005de:	da35      	bge.n	800064c <__aeabi_dmul+0x164>
 80005e0:	340c      	adds	r4, #12
 80005e2:	dc1b      	bgt.n	800061c <__aeabi_dmul+0x134>
 80005e4:	f104 0414 	add.w	r4, r4, #20
 80005e8:	f1c4 0520 	rsb	r5, r4, #32
 80005ec:	fa00 f305 	lsl.w	r3, r0, r5
 80005f0:	fa20 f004 	lsr.w	r0, r0, r4
 80005f4:	fa01 f205 	lsl.w	r2, r1, r5
 80005f8:	ea40 0002 	orr.w	r0, r0, r2
 80005fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000600:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000604:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000608:	fa21 f604 	lsr.w	r6, r1, r4
 800060c:	eb42 0106 	adc.w	r1, r2, r6
 8000610:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000614:	bf08      	it	eq
 8000616:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061a:	bd70      	pop	{r4, r5, r6, pc}
 800061c:	f1c4 040c 	rsb	r4, r4, #12
 8000620:	f1c4 0520 	rsb	r5, r4, #32
 8000624:	fa00 f304 	lsl.w	r3, r0, r4
 8000628:	fa20 f005 	lsr.w	r0, r0, r5
 800062c:	fa01 f204 	lsl.w	r2, r1, r4
 8000630:	ea40 0002 	orr.w	r0, r0, r2
 8000634:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000638:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800063c:	f141 0100 	adc.w	r1, r1, #0
 8000640:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000644:	bf08      	it	eq
 8000646:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064a:	bd70      	pop	{r4, r5, r6, pc}
 800064c:	f1c4 0520 	rsb	r5, r4, #32
 8000650:	fa00 f205 	lsl.w	r2, r0, r5
 8000654:	ea4e 0e02 	orr.w	lr, lr, r2
 8000658:	fa20 f304 	lsr.w	r3, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea43 0302 	orr.w	r3, r3, r2
 8000664:	fa21 f004 	lsr.w	r0, r1, r4
 8000668:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800066c:	fa21 f204 	lsr.w	r2, r1, r4
 8000670:	ea20 0002 	bic.w	r0, r0, r2
 8000674:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f094 0f00 	teq	r4, #0
 8000688:	d10f      	bne.n	80006aa <__aeabi_dmul+0x1c2>
 800068a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800068e:	0040      	lsls	r0, r0, #1
 8000690:	eb41 0101 	adc.w	r1, r1, r1
 8000694:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3c01      	subeq	r4, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1a6>
 800069e:	ea41 0106 	orr.w	r1, r1, r6
 80006a2:	f095 0f00 	teq	r5, #0
 80006a6:	bf18      	it	ne
 80006a8:	4770      	bxne	lr
 80006aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006ae:	0052      	lsls	r2, r2, #1
 80006b0:	eb43 0303 	adc.w	r3, r3, r3
 80006b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006b8:	bf08      	it	eq
 80006ba:	3d01      	subeq	r5, #1
 80006bc:	d0f7      	beq.n	80006ae <__aeabi_dmul+0x1c6>
 80006be:	ea43 0306 	orr.w	r3, r3, r6
 80006c2:	4770      	bx	lr
 80006c4:	ea94 0f0c 	teq	r4, ip
 80006c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006cc:	bf18      	it	ne
 80006ce:	ea95 0f0c 	teqne	r5, ip
 80006d2:	d00c      	beq.n	80006ee <__aeabi_dmul+0x206>
 80006d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d8:	bf18      	it	ne
 80006da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006de:	d1d1      	bne.n	8000684 <__aeabi_dmul+0x19c>
 80006e0:	ea81 0103 	eor.w	r1, r1, r3
 80006e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e8:	f04f 0000 	mov.w	r0, #0
 80006ec:	bd70      	pop	{r4, r5, r6, pc}
 80006ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f2:	bf06      	itte	eq
 80006f4:	4610      	moveq	r0, r2
 80006f6:	4619      	moveq	r1, r3
 80006f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006fc:	d019      	beq.n	8000732 <__aeabi_dmul+0x24a>
 80006fe:	ea94 0f0c 	teq	r4, ip
 8000702:	d102      	bne.n	800070a <__aeabi_dmul+0x222>
 8000704:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000708:	d113      	bne.n	8000732 <__aeabi_dmul+0x24a>
 800070a:	ea95 0f0c 	teq	r5, ip
 800070e:	d105      	bne.n	800071c <__aeabi_dmul+0x234>
 8000710:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000714:	bf1c      	itt	ne
 8000716:	4610      	movne	r0, r2
 8000718:	4619      	movne	r1, r3
 800071a:	d10a      	bne.n	8000732 <__aeabi_dmul+0x24a>
 800071c:	ea81 0103 	eor.w	r1, r1, r3
 8000720:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000724:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000728:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800072c:	f04f 0000 	mov.w	r0, #0
 8000730:	bd70      	pop	{r4, r5, r6, pc}
 8000732:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000736:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800073a:	bd70      	pop	{r4, r5, r6, pc}

0800073c <__aeabi_ddiv>:
 800073c:	b570      	push	{r4, r5, r6, lr}
 800073e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000742:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000746:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074a:	bf1d      	ittte	ne
 800074c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000750:	ea94 0f0c 	teqne	r4, ip
 8000754:	ea95 0f0c 	teqne	r5, ip
 8000758:	f000 f8a7 	bleq	80008aa <__aeabi_ddiv+0x16e>
 800075c:	eba4 0405 	sub.w	r4, r4, r5
 8000760:	ea81 0e03 	eor.w	lr, r1, r3
 8000764:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000768:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800076c:	f000 8088 	beq.w	8000880 <__aeabi_ddiv+0x144>
 8000770:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000774:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000778:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800077c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000780:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000784:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000788:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800078c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000790:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000794:	429d      	cmp	r5, r3
 8000796:	bf08      	it	eq
 8000798:	4296      	cmpeq	r6, r2
 800079a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800079e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007a2:	d202      	bcs.n	80007aa <__aeabi_ddiv+0x6e>
 80007a4:	085b      	lsrs	r3, r3, #1
 80007a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007aa:	1ab6      	subs	r6, r6, r2
 80007ac:	eb65 0503 	sbc.w	r5, r5, r3
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007be:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007c6:	bf22      	ittt	cs
 80007c8:	1ab6      	subcs	r6, r6, r2
 80007ca:	4675      	movcs	r5, lr
 80007cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d0:	085b      	lsrs	r3, r3, #1
 80007d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007de:	bf22      	ittt	cs
 80007e0:	1ab6      	subcs	r6, r6, r2
 80007e2:	4675      	movcs	r5, lr
 80007e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007e8:	085b      	lsrs	r3, r3, #1
 80007ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007f6:	bf22      	ittt	cs
 80007f8:	1ab6      	subcs	r6, r6, r2
 80007fa:	4675      	movcs	r5, lr
 80007fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000800:	085b      	lsrs	r3, r3, #1
 8000802:	ea4f 0232 	mov.w	r2, r2, rrx
 8000806:	ebb6 0e02 	subs.w	lr, r6, r2
 800080a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800080e:	bf22      	ittt	cs
 8000810:	1ab6      	subcs	r6, r6, r2
 8000812:	4675      	movcs	r5, lr
 8000814:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000818:	ea55 0e06 	orrs.w	lr, r5, r6
 800081c:	d018      	beq.n	8000850 <__aeabi_ddiv+0x114>
 800081e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000822:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000826:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800082e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000832:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000836:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083a:	d1c0      	bne.n	80007be <__aeabi_ddiv+0x82>
 800083c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000840:	d10b      	bne.n	800085a <__aeabi_ddiv+0x11e>
 8000842:	ea41 0100 	orr.w	r1, r1, r0
 8000846:	f04f 0000 	mov.w	r0, #0
 800084a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800084e:	e7b6      	b.n	80007be <__aeabi_ddiv+0x82>
 8000850:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000854:	bf04      	itt	eq
 8000856:	4301      	orreq	r1, r0
 8000858:	2000      	moveq	r0, #0
 800085a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800085e:	bf88      	it	hi
 8000860:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000864:	f63f aeaf 	bhi.w	80005c6 <__aeabi_dmul+0xde>
 8000868:	ebb5 0c03 	subs.w	ip, r5, r3
 800086c:	bf04      	itt	eq
 800086e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000872:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000876:	f150 0000 	adcs.w	r0, r0, #0
 800087a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800087e:	bd70      	pop	{r4, r5, r6, pc}
 8000880:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000884:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000888:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800088c:	bfc2      	ittt	gt
 800088e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000892:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000896:	bd70      	popgt	{r4, r5, r6, pc}
 8000898:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800089c:	f04f 0e00 	mov.w	lr, #0
 80008a0:	3c01      	subs	r4, #1
 80008a2:	e690      	b.n	80005c6 <__aeabi_dmul+0xde>
 80008a4:	ea45 0e06 	orr.w	lr, r5, r6
 80008a8:	e68d      	b.n	80005c6 <__aeabi_dmul+0xde>
 80008aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008ae:	ea94 0f0c 	teq	r4, ip
 80008b2:	bf08      	it	eq
 80008b4:	ea95 0f0c 	teqeq	r5, ip
 80008b8:	f43f af3b 	beq.w	8000732 <__aeabi_dmul+0x24a>
 80008bc:	ea94 0f0c 	teq	r4, ip
 80008c0:	d10a      	bne.n	80008d8 <__aeabi_ddiv+0x19c>
 80008c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008c6:	f47f af34 	bne.w	8000732 <__aeabi_dmul+0x24a>
 80008ca:	ea95 0f0c 	teq	r5, ip
 80008ce:	f47f af25 	bne.w	800071c <__aeabi_dmul+0x234>
 80008d2:	4610      	mov	r0, r2
 80008d4:	4619      	mov	r1, r3
 80008d6:	e72c      	b.n	8000732 <__aeabi_dmul+0x24a>
 80008d8:	ea95 0f0c 	teq	r5, ip
 80008dc:	d106      	bne.n	80008ec <__aeabi_ddiv+0x1b0>
 80008de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e2:	f43f aefd 	beq.w	80006e0 <__aeabi_dmul+0x1f8>
 80008e6:	4610      	mov	r0, r2
 80008e8:	4619      	mov	r1, r3
 80008ea:	e722      	b.n	8000732 <__aeabi_dmul+0x24a>
 80008ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f0:	bf18      	it	ne
 80008f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008f6:	f47f aec5 	bne.w	8000684 <__aeabi_dmul+0x19c>
 80008fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008fe:	f47f af0d 	bne.w	800071c <__aeabi_dmul+0x234>
 8000902:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000906:	f47f aeeb 	bne.w	80006e0 <__aeabi_dmul+0x1f8>
 800090a:	e712      	b.n	8000732 <__aeabi_dmul+0x24a>

0800090c <__aeabi_frsub>:
 800090c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000910:	e002      	b.n	8000918 <__addsf3>
 8000912:	bf00      	nop

08000914 <__aeabi_fsub>:
 8000914:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000918 <__addsf3>:
 8000918:	0042      	lsls	r2, r0, #1
 800091a:	bf1f      	itttt	ne
 800091c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000920:	ea92 0f03 	teqne	r2, r3
 8000924:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000928:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800092c:	d06a      	beq.n	8000a04 <__addsf3+0xec>
 800092e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000932:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000936:	bfc1      	itttt	gt
 8000938:	18d2      	addgt	r2, r2, r3
 800093a:	4041      	eorgt	r1, r0
 800093c:	4048      	eorgt	r0, r1
 800093e:	4041      	eorgt	r1, r0
 8000940:	bfb8      	it	lt
 8000942:	425b      	neglt	r3, r3
 8000944:	2b19      	cmp	r3, #25
 8000946:	bf88      	it	hi
 8000948:	4770      	bxhi	lr
 800094a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800094e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000952:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000956:	bf18      	it	ne
 8000958:	4240      	negne	r0, r0
 800095a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800095e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000962:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000966:	bf18      	it	ne
 8000968:	4249      	negne	r1, r1
 800096a:	ea92 0f03 	teq	r2, r3
 800096e:	d03f      	beq.n	80009f0 <__addsf3+0xd8>
 8000970:	f1a2 0201 	sub.w	r2, r2, #1
 8000974:	fa41 fc03 	asr.w	ip, r1, r3
 8000978:	eb10 000c 	adds.w	r0, r0, ip
 800097c:	f1c3 0320 	rsb	r3, r3, #32
 8000980:	fa01 f103 	lsl.w	r1, r1, r3
 8000984:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000988:	d502      	bpl.n	8000990 <__addsf3+0x78>
 800098a:	4249      	negs	r1, r1
 800098c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000990:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000994:	d313      	bcc.n	80009be <__addsf3+0xa6>
 8000996:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800099a:	d306      	bcc.n	80009aa <__addsf3+0x92>
 800099c:	0840      	lsrs	r0, r0, #1
 800099e:	ea4f 0131 	mov.w	r1, r1, rrx
 80009a2:	f102 0201 	add.w	r2, r2, #1
 80009a6:	2afe      	cmp	r2, #254	; 0xfe
 80009a8:	d251      	bcs.n	8000a4e <__addsf3+0x136>
 80009aa:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80009ae:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80009b2:	bf08      	it	eq
 80009b4:	f020 0001 	biceq.w	r0, r0, #1
 80009b8:	ea40 0003 	orr.w	r0, r0, r3
 80009bc:	4770      	bx	lr
 80009be:	0049      	lsls	r1, r1, #1
 80009c0:	eb40 0000 	adc.w	r0, r0, r0
 80009c4:	3a01      	subs	r2, #1
 80009c6:	bf28      	it	cs
 80009c8:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 80009cc:	d2ed      	bcs.n	80009aa <__addsf3+0x92>
 80009ce:	fab0 fc80 	clz	ip, r0
 80009d2:	f1ac 0c08 	sub.w	ip, ip, #8
 80009d6:	ebb2 020c 	subs.w	r2, r2, ip
 80009da:	fa00 f00c 	lsl.w	r0, r0, ip
 80009de:	bfaa      	itet	ge
 80009e0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80009e4:	4252      	neglt	r2, r2
 80009e6:	4318      	orrge	r0, r3
 80009e8:	bfbc      	itt	lt
 80009ea:	40d0      	lsrlt	r0, r2
 80009ec:	4318      	orrlt	r0, r3
 80009ee:	4770      	bx	lr
 80009f0:	f092 0f00 	teq	r2, #0
 80009f4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80009f8:	bf06      	itte	eq
 80009fa:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80009fe:	3201      	addeq	r2, #1
 8000a00:	3b01      	subne	r3, #1
 8000a02:	e7b5      	b.n	8000970 <__addsf3+0x58>
 8000a04:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a08:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a0c:	bf18      	it	ne
 8000a0e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a12:	d021      	beq.n	8000a58 <__addsf3+0x140>
 8000a14:	ea92 0f03 	teq	r2, r3
 8000a18:	d004      	beq.n	8000a24 <__addsf3+0x10c>
 8000a1a:	f092 0f00 	teq	r2, #0
 8000a1e:	bf08      	it	eq
 8000a20:	4608      	moveq	r0, r1
 8000a22:	4770      	bx	lr
 8000a24:	ea90 0f01 	teq	r0, r1
 8000a28:	bf1c      	itt	ne
 8000a2a:	2000      	movne	r0, #0
 8000a2c:	4770      	bxne	lr
 8000a2e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000a32:	d104      	bne.n	8000a3e <__addsf3+0x126>
 8000a34:	0040      	lsls	r0, r0, #1
 8000a36:	bf28      	it	cs
 8000a38:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000a3c:	4770      	bx	lr
 8000a3e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000a42:	bf3c      	itt	cc
 8000a44:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000a48:	4770      	bxcc	lr
 8000a4a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a4e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000a52:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a56:	4770      	bx	lr
 8000a58:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000a5c:	bf16      	itet	ne
 8000a5e:	4608      	movne	r0, r1
 8000a60:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000a64:	4601      	movne	r1, r0
 8000a66:	0242      	lsls	r2, r0, #9
 8000a68:	bf06      	itte	eq
 8000a6a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000a6e:	ea90 0f01 	teqeq	r0, r1
 8000a72:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000a76:	4770      	bx	lr

08000a78 <__aeabi_ui2f>:
 8000a78:	f04f 0300 	mov.w	r3, #0
 8000a7c:	e004      	b.n	8000a88 <__aeabi_i2f+0x8>
 8000a7e:	bf00      	nop

08000a80 <__aeabi_i2f>:
 8000a80:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000a84:	bf48      	it	mi
 8000a86:	4240      	negmi	r0, r0
 8000a88:	ea5f 0c00 	movs.w	ip, r0
 8000a8c:	bf08      	it	eq
 8000a8e:	4770      	bxeq	lr
 8000a90:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000a94:	4601      	mov	r1, r0
 8000a96:	f04f 0000 	mov.w	r0, #0
 8000a9a:	e01c      	b.n	8000ad6 <__aeabi_l2f+0x2a>

08000a9c <__aeabi_ul2f>:
 8000a9c:	ea50 0201 	orrs.w	r2, r0, r1
 8000aa0:	bf08      	it	eq
 8000aa2:	4770      	bxeq	lr
 8000aa4:	f04f 0300 	mov.w	r3, #0
 8000aa8:	e00a      	b.n	8000ac0 <__aeabi_l2f+0x14>
 8000aaa:	bf00      	nop

08000aac <__aeabi_l2f>:
 8000aac:	ea50 0201 	orrs.w	r2, r0, r1
 8000ab0:	bf08      	it	eq
 8000ab2:	4770      	bxeq	lr
 8000ab4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000ab8:	d502      	bpl.n	8000ac0 <__aeabi_l2f+0x14>
 8000aba:	4240      	negs	r0, r0
 8000abc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ac0:	ea5f 0c01 	movs.w	ip, r1
 8000ac4:	bf02      	ittt	eq
 8000ac6:	4684      	moveq	ip, r0
 8000ac8:	4601      	moveq	r1, r0
 8000aca:	2000      	moveq	r0, #0
 8000acc:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000ad0:	bf08      	it	eq
 8000ad2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000ad6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000ada:	fabc f28c 	clz	r2, ip
 8000ade:	3a08      	subs	r2, #8
 8000ae0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ae4:	db10      	blt.n	8000b08 <__aeabi_l2f+0x5c>
 8000ae6:	fa01 fc02 	lsl.w	ip, r1, r2
 8000aea:	4463      	add	r3, ip
 8000aec:	fa00 fc02 	lsl.w	ip, r0, r2
 8000af0:	f1c2 0220 	rsb	r2, r2, #32
 8000af4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000af8:	fa20 f202 	lsr.w	r2, r0, r2
 8000afc:	eb43 0002 	adc.w	r0, r3, r2
 8000b00:	bf08      	it	eq
 8000b02:	f020 0001 	biceq.w	r0, r0, #1
 8000b06:	4770      	bx	lr
 8000b08:	f102 0220 	add.w	r2, r2, #32
 8000b0c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b10:	f1c2 0220 	rsb	r2, r2, #32
 8000b14:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000b18:	fa21 f202 	lsr.w	r2, r1, r2
 8000b1c:	eb43 0002 	adc.w	r0, r3, r2
 8000b20:	bf08      	it	eq
 8000b22:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000b26:	4770      	bx	lr

08000b28 <__aeabi_fmul>:
 8000b28:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000b2c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000b30:	bf1e      	ittt	ne
 8000b32:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000b36:	ea92 0f0c 	teqne	r2, ip
 8000b3a:	ea93 0f0c 	teqne	r3, ip
 8000b3e:	d06f      	beq.n	8000c20 <__aeabi_fmul+0xf8>
 8000b40:	441a      	add	r2, r3
 8000b42:	ea80 0c01 	eor.w	ip, r0, r1
 8000b46:	0240      	lsls	r0, r0, #9
 8000b48:	bf18      	it	ne
 8000b4a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000b4e:	d01e      	beq.n	8000b8e <__aeabi_fmul+0x66>
 8000b50:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000b54:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000b58:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000b5c:	fba0 3101 	umull	r3, r1, r0, r1
 8000b60:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000b64:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000b68:	bf3e      	ittt	cc
 8000b6a:	0049      	lslcc	r1, r1, #1
 8000b6c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000b70:	005b      	lslcc	r3, r3, #1
 8000b72:	ea40 0001 	orr.w	r0, r0, r1
 8000b76:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000b7a:	2afd      	cmp	r2, #253	; 0xfd
 8000b7c:	d81d      	bhi.n	8000bba <__aeabi_fmul+0x92>
 8000b7e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000b82:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b86:	bf08      	it	eq
 8000b88:	f020 0001 	biceq.w	r0, r0, #1
 8000b8c:	4770      	bx	lr
 8000b8e:	f090 0f00 	teq	r0, #0
 8000b92:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000b96:	bf08      	it	eq
 8000b98:	0249      	lsleq	r1, r1, #9
 8000b9a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000b9e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000ba2:	3a7f      	subs	r2, #127	; 0x7f
 8000ba4:	bfc2      	ittt	gt
 8000ba6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000baa:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000bae:	4770      	bxgt	lr
 8000bb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bb4:	f04f 0300 	mov.w	r3, #0
 8000bb8:	3a01      	subs	r2, #1
 8000bba:	dc5d      	bgt.n	8000c78 <__aeabi_fmul+0x150>
 8000bbc:	f112 0f19 	cmn.w	r2, #25
 8000bc0:	bfdc      	itt	le
 8000bc2:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000bc6:	4770      	bxle	lr
 8000bc8:	f1c2 0200 	rsb	r2, r2, #0
 8000bcc:	0041      	lsls	r1, r0, #1
 8000bce:	fa21 f102 	lsr.w	r1, r1, r2
 8000bd2:	f1c2 0220 	rsb	r2, r2, #32
 8000bd6:	fa00 fc02 	lsl.w	ip, r0, r2
 8000bda:	ea5f 0031 	movs.w	r0, r1, rrx
 8000bde:	f140 0000 	adc.w	r0, r0, #0
 8000be2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000be6:	bf08      	it	eq
 8000be8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000bec:	4770      	bx	lr
 8000bee:	f092 0f00 	teq	r2, #0
 8000bf2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000bf6:	bf02      	ittt	eq
 8000bf8:	0040      	lsleq	r0, r0, #1
 8000bfa:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000bfe:	3a01      	subeq	r2, #1
 8000c00:	d0f9      	beq.n	8000bf6 <__aeabi_fmul+0xce>
 8000c02:	ea40 000c 	orr.w	r0, r0, ip
 8000c06:	f093 0f00 	teq	r3, #0
 8000c0a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c0e:	bf02      	ittt	eq
 8000c10:	0049      	lsleq	r1, r1, #1
 8000c12:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000c16:	3b01      	subeq	r3, #1
 8000c18:	d0f9      	beq.n	8000c0e <__aeabi_fmul+0xe6>
 8000c1a:	ea41 010c 	orr.w	r1, r1, ip
 8000c1e:	e78f      	b.n	8000b40 <__aeabi_fmul+0x18>
 8000c20:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000c24:	ea92 0f0c 	teq	r2, ip
 8000c28:	bf18      	it	ne
 8000c2a:	ea93 0f0c 	teqne	r3, ip
 8000c2e:	d00a      	beq.n	8000c46 <__aeabi_fmul+0x11e>
 8000c30:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000c34:	bf18      	it	ne
 8000c36:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000c3a:	d1d8      	bne.n	8000bee <__aeabi_fmul+0xc6>
 8000c3c:	ea80 0001 	eor.w	r0, r0, r1
 8000c40:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000c44:	4770      	bx	lr
 8000c46:	f090 0f00 	teq	r0, #0
 8000c4a:	bf17      	itett	ne
 8000c4c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000c50:	4608      	moveq	r0, r1
 8000c52:	f091 0f00 	teqne	r1, #0
 8000c56:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000c5a:	d014      	beq.n	8000c86 <__aeabi_fmul+0x15e>
 8000c5c:	ea92 0f0c 	teq	r2, ip
 8000c60:	d101      	bne.n	8000c66 <__aeabi_fmul+0x13e>
 8000c62:	0242      	lsls	r2, r0, #9
 8000c64:	d10f      	bne.n	8000c86 <__aeabi_fmul+0x15e>
 8000c66:	ea93 0f0c 	teq	r3, ip
 8000c6a:	d103      	bne.n	8000c74 <__aeabi_fmul+0x14c>
 8000c6c:	024b      	lsls	r3, r1, #9
 8000c6e:	bf18      	it	ne
 8000c70:	4608      	movne	r0, r1
 8000c72:	d108      	bne.n	8000c86 <__aeabi_fmul+0x15e>
 8000c74:	ea80 0001 	eor.w	r0, r0, r1
 8000c78:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c8a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000c8e:	4770      	bx	lr

08000c90 <__aeabi_fdiv>:
 8000c90:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000c94:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000c98:	bf1e      	ittt	ne
 8000c9a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000c9e:	ea92 0f0c 	teqne	r2, ip
 8000ca2:	ea93 0f0c 	teqne	r3, ip
 8000ca6:	d069      	beq.n	8000d7c <__aeabi_fdiv+0xec>
 8000ca8:	eba2 0203 	sub.w	r2, r2, r3
 8000cac:	ea80 0c01 	eor.w	ip, r0, r1
 8000cb0:	0249      	lsls	r1, r1, #9
 8000cb2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000cb6:	d037      	beq.n	8000d28 <__aeabi_fdiv+0x98>
 8000cb8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000cbc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000cc0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000cc4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000cc8:	428b      	cmp	r3, r1
 8000cca:	bf38      	it	cc
 8000ccc:	005b      	lslcc	r3, r3, #1
 8000cce:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000cd2:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000cd6:	428b      	cmp	r3, r1
 8000cd8:	bf24      	itt	cs
 8000cda:	1a5b      	subcs	r3, r3, r1
 8000cdc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000ce0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ce4:	bf24      	itt	cs
 8000ce6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000cea:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000cee:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000cf2:	bf24      	itt	cs
 8000cf4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000cf8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000cfc:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000d00:	bf24      	itt	cs
 8000d02:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000d06:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000d0a:	011b      	lsls	r3, r3, #4
 8000d0c:	bf18      	it	ne
 8000d0e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000d12:	d1e0      	bne.n	8000cd6 <__aeabi_fdiv+0x46>
 8000d14:	2afd      	cmp	r2, #253	; 0xfd
 8000d16:	f63f af50 	bhi.w	8000bba <__aeabi_fmul+0x92>
 8000d1a:	428b      	cmp	r3, r1
 8000d1c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d20:	bf08      	it	eq
 8000d22:	f020 0001 	biceq.w	r0, r0, #1
 8000d26:	4770      	bx	lr
 8000d28:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d2c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d30:	327f      	adds	r2, #127	; 0x7f
 8000d32:	bfc2      	ittt	gt
 8000d34:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d38:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d3c:	4770      	bxgt	lr
 8000d3e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d42:	f04f 0300 	mov.w	r3, #0
 8000d46:	3a01      	subs	r2, #1
 8000d48:	e737      	b.n	8000bba <__aeabi_fmul+0x92>
 8000d4a:	f092 0f00 	teq	r2, #0
 8000d4e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d52:	bf02      	ittt	eq
 8000d54:	0040      	lsleq	r0, r0, #1
 8000d56:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d5a:	3a01      	subeq	r2, #1
 8000d5c:	d0f9      	beq.n	8000d52 <__aeabi_fdiv+0xc2>
 8000d5e:	ea40 000c 	orr.w	r0, r0, ip
 8000d62:	f093 0f00 	teq	r3, #0
 8000d66:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d6a:	bf02      	ittt	eq
 8000d6c:	0049      	lsleq	r1, r1, #1
 8000d6e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d72:	3b01      	subeq	r3, #1
 8000d74:	d0f9      	beq.n	8000d6a <__aeabi_fdiv+0xda>
 8000d76:	ea41 010c 	orr.w	r1, r1, ip
 8000d7a:	e795      	b.n	8000ca8 <__aeabi_fdiv+0x18>
 8000d7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000d80:	ea92 0f0c 	teq	r2, ip
 8000d84:	d108      	bne.n	8000d98 <__aeabi_fdiv+0x108>
 8000d86:	0242      	lsls	r2, r0, #9
 8000d88:	f47f af7d 	bne.w	8000c86 <__aeabi_fmul+0x15e>
 8000d8c:	ea93 0f0c 	teq	r3, ip
 8000d90:	f47f af70 	bne.w	8000c74 <__aeabi_fmul+0x14c>
 8000d94:	4608      	mov	r0, r1
 8000d96:	e776      	b.n	8000c86 <__aeabi_fmul+0x15e>
 8000d98:	ea93 0f0c 	teq	r3, ip
 8000d9c:	d104      	bne.n	8000da8 <__aeabi_fdiv+0x118>
 8000d9e:	024b      	lsls	r3, r1, #9
 8000da0:	f43f af4c 	beq.w	8000c3c <__aeabi_fmul+0x114>
 8000da4:	4608      	mov	r0, r1
 8000da6:	e76e      	b.n	8000c86 <__aeabi_fmul+0x15e>
 8000da8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000dac:	bf18      	it	ne
 8000dae:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000db2:	d1ca      	bne.n	8000d4a <__aeabi_fdiv+0xba>
 8000db4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000db8:	f47f af5c 	bne.w	8000c74 <__aeabi_fmul+0x14c>
 8000dbc:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000dc0:	f47f af3c 	bne.w	8000c3c <__aeabi_fmul+0x114>
 8000dc4:	e75f      	b.n	8000c86 <__aeabi_fmul+0x15e>
 8000dc6:	bf00      	nop

08000dc8 <__gesf2>:
 8000dc8:	f04f 3cff 	mov.w	ip, #4294967295
 8000dcc:	e006      	b.n	8000ddc <__cmpsf2+0x4>
 8000dce:	bf00      	nop

08000dd0 <__lesf2>:
 8000dd0:	f04f 0c01 	mov.w	ip, #1
 8000dd4:	e002      	b.n	8000ddc <__cmpsf2+0x4>
 8000dd6:	bf00      	nop

08000dd8 <__cmpsf2>:
 8000dd8:	f04f 0c01 	mov.w	ip, #1
 8000ddc:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000de0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000de4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000de8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000dec:	bf18      	it	ne
 8000dee:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000df2:	d011      	beq.n	8000e18 <__cmpsf2+0x40>
 8000df4:	b001      	add	sp, #4
 8000df6:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000dfa:	bf18      	it	ne
 8000dfc:	ea90 0f01 	teqne	r0, r1
 8000e00:	bf58      	it	pl
 8000e02:	ebb2 0003 	subspl.w	r0, r2, r3
 8000e06:	bf88      	it	hi
 8000e08:	17c8      	asrhi	r0, r1, #31
 8000e0a:	bf38      	it	cc
 8000e0c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000e10:	bf18      	it	ne
 8000e12:	f040 0001 	orrne.w	r0, r0, #1
 8000e16:	4770      	bx	lr
 8000e18:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e1c:	d102      	bne.n	8000e24 <__cmpsf2+0x4c>
 8000e1e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000e22:	d105      	bne.n	8000e30 <__cmpsf2+0x58>
 8000e24:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000e28:	d1e4      	bne.n	8000df4 <__cmpsf2+0x1c>
 8000e2a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000e2e:	d0e1      	beq.n	8000df4 <__cmpsf2+0x1c>
 8000e30:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000e34:	4770      	bx	lr
 8000e36:	bf00      	nop

08000e38 <__aeabi_cfrcmple>:
 8000e38:	4684      	mov	ip, r0
 8000e3a:	4608      	mov	r0, r1
 8000e3c:	4661      	mov	r1, ip
 8000e3e:	e7ff      	b.n	8000e40 <__aeabi_cfcmpeq>

08000e40 <__aeabi_cfcmpeq>:
 8000e40:	b50f      	push	{r0, r1, r2, r3, lr}
 8000e42:	f7ff ffc9 	bl	8000dd8 <__cmpsf2>
 8000e46:	2800      	cmp	r0, #0
 8000e48:	bf48      	it	mi
 8000e4a:	f110 0f00 	cmnmi.w	r0, #0
 8000e4e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000e50 <__aeabi_fcmpeq>:
 8000e50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e54:	f7ff fff4 	bl	8000e40 <__aeabi_cfcmpeq>
 8000e58:	bf0c      	ite	eq
 8000e5a:	2001      	moveq	r0, #1
 8000e5c:	2000      	movne	r0, #0
 8000e5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e62:	bf00      	nop

08000e64 <__aeabi_fcmplt>:
 8000e64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e68:	f7ff ffea 	bl	8000e40 <__aeabi_cfcmpeq>
 8000e6c:	bf34      	ite	cc
 8000e6e:	2001      	movcc	r0, #1
 8000e70:	2000      	movcs	r0, #0
 8000e72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e76:	bf00      	nop

08000e78 <__aeabi_fcmple>:
 8000e78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e7c:	f7ff ffe0 	bl	8000e40 <__aeabi_cfcmpeq>
 8000e80:	bf94      	ite	ls
 8000e82:	2001      	movls	r0, #1
 8000e84:	2000      	movhi	r0, #0
 8000e86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e8a:	bf00      	nop

08000e8c <__aeabi_fcmpge>:
 8000e8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e90:	f7ff ffd2 	bl	8000e38 <__aeabi_cfrcmple>
 8000e94:	bf94      	ite	ls
 8000e96:	2001      	movls	r0, #1
 8000e98:	2000      	movhi	r0, #0
 8000e9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e9e:	bf00      	nop

08000ea0 <__aeabi_fcmpgt>:
 8000ea0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ea4:	f7ff ffc8 	bl	8000e38 <__aeabi_cfrcmple>
 8000ea8:	bf34      	ite	cc
 8000eaa:	2001      	movcc	r0, #1
 8000eac:	2000      	movcs	r0, #0
 8000eae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000eb2:	bf00      	nop

08000eb4 <__aeabi_f2uiz>:
 8000eb4:	0042      	lsls	r2, r0, #1
 8000eb6:	d20e      	bcs.n	8000ed6 <__aeabi_f2uiz+0x22>
 8000eb8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000ebc:	d30b      	bcc.n	8000ed6 <__aeabi_f2uiz+0x22>
 8000ebe:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000ec2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000ec6:	d409      	bmi.n	8000edc <__aeabi_f2uiz+0x28>
 8000ec8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000ecc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ed0:	fa23 f002 	lsr.w	r0, r3, r2
 8000ed4:	4770      	bx	lr
 8000ed6:	f04f 0000 	mov.w	r0, #0
 8000eda:	4770      	bx	lr
 8000edc:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000ee0:	d101      	bne.n	8000ee6 <__aeabi_f2uiz+0x32>
 8000ee2:	0242      	lsls	r2, r0, #9
 8000ee4:	d102      	bne.n	8000eec <__aeabi_f2uiz+0x38>
 8000ee6:	f04f 30ff 	mov.w	r0, #4294967295
 8000eea:	4770      	bx	lr
 8000eec:	f04f 0000 	mov.w	r0, #0
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop

08000ef4 <strlen>:
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000efa:	2a00      	cmp	r2, #0
 8000efc:	d1fb      	bne.n	8000ef6 <strlen+0x2>
 8000efe:	1a18      	subs	r0, r3, r0
 8000f00:	3801      	subs	r0, #1
 8000f02:	4770      	bx	lr

08000f04 <__gedf2>:
 8000f04:	f04f 3cff 	mov.w	ip, #4294967295
 8000f08:	e006      	b.n	8000f18 <__cmpdf2+0x4>
 8000f0a:	bf00      	nop

08000f0c <__ledf2>:
 8000f0c:	f04f 0c01 	mov.w	ip, #1
 8000f10:	e002      	b.n	8000f18 <__cmpdf2+0x4>
 8000f12:	bf00      	nop

08000f14 <__cmpdf2>:
 8000f14:	f04f 0c01 	mov.w	ip, #1
 8000f18:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f1c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000f20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000f24:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000f28:	bf18      	it	ne
 8000f2a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000f2e:	d01b      	beq.n	8000f68 <__cmpdf2+0x54>
 8000f30:	b001      	add	sp, #4
 8000f32:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000f36:	bf0c      	ite	eq
 8000f38:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000f3c:	ea91 0f03 	teqne	r1, r3
 8000f40:	bf02      	ittt	eq
 8000f42:	ea90 0f02 	teqeq	r0, r2
 8000f46:	2000      	moveq	r0, #0
 8000f48:	4770      	bxeq	lr
 8000f4a:	f110 0f00 	cmn.w	r0, #0
 8000f4e:	ea91 0f03 	teq	r1, r3
 8000f52:	bf58      	it	pl
 8000f54:	4299      	cmppl	r1, r3
 8000f56:	bf08      	it	eq
 8000f58:	4290      	cmpeq	r0, r2
 8000f5a:	bf2c      	ite	cs
 8000f5c:	17d8      	asrcs	r0, r3, #31
 8000f5e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000f62:	f040 0001 	orr.w	r0, r0, #1
 8000f66:	4770      	bx	lr
 8000f68:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000f6c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000f70:	d102      	bne.n	8000f78 <__cmpdf2+0x64>
 8000f72:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000f76:	d107      	bne.n	8000f88 <__cmpdf2+0x74>
 8000f78:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000f7c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000f80:	d1d6      	bne.n	8000f30 <__cmpdf2+0x1c>
 8000f82:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000f86:	d0d3      	beq.n	8000f30 <__cmpdf2+0x1c>
 8000f88:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop

08000f90 <__aeabi_cdrcmple>:
 8000f90:	4684      	mov	ip, r0
 8000f92:	4610      	mov	r0, r2
 8000f94:	4662      	mov	r2, ip
 8000f96:	468c      	mov	ip, r1
 8000f98:	4619      	mov	r1, r3
 8000f9a:	4663      	mov	r3, ip
 8000f9c:	e000      	b.n	8000fa0 <__aeabi_cdcmpeq>
 8000f9e:	bf00      	nop

08000fa0 <__aeabi_cdcmpeq>:
 8000fa0:	b501      	push	{r0, lr}
 8000fa2:	f7ff ffb7 	bl	8000f14 <__cmpdf2>
 8000fa6:	2800      	cmp	r0, #0
 8000fa8:	bf48      	it	mi
 8000faa:	f110 0f00 	cmnmi.w	r0, #0
 8000fae:	bd01      	pop	{r0, pc}

08000fb0 <__aeabi_dcmpeq>:
 8000fb0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fb4:	f7ff fff4 	bl	8000fa0 <__aeabi_cdcmpeq>
 8000fb8:	bf0c      	ite	eq
 8000fba:	2001      	moveq	r0, #1
 8000fbc:	2000      	movne	r0, #0
 8000fbe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fc2:	bf00      	nop

08000fc4 <__aeabi_dcmplt>:
 8000fc4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fc8:	f7ff ffea 	bl	8000fa0 <__aeabi_cdcmpeq>
 8000fcc:	bf34      	ite	cc
 8000fce:	2001      	movcc	r0, #1
 8000fd0:	2000      	movcs	r0, #0
 8000fd2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fd6:	bf00      	nop

08000fd8 <__aeabi_dcmple>:
 8000fd8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fdc:	f7ff ffe0 	bl	8000fa0 <__aeabi_cdcmpeq>
 8000fe0:	bf94      	ite	ls
 8000fe2:	2001      	movls	r0, #1
 8000fe4:	2000      	movhi	r0, #0
 8000fe6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fea:	bf00      	nop

08000fec <__aeabi_dcmpge>:
 8000fec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ff0:	f7ff ffce 	bl	8000f90 <__aeabi_cdrcmple>
 8000ff4:	bf94      	ite	ls
 8000ff6:	2001      	movls	r0, #1
 8000ff8:	2000      	movhi	r0, #0
 8000ffa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ffe:	bf00      	nop

08001000 <__aeabi_dcmpgt>:
 8001000:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001004:	f7ff ffc4 	bl	8000f90 <__aeabi_cdrcmple>
 8001008:	bf34      	ite	cc
 800100a:	2001      	movcc	r0, #1
 800100c:	2000      	movcs	r0, #0
 800100e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001012:	bf00      	nop

08001014 <__aeabi_dcmpun>:
 8001014:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8001018:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800101c:	d102      	bne.n	8001024 <__aeabi_dcmpun+0x10>
 800101e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8001022:	d10a      	bne.n	800103a <__aeabi_dcmpun+0x26>
 8001024:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8001028:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800102c:	d102      	bne.n	8001034 <__aeabi_dcmpun+0x20>
 800102e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8001032:	d102      	bne.n	800103a <__aeabi_dcmpun+0x26>
 8001034:	f04f 0000 	mov.w	r0, #0
 8001038:	4770      	bx	lr
 800103a:	f04f 0001 	mov.w	r0, #1
 800103e:	4770      	bx	lr

08001040 <__aeabi_d2iz>:
 8001040:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8001044:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8001048:	d215      	bcs.n	8001076 <__aeabi_d2iz+0x36>
 800104a:	d511      	bpl.n	8001070 <__aeabi_d2iz+0x30>
 800104c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8001050:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8001054:	d912      	bls.n	800107c <__aeabi_d2iz+0x3c>
 8001056:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800105a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800105e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8001062:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8001066:	fa23 f002 	lsr.w	r0, r3, r2
 800106a:	bf18      	it	ne
 800106c:	4240      	negne	r0, r0
 800106e:	4770      	bx	lr
 8001070:	f04f 0000 	mov.w	r0, #0
 8001074:	4770      	bx	lr
 8001076:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800107a:	d105      	bne.n	8001088 <__aeabi_d2iz+0x48>
 800107c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8001080:	bf08      	it	eq
 8001082:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001086:	4770      	bx	lr
 8001088:	f04f 0000 	mov.w	r0, #0
 800108c:	4770      	bx	lr
 800108e:	bf00      	nop

08001090 <_ZN7ButtonsC1EP9buttons_t>:
#include "!!!CONFIG.hpp"
#include "BUTTONS.hpp"

// ******************************
// CONSTRUCTOR DEFINITION STARTS!
Buttons::Buttons(buttons_t my_buttons[BUTTONS_QTY])
 8001090:	b580      	push	{r7, lr}
 8001092:	b084      	sub	sp, #16
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
 8001098:	6039      	str	r1, [r7, #0]
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	4618      	mov	r0, r3
 800109e:	233c      	movs	r3, #60	; 0x3c
 80010a0:	461a      	mov	r2, r3
 80010a2:	2100      	movs	r1, #0
 80010a4:	f002 fb7c 	bl	80037a0 <memset>
{
// HERE IS PERYPHERY AUTOMATIC CONFIGURATION
/*user manually filled array with the buttons parameters, like GPIO port/pin, PU/PD, etc. is read. GPIO port is being configured
 * accordingly to the array content*/

	for(int i=0; i < BUTTONS_QTY; i++)
 80010a8:	2300      	movs	r3, #0
 80010aa:	60fb      	str	r3, [r7, #12]
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	2b02      	cmp	r3, #2
 80010b0:	f300 8158 	bgt.w	8001364 <_ZN7ButtonsC1EP9buttons_t+0x2d4>
	{
		if(my_buttons[i].GPIO_PORT_NAME == GPIOA)
 80010b4:	68fa      	ldr	r2, [r7, #12]
 80010b6:	4613      	mov	r3, r2
 80010b8:	005b      	lsls	r3, r3, #1
 80010ba:	4413      	add	r3, r2
 80010bc:	00db      	lsls	r3, r3, #3
 80010be:	461a      	mov	r2, r3
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	4413      	add	r3, r2
 80010c4:	685b      	ldr	r3, [r3, #4]
 80010c6:	4aaa      	ldr	r2, [pc, #680]	; (8001370 <_ZN7ButtonsC1EP9buttons_t+0x2e0>)
 80010c8:	4293      	cmp	r3, r2
 80010ca:	f040 809e 	bne.w	800120a <_ZN7ButtonsC1EP9buttons_t+0x17a>
		{
			RCC->APB2ENR 	|= RCC_APB2ENR_IOPAEN;												// PORT B CLOCK ENABLE FOR GPIO PURPOSE
 80010ce:	4ba9      	ldr	r3, [pc, #676]	; (8001374 <_ZN7ButtonsC1EP9buttons_t+0x2e4>)
 80010d0:	699b      	ldr	r3, [r3, #24]
 80010d2:	4aa8      	ldr	r2, [pc, #672]	; (8001374 <_ZN7ButtonsC1EP9buttons_t+0x2e4>)
 80010d4:	f043 0304 	orr.w	r3, r3, #4
 80010d8:	6193      	str	r3, [r2, #24]

			// configure bits CNFx in registers CRH and CRL to configure GPIO ports as inputs.
			if(my_buttons[i].GPIO_PIN_NUMBER <=7 )
 80010da:	68fa      	ldr	r2, [r7, #12]
 80010dc:	4613      	mov	r3, r2
 80010de:	005b      	lsls	r3, r3, #1
 80010e0:	4413      	add	r3, r2
 80010e2:	00db      	lsls	r3, r3, #3
 80010e4:	461a      	mov	r2, r3
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	4413      	add	r3, r2
 80010ea:	689b      	ldr	r3, [r3, #8]
 80010ec:	2b07      	cmp	r3, #7
 80010ee:	dc27      	bgt.n	8001140 <_ZN7ButtonsC1EP9buttons_t+0xb0>
				{																				// FOR ADC CHANNELS <=7 USE CRL REGISTER
				GPIOA->CRL &= ~(0b11 << (((my_buttons[i].GPIO_PIN_NUMBER - 0) *4 ) +2));		// CLEAN TWO BITS ACCORDIGNLY TO THE MASK
 80010f0:	4b9f      	ldr	r3, [pc, #636]	; (8001370 <_ZN7ButtonsC1EP9buttons_t+0x2e0>)
 80010f2:	6819      	ldr	r1, [r3, #0]
 80010f4:	68fa      	ldr	r2, [r7, #12]
 80010f6:	4613      	mov	r3, r2
 80010f8:	005b      	lsls	r3, r3, #1
 80010fa:	4413      	add	r3, r2
 80010fc:	00db      	lsls	r3, r3, #3
 80010fe:	461a      	mov	r2, r3
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	4413      	add	r3, r2
 8001104:	689b      	ldr	r3, [r3, #8]
 8001106:	009b      	lsls	r3, r3, #2
 8001108:	3302      	adds	r3, #2
 800110a:	2203      	movs	r2, #3
 800110c:	fa02 f303 	lsl.w	r3, r2, r3
 8001110:	43db      	mvns	r3, r3
 8001112:	4a97      	ldr	r2, [pc, #604]	; (8001370 <_ZN7ButtonsC1EP9buttons_t+0x2e0>)
 8001114:	400b      	ands	r3, r1
 8001116:	6013      	str	r3, [r2, #0]
				GPIOA->CRL |=  (0b10 << (((my_buttons[i].GPIO_PIN_NUMBER - 0) *4 ) +2));		// USE Y=kX+B TO CALCULATE MASK SHIFT
 8001118:	4b95      	ldr	r3, [pc, #596]	; (8001370 <_ZN7ButtonsC1EP9buttons_t+0x2e0>)
 800111a:	6819      	ldr	r1, [r3, #0]
 800111c:	68fa      	ldr	r2, [r7, #12]
 800111e:	4613      	mov	r3, r2
 8001120:	005b      	lsls	r3, r3, #1
 8001122:	4413      	add	r3, r2
 8001124:	00db      	lsls	r3, r3, #3
 8001126:	461a      	mov	r2, r3
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	4413      	add	r3, r2
 800112c:	689b      	ldr	r3, [r3, #8]
 800112e:	009b      	lsls	r3, r3, #2
 8001130:	3302      	adds	r3, #2
 8001132:	2202      	movs	r2, #2
 8001134:	fa02 f303 	lsl.w	r3, r2, r3
 8001138:	4a8d      	ldr	r2, [pc, #564]	; (8001370 <_ZN7ButtonsC1EP9buttons_t+0x2e0>)
 800113a:	430b      	orrs	r3, r1
 800113c:	6013      	str	r3, [r2, #0]
 800113e:	e028      	b.n	8001192 <_ZN7ButtonsC1EP9buttons_t+0x102>
				}
			else
				{																				// FOR ADC CHANNELS >7 USE CRH REGISTER
				GPIOA->CRH &= ~(0b11 << (((my_buttons[i].GPIO_PIN_NUMBER - 8) *4 ) +2));		// CLEAN TWO BITS ACCORDIGNLY TO THE MASK
 8001140:	4b8b      	ldr	r3, [pc, #556]	; (8001370 <_ZN7ButtonsC1EP9buttons_t+0x2e0>)
 8001142:	6859      	ldr	r1, [r3, #4]
 8001144:	68fa      	ldr	r2, [r7, #12]
 8001146:	4613      	mov	r3, r2
 8001148:	005b      	lsls	r3, r3, #1
 800114a:	4413      	add	r3, r2
 800114c:	00db      	lsls	r3, r3, #3
 800114e:	461a      	mov	r2, r3
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	4413      	add	r3, r2
 8001154:	689b      	ldr	r3, [r3, #8]
 8001156:	3b08      	subs	r3, #8
 8001158:	009b      	lsls	r3, r3, #2
 800115a:	3302      	adds	r3, #2
 800115c:	2203      	movs	r2, #3
 800115e:	fa02 f303 	lsl.w	r3, r2, r3
 8001162:	43db      	mvns	r3, r3
 8001164:	4a82      	ldr	r2, [pc, #520]	; (8001370 <_ZN7ButtonsC1EP9buttons_t+0x2e0>)
 8001166:	400b      	ands	r3, r1
 8001168:	6053      	str	r3, [r2, #4]
				GPIOA->CRH |=  (0b10 << (((my_buttons[i].GPIO_PIN_NUMBER - 8) *4 ) +2));		// USE Y=kX+B TO CALCULATE MASK SHIFT
 800116a:	4b81      	ldr	r3, [pc, #516]	; (8001370 <_ZN7ButtonsC1EP9buttons_t+0x2e0>)
 800116c:	6859      	ldr	r1, [r3, #4]
 800116e:	68fa      	ldr	r2, [r7, #12]
 8001170:	4613      	mov	r3, r2
 8001172:	005b      	lsls	r3, r3, #1
 8001174:	4413      	add	r3, r2
 8001176:	00db      	lsls	r3, r3, #3
 8001178:	461a      	mov	r2, r3
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	4413      	add	r3, r2
 800117e:	689b      	ldr	r3, [r3, #8]
 8001180:	3b08      	subs	r3, #8
 8001182:	009b      	lsls	r3, r3, #2
 8001184:	3302      	adds	r3, #2
 8001186:	2202      	movs	r2, #2
 8001188:	fa02 f303 	lsl.w	r3, r2, r3
 800118c:	4a78      	ldr	r2, [pc, #480]	; (8001370 <_ZN7ButtonsC1EP9buttons_t+0x2e0>)
 800118e:	430b      	orrs	r3, r1
 8001190:	6053      	str	r3, [r2, #4]
				}

			// configuring bits PU PD in resister ODR
			if(my_buttons[i].btn_needs_PU_PD == 'U')											// IF BUTTON REQUIRES PULL-UP
 8001192:	68fa      	ldr	r2, [r7, #12]
 8001194:	4613      	mov	r3, r2
 8001196:	005b      	lsls	r3, r3, #1
 8001198:	4413      	add	r3, r2
 800119a:	00db      	lsls	r3, r3, #3
 800119c:	461a      	mov	r2, r3
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	4413      	add	r3, r2
 80011a2:	7c1b      	ldrb	r3, [r3, #16]
 80011a4:	2b55      	cmp	r3, #85	; 0x55
 80011a6:	d111      	bne.n	80011cc <_ZN7ButtonsC1EP9buttons_t+0x13c>
				{
				GPIOA->ODR |=  (0b01  <<    my_buttons[i].GPIO_PIN_NUMBER);						// activate PULL-UP
 80011a8:	4b71      	ldr	r3, [pc, #452]	; (8001370 <_ZN7ButtonsC1EP9buttons_t+0x2e0>)
 80011aa:	68d9      	ldr	r1, [r3, #12]
 80011ac:	68fa      	ldr	r2, [r7, #12]
 80011ae:	4613      	mov	r3, r2
 80011b0:	005b      	lsls	r3, r3, #1
 80011b2:	4413      	add	r3, r2
 80011b4:	00db      	lsls	r3, r3, #3
 80011b6:	461a      	mov	r2, r3
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	4413      	add	r3, r2
 80011bc:	689b      	ldr	r3, [r3, #8]
 80011be:	2201      	movs	r2, #1
 80011c0:	fa02 f303 	lsl.w	r3, r2, r3
 80011c4:	4a6a      	ldr	r2, [pc, #424]	; (8001370 <_ZN7ButtonsC1EP9buttons_t+0x2e0>)
 80011c6:	430b      	orrs	r3, r1
 80011c8:	60d3      	str	r3, [r2, #12]
 80011ca:	e0c7      	b.n	800135c <_ZN7ButtonsC1EP9buttons_t+0x2cc>
				}
			else if(my_buttons[i].btn_needs_PU_PD == 'D')										// IF BUTTON REQUIRES PULL-DOWN
 80011cc:	68fa      	ldr	r2, [r7, #12]
 80011ce:	4613      	mov	r3, r2
 80011d0:	005b      	lsls	r3, r3, #1
 80011d2:	4413      	add	r3, r2
 80011d4:	00db      	lsls	r3, r3, #3
 80011d6:	461a      	mov	r2, r3
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	4413      	add	r3, r2
 80011dc:	7c1b      	ldrb	r3, [r3, #16]
 80011de:	2b44      	cmp	r3, #68	; 0x44
 80011e0:	f040 80bc 	bne.w	800135c <_ZN7ButtonsC1EP9buttons_t+0x2cc>
				{
				GPIOA->ODR &= ~(0b01  <<    my_buttons[i].GPIO_PIN_NUMBER);						// activate PULL-DOWN
 80011e4:	4b62      	ldr	r3, [pc, #392]	; (8001370 <_ZN7ButtonsC1EP9buttons_t+0x2e0>)
 80011e6:	68d9      	ldr	r1, [r3, #12]
 80011e8:	68fa      	ldr	r2, [r7, #12]
 80011ea:	4613      	mov	r3, r2
 80011ec:	005b      	lsls	r3, r3, #1
 80011ee:	4413      	add	r3, r2
 80011f0:	00db      	lsls	r3, r3, #3
 80011f2:	461a      	mov	r2, r3
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	4413      	add	r3, r2
 80011f8:	689b      	ldr	r3, [r3, #8]
 80011fa:	2201      	movs	r2, #1
 80011fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001200:	43db      	mvns	r3, r3
 8001202:	4a5b      	ldr	r2, [pc, #364]	; (8001370 <_ZN7ButtonsC1EP9buttons_t+0x2e0>)
 8001204:	400b      	ands	r3, r1
 8001206:	60d3      	str	r3, [r2, #12]
 8001208:	e0a8      	b.n	800135c <_ZN7ButtonsC1EP9buttons_t+0x2cc>
				}
		}
		else if(my_buttons[i].GPIO_PORT_NAME == GPIOB)
 800120a:	68fa      	ldr	r2, [r7, #12]
 800120c:	4613      	mov	r3, r2
 800120e:	005b      	lsls	r3, r3, #1
 8001210:	4413      	add	r3, r2
 8001212:	00db      	lsls	r3, r3, #3
 8001214:	461a      	mov	r2, r3
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	4413      	add	r3, r2
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	4a56      	ldr	r2, [pc, #344]	; (8001378 <_ZN7ButtonsC1EP9buttons_t+0x2e8>)
 800121e:	4293      	cmp	r3, r2
 8001220:	f040 809c 	bne.w	800135c <_ZN7ButtonsC1EP9buttons_t+0x2cc>
		{
			RCC->APB2ENR 	|= RCC_APB2ENR_IOPBEN;						// PORT B CLOCK ENABLE FOR GPIO PURPOSE
 8001224:	4b53      	ldr	r3, [pc, #332]	; (8001374 <_ZN7ButtonsC1EP9buttons_t+0x2e4>)
 8001226:	699b      	ldr	r3, [r3, #24]
 8001228:	4a52      	ldr	r2, [pc, #328]	; (8001374 <_ZN7ButtonsC1EP9buttons_t+0x2e4>)
 800122a:	f043 0308 	orr.w	r3, r3, #8
 800122e:	6193      	str	r3, [r2, #24]

			// configure bits CNFx in registers CRH and CRL to configure GPIO ports as inputs.
			if(my_buttons[i].GPIO_PIN_NUMBER <=7 )
 8001230:	68fa      	ldr	r2, [r7, #12]
 8001232:	4613      	mov	r3, r2
 8001234:	005b      	lsls	r3, r3, #1
 8001236:	4413      	add	r3, r2
 8001238:	00db      	lsls	r3, r3, #3
 800123a:	461a      	mov	r2, r3
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	4413      	add	r3, r2
 8001240:	689b      	ldr	r3, [r3, #8]
 8001242:	2b07      	cmp	r3, #7
 8001244:	dc27      	bgt.n	8001296 <_ZN7ButtonsC1EP9buttons_t+0x206>
				{																				// FOR ADC CHANNELS <=7 USE CRL REGISTER
				GPIOB->CRL &= ~(0b11 << (((my_buttons[i].GPIO_PIN_NUMBER - 0) *4 ) +2));		// CLEAN TWO BITS ACCORDIGNLY TO THE MASK
 8001246:	4b4c      	ldr	r3, [pc, #304]	; (8001378 <_ZN7ButtonsC1EP9buttons_t+0x2e8>)
 8001248:	6819      	ldr	r1, [r3, #0]
 800124a:	68fa      	ldr	r2, [r7, #12]
 800124c:	4613      	mov	r3, r2
 800124e:	005b      	lsls	r3, r3, #1
 8001250:	4413      	add	r3, r2
 8001252:	00db      	lsls	r3, r3, #3
 8001254:	461a      	mov	r2, r3
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	4413      	add	r3, r2
 800125a:	689b      	ldr	r3, [r3, #8]
 800125c:	009b      	lsls	r3, r3, #2
 800125e:	3302      	adds	r3, #2
 8001260:	2203      	movs	r2, #3
 8001262:	fa02 f303 	lsl.w	r3, r2, r3
 8001266:	43db      	mvns	r3, r3
 8001268:	4a43      	ldr	r2, [pc, #268]	; (8001378 <_ZN7ButtonsC1EP9buttons_t+0x2e8>)
 800126a:	400b      	ands	r3, r1
 800126c:	6013      	str	r3, [r2, #0]
				GPIOB->CRL |=  (0b10 << (((my_buttons[i].GPIO_PIN_NUMBER - 0) *4 ) +2));		// USE Y=kX+B TO CALCULATE MASK SHIFT
 800126e:	4b42      	ldr	r3, [pc, #264]	; (8001378 <_ZN7ButtonsC1EP9buttons_t+0x2e8>)
 8001270:	6819      	ldr	r1, [r3, #0]
 8001272:	68fa      	ldr	r2, [r7, #12]
 8001274:	4613      	mov	r3, r2
 8001276:	005b      	lsls	r3, r3, #1
 8001278:	4413      	add	r3, r2
 800127a:	00db      	lsls	r3, r3, #3
 800127c:	461a      	mov	r2, r3
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	4413      	add	r3, r2
 8001282:	689b      	ldr	r3, [r3, #8]
 8001284:	009b      	lsls	r3, r3, #2
 8001286:	3302      	adds	r3, #2
 8001288:	2202      	movs	r2, #2
 800128a:	fa02 f303 	lsl.w	r3, r2, r3
 800128e:	4a3a      	ldr	r2, [pc, #232]	; (8001378 <_ZN7ButtonsC1EP9buttons_t+0x2e8>)
 8001290:	430b      	orrs	r3, r1
 8001292:	6013      	str	r3, [r2, #0]
 8001294:	e028      	b.n	80012e8 <_ZN7ButtonsC1EP9buttons_t+0x258>
				}
			else
				{																				// FOR ADC CHANNELS >7 USE CRH REGISTER
				GPIOB->CRH &= ~(0b11 << (((my_buttons[i].GPIO_PIN_NUMBER - 8) *4 ) +2));		// CLEAN TWO BITS ACCORDIGNLY TO THE MASK
 8001296:	4b38      	ldr	r3, [pc, #224]	; (8001378 <_ZN7ButtonsC1EP9buttons_t+0x2e8>)
 8001298:	6859      	ldr	r1, [r3, #4]
 800129a:	68fa      	ldr	r2, [r7, #12]
 800129c:	4613      	mov	r3, r2
 800129e:	005b      	lsls	r3, r3, #1
 80012a0:	4413      	add	r3, r2
 80012a2:	00db      	lsls	r3, r3, #3
 80012a4:	461a      	mov	r2, r3
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	4413      	add	r3, r2
 80012aa:	689b      	ldr	r3, [r3, #8]
 80012ac:	3b08      	subs	r3, #8
 80012ae:	009b      	lsls	r3, r3, #2
 80012b0:	3302      	adds	r3, #2
 80012b2:	2203      	movs	r2, #3
 80012b4:	fa02 f303 	lsl.w	r3, r2, r3
 80012b8:	43db      	mvns	r3, r3
 80012ba:	4a2f      	ldr	r2, [pc, #188]	; (8001378 <_ZN7ButtonsC1EP9buttons_t+0x2e8>)
 80012bc:	400b      	ands	r3, r1
 80012be:	6053      	str	r3, [r2, #4]
				GPIOB->CRH |=  (0b10 << (((my_buttons[i].GPIO_PIN_NUMBER - 8) *4 ) +2));		// USE Y=kX+B TO CALCULATE MASK SHIFT
 80012c0:	4b2d      	ldr	r3, [pc, #180]	; (8001378 <_ZN7ButtonsC1EP9buttons_t+0x2e8>)
 80012c2:	6859      	ldr	r1, [r3, #4]
 80012c4:	68fa      	ldr	r2, [r7, #12]
 80012c6:	4613      	mov	r3, r2
 80012c8:	005b      	lsls	r3, r3, #1
 80012ca:	4413      	add	r3, r2
 80012cc:	00db      	lsls	r3, r3, #3
 80012ce:	461a      	mov	r2, r3
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	4413      	add	r3, r2
 80012d4:	689b      	ldr	r3, [r3, #8]
 80012d6:	3b08      	subs	r3, #8
 80012d8:	009b      	lsls	r3, r3, #2
 80012da:	3302      	adds	r3, #2
 80012dc:	2202      	movs	r2, #2
 80012de:	fa02 f303 	lsl.w	r3, r2, r3
 80012e2:	4a25      	ldr	r2, [pc, #148]	; (8001378 <_ZN7ButtonsC1EP9buttons_t+0x2e8>)
 80012e4:	430b      	orrs	r3, r1
 80012e6:	6053      	str	r3, [r2, #4]
				}

			// configuring bits PU PD in resister ODR
			if(my_buttons[i].btn_needs_PU_PD == 'U')
 80012e8:	68fa      	ldr	r2, [r7, #12]
 80012ea:	4613      	mov	r3, r2
 80012ec:	005b      	lsls	r3, r3, #1
 80012ee:	4413      	add	r3, r2
 80012f0:	00db      	lsls	r3, r3, #3
 80012f2:	461a      	mov	r2, r3
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	4413      	add	r3, r2
 80012f8:	7c1b      	ldrb	r3, [r3, #16]
 80012fa:	2b55      	cmp	r3, #85	; 0x55
 80012fc:	d111      	bne.n	8001322 <_ZN7ButtonsC1EP9buttons_t+0x292>
				{
				GPIOB->ODR |=  (0b01  <<    my_buttons[i].GPIO_PIN_NUMBER);					// PULL-UP activation
 80012fe:	4b1e      	ldr	r3, [pc, #120]	; (8001378 <_ZN7ButtonsC1EP9buttons_t+0x2e8>)
 8001300:	68d9      	ldr	r1, [r3, #12]
 8001302:	68fa      	ldr	r2, [r7, #12]
 8001304:	4613      	mov	r3, r2
 8001306:	005b      	lsls	r3, r3, #1
 8001308:	4413      	add	r3, r2
 800130a:	00db      	lsls	r3, r3, #3
 800130c:	461a      	mov	r2, r3
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	4413      	add	r3, r2
 8001312:	689b      	ldr	r3, [r3, #8]
 8001314:	2201      	movs	r2, #1
 8001316:	fa02 f303 	lsl.w	r3, r2, r3
 800131a:	4a17      	ldr	r2, [pc, #92]	; (8001378 <_ZN7ButtonsC1EP9buttons_t+0x2e8>)
 800131c:	430b      	orrs	r3, r1
 800131e:	60d3      	str	r3, [r2, #12]
 8001320:	e01c      	b.n	800135c <_ZN7ButtonsC1EP9buttons_t+0x2cc>
				}
			else if(my_buttons[i].btn_needs_PU_PD == 'D')
 8001322:	68fa      	ldr	r2, [r7, #12]
 8001324:	4613      	mov	r3, r2
 8001326:	005b      	lsls	r3, r3, #1
 8001328:	4413      	add	r3, r2
 800132a:	00db      	lsls	r3, r3, #3
 800132c:	461a      	mov	r2, r3
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	4413      	add	r3, r2
 8001332:	7c1b      	ldrb	r3, [r3, #16]
 8001334:	2b44      	cmp	r3, #68	; 0x44
 8001336:	d111      	bne.n	800135c <_ZN7ButtonsC1EP9buttons_t+0x2cc>
				{
				GPIOB->ODR &= ~(0b01  <<    my_buttons[i].GPIO_PIN_NUMBER);					// CLEAN BIT ACCORDIGNLY TO THE MASK
 8001338:	4b0f      	ldr	r3, [pc, #60]	; (8001378 <_ZN7ButtonsC1EP9buttons_t+0x2e8>)
 800133a:	68d9      	ldr	r1, [r3, #12]
 800133c:	68fa      	ldr	r2, [r7, #12]
 800133e:	4613      	mov	r3, r2
 8001340:	005b      	lsls	r3, r3, #1
 8001342:	4413      	add	r3, r2
 8001344:	00db      	lsls	r3, r3, #3
 8001346:	461a      	mov	r2, r3
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	4413      	add	r3, r2
 800134c:	689b      	ldr	r3, [r3, #8]
 800134e:	2201      	movs	r2, #1
 8001350:	fa02 f303 	lsl.w	r3, r2, r3
 8001354:	43db      	mvns	r3, r3
 8001356:	4a08      	ldr	r2, [pc, #32]	; (8001378 <_ZN7ButtonsC1EP9buttons_t+0x2e8>)
 8001358:	400b      	ands	r3, r1
 800135a:	60d3      	str	r3, [r2, #12]
	for(int i=0; i < BUTTONS_QTY; i++)
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	3301      	adds	r3, #1
 8001360:	60fb      	str	r3, [r7, #12]
 8001362:	e6a3      	b.n	80010ac <_ZN7ButtonsC1EP9buttons_t+0x1c>
				}
		}
	}

}
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	4618      	mov	r0, r3
 8001368:	3710      	adds	r7, #16
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	40010800 	.word	0x40010800
 8001374:	40021000 	.word	0x40021000
 8001378:	40010c00 	.word	0x40010c00

0800137c <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 800137c:	b480      	push	{r7}
 800137e:	b083      	sub	sp, #12
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
 8001384:	6039      	str	r1, [r7, #0]
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	4618      	mov	r0, r3
 800138a:	370c      	adds	r7, #12
 800138c:	46bd      	mov	sp, r7
 800138e:	bc80      	pop	{r7}
 8001390:	4770      	bx	lr

08001392 <_ZNSt15_Rb_tree_headerC1Ev>:
  struct _Rb_tree_header
  {
    _Rb_tree_node_base	_M_header;
    size_t		_M_node_count; // Keeps track of size of tree.

    _Rb_tree_header() _GLIBCXX_NOEXCEPT
 8001392:	b580      	push	{r7, lr}
 8001394:	b082      	sub	sp, #8
 8001396:	af00      	add	r7, sp, #0
 8001398:	6078      	str	r0, [r7, #4]
    {
      _M_header._M_color = _S_red;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	2200      	movs	r2, #0
 800139e:	701a      	strb	r2, [r3, #0]
      _M_reset();
 80013a0:	6878      	ldr	r0, [r7, #4]
 80013a2:	f000 f805 	bl	80013b0 <_ZNSt15_Rb_tree_header8_M_resetEv>
    }
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	4618      	mov	r0, r3
 80013aa:	3708      	adds	r7, #8
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}

080013b0 <_ZNSt15_Rb_tree_header8_M_resetEv>:

      __from._M_reset();
    }

    void
    _M_reset()
 80013b0:	b480      	push	{r7}
 80013b2:	b083      	sub	sp, #12
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
    {
      _M_header._M_parent = 0;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	2200      	movs	r2, #0
 80013bc:	605a      	str	r2, [r3, #4]
      _M_header._M_left = &_M_header;
 80013be:	687a      	ldr	r2, [r7, #4]
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	609a      	str	r2, [r3, #8]
      _M_header._M_right = &_M_header;
 80013c4:	687a      	ldr	r2, [r7, #4]
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	60da      	str	r2, [r3, #12]
      _M_node_count = 0;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	2200      	movs	r2, #0
 80013ce:	611a      	str	r2, [r3, #16]
    }
 80013d0:	bf00      	nop
 80013d2:	370c      	adds	r7, #12
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bc80      	pop	{r7}
 80013d8:	4770      	bx	lr

080013da <_ZNSt8_Rb_treeIiSt4pairIKiN5Delay15delay_details_tEESt10_Select1stIS4_ESt4lessIiESaIS4_EEC1Ev>:
    public:
      // allocation/deallocation
#if __cplusplus < 201103L
      _Rb_tree() { }
#else
      _Rb_tree() = default;
 80013da:	b580      	push	{r7, lr}
 80013dc:	b082      	sub	sp, #8
 80013de:	af00      	add	r7, sp, #0
 80013e0:	6078      	str	r0, [r7, #4]
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	4618      	mov	r0, r3
 80013e6:	f000 f8ff 	bl	80015e8 <_ZNSt8_Rb_treeIiSt4pairIKiN5Delay15delay_details_tEESt10_Select1stIS4_ESt4lessIiESaIS4_EE13_Rb_tree_implIS8_Lb1EEC1Ev>
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	4618      	mov	r0, r3
 80013ee:	3708      	adds	r7, #8
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd80      	pop	{r7, pc}

080013f4 <_ZNSt3mapIiN5Delay15delay_details_tESt4lessIiESaISt4pairIKiS1_EEEC1Ev>:
       *  @brief  Default constructor creates no elements.
       */
#if __cplusplus < 201103L
      map() : _M_t() { }
#else
      map() = default;
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b082      	sub	sp, #8
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	4618      	mov	r0, r3
 8001400:	f7ff ffeb 	bl	80013da <_ZNSt8_Rb_treeIiSt4pairIKiN5Delay15delay_details_tEESt10_Select1stIS4_ESt4lessIiESaIS4_EEC1Ev>
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	4618      	mov	r0, r3
 8001408:	3708      	adds	r7, #8
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}

0800140e <_ZN5DelayC1ERKNSt7__cxx114listIiSaIiEEE>:
	 * The delay_details_t instance is inserted as the value in the delay_map, using the delay value as the key.
	 * @param delays_list A list of integer delays.
	 * @note Assumes the function is called to initialize the Delay object.
	 * @retval None.
	 */
	Delay::Delay(const std::list<int>& delays_list){
 800140e:	b590      	push	{r4, r7, lr}
 8001410:	b08f      	sub	sp, #60	; 0x3c
 8001412:	af00      	add	r7, sp, #0
 8001414:	6078      	str	r0, [r7, #4]
 8001416:	6039      	str	r1, [r7, #0]
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	4618      	mov	r0, r3
 800141c:	f7ff ffea 	bl	80013f4 <_ZNSt3mapIiN5Delay15delay_details_tESt4lessIiESaISt4pairIKiS1_EEEC1Ev>
		for(auto it = delays_list.begin(); it != delays_list.end(); it++)	// for each list container element
 8001420:	6838      	ldr	r0, [r7, #0]
 8001422:	f000 f8f6 	bl	8001612 <_ZNKSt7__cxx114listIiSaIiEE5beginEv>
 8001426:	4603      	mov	r3, r0
 8001428:	61bb      	str	r3, [r7, #24]
 800142a:	6838      	ldr	r0, [r7, #0]
 800142c:	f000 f902 	bl	8001634 <_ZNKSt7__cxx114listIiSaIiEE3endEv>
 8001430:	4603      	mov	r3, r0
 8001432:	61fb      	str	r3, [r7, #28]
 8001434:	f107 021c 	add.w	r2, r7, #28
 8001438:	f107 0318 	add.w	r3, r7, #24
 800143c:	4611      	mov	r1, r2
 800143e:	4618      	mov	r0, r3
 8001440:	f000 f908 	bl	8001654 <_ZStneRKSt20_List_const_iteratorIiES2_>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	d02a      	beq.n	80014a0 <_ZN5DelayC1ERKNSt7__cxx114listIiSaIiEEE+0x92>
		{
			delay_details_t delay_details;									// structure variable instance creation
 800144a:	f107 030c 	add.w	r3, r7, #12
 800144e:	2200      	movs	r2, #0
 8001450:	601a      	str	r2, [r3, #0]
 8001452:	605a      	str	r2, [r3, #4]
 8001454:	609a      	str	r2, [r3, #8]
			delay_details.delay_target_ms = *it;							// desired delay in ms, copied from delays list.
 8001456:	f107 0318 	add.w	r3, r7, #24
 800145a:	4618      	mov	r0, r3
 800145c:	f000 f920 	bl	80016a0 <_ZNKSt20_List_const_iteratorIiEdeEv>
 8001460:	4603      	mov	r3, r0
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	617b      	str	r3, [r7, #20]
			delays_map.insert(std::make_pair(*it, delay_details));			// map key:value pair appending
 8001466:	687c      	ldr	r4, [r7, #4]
 8001468:	f107 0318 	add.w	r3, r7, #24
 800146c:	4618      	mov	r0, r3
 800146e:	f000 f917 	bl	80016a0 <_ZNKSt20_List_const_iteratorIiEdeEv>
 8001472:	4601      	mov	r1, r0
 8001474:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001478:	f107 020c 	add.w	r2, r7, #12
 800147c:	4618      	mov	r0, r3
 800147e:	f000 f91d 	bl	80016bc <_ZSt9make_pairIRKiRN5Delay15delay_details_tEESt4pairINSt25__strip_reference_wrapperINSt5decayIT_E4typeEE6__typeENS6_INS7_IT0_E4typeEE6__typeEEOS8_OSD_>
 8001482:	f107 0320 	add.w	r3, r7, #32
 8001486:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800148a:	4621      	mov	r1, r4
 800148c:	4618      	mov	r0, r3
 800148e:	f000 f92c 	bl	80016ea <_ZNSt3mapIiN5Delay15delay_details_tESt4lessIiESaISt4pairIKiS1_EEE6insertIS4_IiS1_EEENSt9enable_ifIXsrSt16is_constructibleIS6_JT_EE5valueES4_ISt17_Rb_tree_iteratorIS6_EbEE4typeEOSD_>
		for(auto it = delays_list.begin(); it != delays_list.end(); it++)	// for each list container element
 8001492:	f107 0318 	add.w	r3, r7, #24
 8001496:	2100      	movs	r1, #0
 8001498:	4618      	mov	r0, r3
 800149a:	f000 f8ee 	bl	800167a <_ZNSt20_List_const_iteratorIiEppEi>
 800149e:	e7c4      	b.n	800142a <_ZN5DelayC1ERKNSt7__cxx114listIiSaIiEEE+0x1c>
		}
	}
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	4618      	mov	r0, r3
 80014a4:	373c      	adds	r7, #60	; 0x3c
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd90      	pop	{r4, r7, pc}

080014aa <_ZN5Delay12delay_updateEv>:
	 * @note	should be called in the main program cycle
	 * @param	no parameters
     * @retval	no return value
     */
	void Delay::delay_update()
	{
 80014aa:	b590      	push	{r4, r7, lr}
 80014ac:	b085      	sub	sp, #20
 80014ae:	af00      	add	r7, sp, #0
 80014b0:	6078      	str	r0, [r7, #4]
		for(auto it = delays_map.begin(); it != delays_map.end(); it++)			// checks all the map entries
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	4618      	mov	r0, r3
 80014b6:	f000 f92d 	bl	8001714 <_ZNSt3mapIiN5Delay15delay_details_tESt4lessIiESaISt4pairIKiS1_EEE5beginEv>
 80014ba:	4603      	mov	r3, r0
 80014bc:	60bb      	str	r3, [r7, #8]
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	4618      	mov	r0, r3
 80014c2:	f000 f934 	bl	800172e <_ZNSt3mapIiN5Delay15delay_details_tESt4lessIiESaISt4pairIKiS1_EEE3endEv>
 80014c6:	4603      	mov	r3, r0
 80014c8:	60fb      	str	r3, [r7, #12]
 80014ca:	f107 020c 	add.w	r2, r7, #12
 80014ce:	f107 0308 	add.w	r3, r7, #8
 80014d2:	4611      	mov	r1, r2
 80014d4:	4618      	mov	r0, r3
 80014d6:	f000 f937 	bl	8001748 <_ZStneRKSt17_Rb_tree_iteratorISt4pairIKiN5Delay15delay_details_tEEES7_>
 80014da:	4603      	mov	r3, r0
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d035      	beq.n	800154c <_ZN5Delay12delay_updateEv+0xa2>
		{																		//																//
			if(it->second.delay_counter_ms == it->second.delay_target_ms)	// if 1ms counter reached threshold value
 80014e0:	f107 0308 	add.w	r3, r7, #8
 80014e4:	4618      	mov	r0, r3
 80014e6:	f000 f957 	bl	8001798 <_ZNKSt17_Rb_tree_iteratorISt4pairIKiN5Delay15delay_details_tEEEptEv>
 80014ea:	4603      	mov	r3, r0
 80014ec:	689c      	ldr	r4, [r3, #8]
 80014ee:	f107 0308 	add.w	r3, r7, #8
 80014f2:	4618      	mov	r0, r3
 80014f4:	f000 f950 	bl	8001798 <_ZNKSt17_Rb_tree_iteratorISt4pairIKiN5Delay15delay_details_tEEEptEv>
 80014f8:	4603      	mov	r3, r0
 80014fa:	68db      	ldr	r3, [r3, #12]
 80014fc:	429c      	cmp	r4, r3
 80014fe:	bf0c      	ite	eq
 8001500:	2301      	moveq	r3, #1
 8001502:	2300      	movne	r3, #0
 8001504:	b2db      	uxtb	r3, r3
 8001506:	2b00      	cmp	r3, #0
 8001508:	d010      	beq.n	800152c <_ZN5Delay12delay_updateEv+0x82>
			{
				it->second.delay_over = true;								// set TRUE for delay_over
 800150a:	f107 0308 	add.w	r3, r7, #8
 800150e:	4618      	mov	r0, r3
 8001510:	f000 f942 	bl	8001798 <_ZNKSt17_Rb_tree_iteratorISt4pairIKiN5Delay15delay_details_tEEEptEv>
 8001514:	4603      	mov	r3, r0
 8001516:	2201      	movs	r2, #1
 8001518:	715a      	strb	r2, [r3, #5]
				it->second.delay_counter_ms = 0;							// reset 1ms counter
 800151a:	f107 0308 	add.w	r3, r7, #8
 800151e:	4618      	mov	r0, r3
 8001520:	f000 f93a 	bl	8001798 <_ZNKSt17_Rb_tree_iteratorISt4pairIKiN5Delay15delay_details_tEEEptEv>
 8001524:	4603      	mov	r3, r0
 8001526:	2200      	movs	r2, #0
 8001528:	609a      	str	r2, [r3, #8]
 800152a:	e008      	b.n	800153e <_ZN5Delay12delay_updateEv+0x94>
			}
			else
			{
				it->second.delay_counter_ms++;								// increment 1ms intervals counter
 800152c:	f107 0308 	add.w	r3, r7, #8
 8001530:	4618      	mov	r0, r3
 8001532:	f000 f931 	bl	8001798 <_ZNKSt17_Rb_tree_iteratorISt4pairIKiN5Delay15delay_details_tEEEptEv>
 8001536:	4603      	mov	r3, r0
 8001538:	689a      	ldr	r2, [r3, #8]
 800153a:	3201      	adds	r2, #1
 800153c:	609a      	str	r2, [r3, #8]
		for(auto it = delays_map.begin(); it != delays_map.end(); it++)			// checks all the map entries
 800153e:	f107 0308 	add.w	r3, r7, #8
 8001542:	2100      	movs	r1, #0
 8001544:	4618      	mov	r0, r3
 8001546:	f000 f912 	bl	800176e <_ZNSt17_Rb_tree_iteratorISt4pairIKiN5Delay15delay_details_tEEEppEi>
 800154a:	e7b8      	b.n	80014be <_ZN5Delay12delay_updateEv+0x14>
			}
		}
	}
 800154c:	bf00      	nop
 800154e:	3714      	adds	r7, #20
 8001550:	46bd      	mov	sp, r7
 8001552:	bd90      	pop	{r4, r7, pc}

08001554 <_ZN5Delay13delay_is_overEi>:
	 * @note	if, argument isn't present within the map keys - ERROR precompilation
	 * @param	int, delay, in ms. Argument value should be present within the map container keys.
	 * @retval	returns TRUE in case of delay already over.
	 */
	bool Delay::delay_is_over(int delay)
	{
 8001554:	b580      	push	{r7, lr}
 8001556:	b084      	sub	sp, #16
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
 800155c:	6039      	str	r1, [r7, #0]
		auto it = delays_map.find(delay);			//searches for argument value within map keys
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	463a      	mov	r2, r7
 8001562:	4611      	mov	r1, r2
 8001564:	4618      	mov	r0, r3
 8001566:	f000 f925 	bl	80017b4 <_ZNSt3mapIiN5Delay15delay_details_tESt4lessIiESaISt4pairIKiS1_EEE4findERS5_>
 800156a:	4603      	mov	r3, r0
 800156c:	60bb      	str	r3, [r7, #8]
		if(it != delays_map.end())					// if key is found
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	4618      	mov	r0, r3
 8001572:	f000 f8dc 	bl	800172e <_ZNSt3mapIiN5Delay15delay_details_tESt4lessIiESaISt4pairIKiS1_EEE3endEv>
 8001576:	4603      	mov	r3, r0
 8001578:	60fb      	str	r3, [r7, #12]
 800157a:	f107 020c 	add.w	r2, r7, #12
 800157e:	f107 0308 	add.w	r3, r7, #8
 8001582:	4611      	mov	r1, r2
 8001584:	4618      	mov	r0, r3
 8001586:	f000 f8df 	bl	8001748 <_ZStneRKSt17_Rb_tree_iteratorISt4pairIKiN5Delay15delay_details_tEEES7_>
 800158a:	4603      	mov	r3, r0
 800158c:	2b00      	cmp	r3, #0
 800158e:	d019      	beq.n	80015c4 <_ZN5Delay13delay_is_overEi+0x70>
			{										//
				if(it->second.delay_over == true) 	// if delay is already over.
 8001590:	f107 0308 	add.w	r3, r7, #8
 8001594:	4618      	mov	r0, r3
 8001596:	f000 f8ff 	bl	8001798 <_ZNKSt17_Rb_tree_iteratorISt4pairIKiN5Delay15delay_details_tEEEptEv>
 800159a:	4603      	mov	r3, r0
 800159c:	795b      	ldrb	r3, [r3, #5]
 800159e:	2b01      	cmp	r3, #1
 80015a0:	bf0c      	ite	eq
 80015a2:	2301      	moveq	r3, #1
 80015a4:	2300      	movne	r3, #0
 80015a6:	b2db      	uxtb	r3, r3
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d009      	beq.n	80015c0 <_ZN5Delay13delay_is_overEi+0x6c>
				{									//
					it->second.delay_over = 0;		// reset delay_over to the FALSE state.
 80015ac:	f107 0308 	add.w	r3, r7, #8
 80015b0:	4618      	mov	r0, r3
 80015b2:	f000 f8f1 	bl	8001798 <_ZNKSt17_Rb_tree_iteratorISt4pairIKiN5Delay15delay_details_tEEEptEv>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2200      	movs	r2, #0
 80015ba:	715a      	strb	r2, [r3, #5]
					return true;					// return TRUE, means delay_is_over.
 80015bc:	2301      	movs	r3, #1
 80015be:	e00b      	b.n	80015d8 <_ZN5Delay13delay_is_overEi+0x84>
				}
				else								// if delay isn't over yet
				{									//
					return false;					// return FALSE
 80015c0:	2300      	movs	r3, #0
 80015c2:	e009      	b.n	80015d8 <_ZN5Delay13delay_is_overEi+0x84>
				}
			}
		else
		{
			GPIOC->ODR &= ~GPIO_ODR_ODR13;	  // SET LED GPIO LOW (LIGHT ON)
 80015c4:	4b06      	ldr	r3, [pc, #24]	; (80015e0 <_ZN5Delay13delay_is_overEi+0x8c>)
 80015c6:	68db      	ldr	r3, [r3, #12]
 80015c8:	4a05      	ldr	r2, [pc, #20]	; (80015e0 <_ZN5Delay13delay_is_overEi+0x8c>)
 80015ca:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80015ce:	60d3      	str	r3, [r2, #12]
			printf ("ARGUMENT VALUE NOT FOUND WITHIN THE CONSTRUCTOR ARGUMENT VALUES\n");
 80015d0:	4804      	ldr	r0, [pc, #16]	; (80015e4 <_ZN5Delay13delay_is_overEi+0x90>)
 80015d2:	f002 fe97 	bl	8004304 <puts>
		}
		return false;
 80015d6:	2300      	movs	r3, #0
	}
 80015d8:	4618      	mov	r0, r3
 80015da:	3710      	adds	r7, #16
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	40011000 	.word	0x40011000
 80015e4:	080062ac 	.word	0x080062ac

080015e8 <_ZNSt8_Rb_treeIiSt4pairIKiN5Delay15delay_details_tEESt10_Select1stIS4_ESt4lessIiESaIS4_EE13_Rb_tree_implIS8_Lb1EEC1Ev>:
	  _Rb_tree_impl()
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b082      	sub	sp, #8
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
	  : _Node_allocator()
 80015f0:	6878      	ldr	r0, [r7, #4]
 80015f2:	f000 f8ee 	bl	80017d2 <_ZNSaISt13_Rb_tree_nodeISt4pairIKiN5Delay15delay_details_tEEEEC1Ev>
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	4618      	mov	r0, r3
 80015fa:	f000 f8f6 	bl	80017ea <_ZNSt20_Rb_tree_key_compareISt4lessIiEEC1Ev>
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	3304      	adds	r3, #4
 8001602:	4618      	mov	r0, r3
 8001604:	f7ff fec5 	bl	8001392 <_ZNSt15_Rb_tree_headerC1Ev>
	  { }
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	4618      	mov	r0, r3
 800160c:	3708      	adds	r7, #8
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}

08001612 <_ZNKSt7__cxx114listIiSaIiEE5beginEv>:
       *  Returns a read-only (constant) iterator that points to the
       *  first element in the %list.  Iteration is done in ordinary
       *  element order.
       */
      const_iterator
      begin() const _GLIBCXX_NOEXCEPT
 8001612:	b580      	push	{r7, lr}
 8001614:	b084      	sub	sp, #16
 8001616:	af00      	add	r7, sp, #0
 8001618:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_node._M_next); }
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681a      	ldr	r2, [r3, #0]
 800161e:	f107 030c 	add.w	r3, r7, #12
 8001622:	4611      	mov	r1, r2
 8001624:	4618      	mov	r0, r3
 8001626:	f000 f8f5 	bl	8001814 <_ZNSt20_List_const_iteratorIiEC1EPKNSt8__detail15_List_node_baseE>
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	4618      	mov	r0, r3
 800162e:	3710      	adds	r7, #16
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}

08001634 <_ZNKSt7__cxx114listIiSaIiEE3endEv>:
       *  Returns a read-only (constant) iterator that points one past
       *  the last element in the %list.  Iteration is done in ordinary
       *  element order.
       */
      const_iterator
      end() const _GLIBCXX_NOEXCEPT
 8001634:	b580      	push	{r7, lr}
 8001636:	b084      	sub	sp, #16
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
      { return const_iterator(&this->_M_impl._M_node); }
 800163c:	687a      	ldr	r2, [r7, #4]
 800163e:	f107 030c 	add.w	r3, r7, #12
 8001642:	4611      	mov	r1, r2
 8001644:	4618      	mov	r0, r3
 8001646:	f000 f8e5 	bl	8001814 <_ZNSt20_List_const_iteratorIiEC1EPKNSt8__detail15_List_node_baseE>
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	4618      	mov	r0, r3
 800164e:	3710      	adds	r7, #16
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}

08001654 <_ZStneRKSt20_List_const_iteratorIiES2_>:
      operator!=(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8001654:	b480      	push	{r7}
 8001656:	b083      	sub	sp, #12
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
 800165c:	6039      	str	r1, [r7, #0]
      { return __x._M_node != __y._M_node; }
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681a      	ldr	r2, [r3, #0]
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	429a      	cmp	r2, r3
 8001668:	bf14      	ite	ne
 800166a:	2301      	movne	r3, #1
 800166c:	2300      	moveq	r3, #0
 800166e:	b2db      	uxtb	r3, r3
 8001670:	4618      	mov	r0, r3
 8001672:	370c      	adds	r7, #12
 8001674:	46bd      	mov	sp, r7
 8001676:	bc80      	pop	{r7}
 8001678:	4770      	bx	lr

0800167a <_ZNSt20_List_const_iteratorIiEppEi>:
      operator++(int) _GLIBCXX_NOEXCEPT
 800167a:	b480      	push	{r7}
 800167c:	b085      	sub	sp, #20
 800167e:	af00      	add	r7, sp, #0
 8001680:	6078      	str	r0, [r7, #4]
 8001682:	6039      	str	r1, [r7, #0]
	_Self __tmp = *this;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	60fb      	str	r3, [r7, #12]
	_M_node = _M_node->_M_next;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	681a      	ldr	r2, [r3, #0]
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	601a      	str	r2, [r3, #0]
	return __tmp;
 8001694:	68fb      	ldr	r3, [r7, #12]
      }
 8001696:	4618      	mov	r0, r3
 8001698:	3714      	adds	r7, #20
 800169a:	46bd      	mov	sp, r7
 800169c:	bc80      	pop	{r7}
 800169e:	4770      	bx	lr

080016a0 <_ZNKSt20_List_const_iteratorIiEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b082      	sub	sp, #8
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Node*>(_M_node)->_M_valptr(); }
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4618      	mov	r0, r3
 80016ae:	f000 f8bf 	bl	8001830 <_ZNKSt10_List_nodeIiE9_M_valptrEv>
 80016b2:	4603      	mov	r3, r0
 80016b4:	4618      	mov	r0, r3
 80016b6:	3708      	adds	r7, #8
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}

080016bc <_ZSt9make_pairIRKiRN5Delay15delay_details_tEESt4pairINSt25__strip_reference_wrapperINSt5decayIT_E4typeEE6__typeENS6_INS7_IT0_E4typeEE6__typeEEOS8_OSD_>:
#if __cplusplus >= 201103L
  // NB: DR 706.
  template<typename _T1, typename _T2>
    constexpr pair<typename __decay_and_strip<_T1>::__type,
                   typename __decay_and_strip<_T2>::__type>
    make_pair(_T1&& __x, _T2&& __y)
 80016bc:	b590      	push	{r4, r7, lr}
 80016be:	b085      	sub	sp, #20
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	60f8      	str	r0, [r7, #12]
 80016c4:	60b9      	str	r1, [r7, #8]
 80016c6:	607a      	str	r2, [r7, #4]
    {
      typedef typename __decay_and_strip<_T1>::__type __ds_type1;
      typedef typename __decay_and_strip<_T2>::__type __ds_type2;
      typedef pair<__ds_type1, __ds_type2> 	      __pair_type;
      return __pair_type(std::forward<_T1>(__x), std::forward<_T2>(__y));
 80016c8:	68b8      	ldr	r0, [r7, #8]
 80016ca:	f000 f8bf 	bl	800184c <_ZSt7forwardIRKiEOT_RNSt16remove_referenceIS2_E4typeE>
 80016ce:	4604      	mov	r4, r0
 80016d0:	6878      	ldr	r0, [r7, #4]
 80016d2:	f000 f8c5 	bl	8001860 <_ZSt7forwardIRN5Delay15delay_details_tEEOT_RNSt16remove_referenceIS3_E4typeE>
 80016d6:	4603      	mov	r3, r0
 80016d8:	461a      	mov	r2, r3
 80016da:	4621      	mov	r1, r4
 80016dc:	68f8      	ldr	r0, [r7, #12]
 80016de:	f000 f8c9 	bl	8001874 <_ZNSt4pairIiN5Delay15delay_details_tEEC1IRS1_Lb1EEERKiOT_>
    }
 80016e2:	68f8      	ldr	r0, [r7, #12]
 80016e4:	3714      	adds	r7, #20
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd90      	pop	{r4, r7, pc}

080016ea <_ZNSt3mapIiN5Delay15delay_details_tESt4lessIiESaISt4pairIKiS1_EEE6insertIS4_IiS1_EEENSt9enable_ifIXsrSt16is_constructibleIS6_JT_EE5valueES4_ISt17_Rb_tree_iteratorIS6_EbEE4typeEOSD_>:
      { return _M_t._M_insert_unique(std::move(__x)); }

      template<typename _Pair>
	__enable_if_t<is_constructible<value_type, _Pair>::value,
		      pair<iterator, bool>>
	insert(_Pair&& __x)
 80016ea:	b590      	push	{r4, r7, lr}
 80016ec:	b085      	sub	sp, #20
 80016ee:	af00      	add	r7, sp, #0
 80016f0:	60f8      	str	r0, [r7, #12]
 80016f2:	60b9      	str	r1, [r7, #8]
 80016f4:	607a      	str	r2, [r7, #4]
	{ return _M_t._M_emplace_unique(std::forward<_Pair>(__x)); }
 80016f6:	68bc      	ldr	r4, [r7, #8]
 80016f8:	6878      	ldr	r0, [r7, #4]
 80016fa:	f000 f8d3 	bl	80018a4 <_ZSt7forwardISt4pairIiN5Delay15delay_details_tEEEOT_RNSt16remove_referenceIS4_E4typeE>
 80016fe:	4602      	mov	r2, r0
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	4621      	mov	r1, r4
 8001704:	4618      	mov	r0, r3
 8001706:	f000 f8d7 	bl	80018b8 <_ZNSt8_Rb_treeIiSt4pairIKiN5Delay15delay_details_tEESt10_Select1stIS4_ESt4lessIiESaIS4_EE17_M_emplace_uniqueIJS0_IiS3_EEEES0_ISt17_Rb_tree_iteratorIS4_EbEDpOT_>
 800170a:	bf00      	nop
 800170c:	68f8      	ldr	r0, [r7, #12]
 800170e:	3714      	adds	r7, #20
 8001710:	46bd      	mov	sp, r7
 8001712:	bd90      	pop	{r4, r7, pc}

08001714 <_ZNSt3mapIiN5Delay15delay_details_tESt4lessIiESaISt4pairIKiS1_EEE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8001714:	b580      	push	{r7, lr}
 8001716:	b082      	sub	sp, #8
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
      { return _M_t.begin(); }
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	4618      	mov	r0, r3
 8001720:	f000 f914 	bl	800194c <_ZNSt8_Rb_treeIiSt4pairIKiN5Delay15delay_details_tEESt10_Select1stIS4_ESt4lessIiESaIS4_EE5beginEv>
 8001724:	4603      	mov	r3, r0
 8001726:	4618      	mov	r0, r3
 8001728:	3708      	adds	r7, #8
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}

0800172e <_ZNSt3mapIiN5Delay15delay_details_tESt4lessIiESaISt4pairIKiS1_EEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 800172e:	b580      	push	{r7, lr}
 8001730:	b082      	sub	sp, #8
 8001732:	af00      	add	r7, sp, #0
 8001734:	6078      	str	r0, [r7, #4]
      { return _M_t.end(); }
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	4618      	mov	r0, r3
 800173a:	f000 f918 	bl	800196e <_ZNSt8_Rb_treeIiSt4pairIKiN5Delay15delay_details_tEESt10_Select1stIS4_ESt4lessIiESaIS4_EE3endEv>
 800173e:	4603      	mov	r3, r0
 8001740:	4618      	mov	r0, r3
 8001742:	3708      	adds	r7, #8
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}

08001748 <_ZStneRKSt17_Rb_tree_iteratorISt4pairIKiN5Delay15delay_details_tEEES7_>:
      operator!=(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8001748:	b480      	push	{r7}
 800174a:	b083      	sub	sp, #12
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
 8001750:	6039      	str	r1, [r7, #0]
      { return __x._M_node != __y._M_node; }
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681a      	ldr	r2, [r3, #0]
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	429a      	cmp	r2, r3
 800175c:	bf14      	ite	ne
 800175e:	2301      	movne	r3, #1
 8001760:	2300      	moveq	r3, #0
 8001762:	b2db      	uxtb	r3, r3
 8001764:	4618      	mov	r0, r3
 8001766:	370c      	adds	r7, #12
 8001768:	46bd      	mov	sp, r7
 800176a:	bc80      	pop	{r7}
 800176c:	4770      	bx	lr

0800176e <_ZNSt17_Rb_tree_iteratorISt4pairIKiN5Delay15delay_details_tEEEppEi>:
      operator++(int) _GLIBCXX_NOEXCEPT
 800176e:	b580      	push	{r7, lr}
 8001770:	b084      	sub	sp, #16
 8001772:	af00      	add	r7, sp, #0
 8001774:	6078      	str	r0, [r7, #4]
 8001776:	6039      	str	r1, [r7, #0]
	_Self __tmp = *this;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	60fb      	str	r3, [r7, #12]
	_M_node = _Rb_tree_increment(_M_node);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4618      	mov	r0, r3
 8001784:	f001 ff50 	bl	8003628 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>
 8001788:	4602      	mov	r2, r0
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	601a      	str	r2, [r3, #0]
	return __tmp;
 800178e:	68fb      	ldr	r3, [r7, #12]
      }
 8001790:	4618      	mov	r0, r3
 8001792:	3710      	adds	r7, #16
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}

08001798 <_ZNKSt17_Rb_tree_iteratorISt4pairIKiN5Delay15delay_details_tEEEptEv>:
      operator->() const _GLIBCXX_NOEXCEPT
 8001798:	b580      	push	{r7, lr}
 800179a:	b082      	sub	sp, #8
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type> (_M_node)->_M_valptr(); }
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4618      	mov	r0, r3
 80017a6:	f000 f8f3 	bl	8001990 <_ZNSt13_Rb_tree_nodeISt4pairIKiN5Delay15delay_details_tEEE9_M_valptrEv>
 80017aa:	4603      	mov	r3, r0
 80017ac:	4618      	mov	r0, r3
 80017ae:	3708      	adds	r7, #8
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}

080017b4 <_ZNSt3mapIiN5Delay15delay_details_tESt4lessIiESaISt4pairIKiS1_EEE4findERS5_>:
       *  pointing to the sought after %pair.  If unsuccessful it returns the
       *  past-the-end ( @c end() ) iterator.
       */

      iterator
      find(const key_type& __x)
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b082      	sub	sp, #8
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
 80017bc:	6039      	str	r1, [r7, #0]
      { return _M_t.find(__x); }
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6839      	ldr	r1, [r7, #0]
 80017c2:	4618      	mov	r0, r3
 80017c4:	f000 f8f2 	bl	80019ac <_ZNSt8_Rb_treeIiSt4pairIKiN5Delay15delay_details_tEESt10_Select1stIS4_ESt4lessIiESaIS4_EE4findERS1_>
 80017c8:	4603      	mov	r3, r0
 80017ca:	4618      	mov	r0, r3
 80017cc:	3708      	adds	r7, #8
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}

080017d2 <_ZNSaISt13_Rb_tree_nodeISt4pairIKiN5Delay15delay_details_tEEEEC1Ev>:
#endif

      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 3035. std::allocator's constructors should be constexpr
      _GLIBCXX20_CONSTEXPR
      allocator() _GLIBCXX_NOTHROW { }
 80017d2:	b580      	push	{r7, lr}
 80017d4:	b082      	sub	sp, #8
 80017d6:	af00      	add	r7, sp, #0
 80017d8:	6078      	str	r0, [r7, #4]
 80017da:	6878      	ldr	r0, [r7, #4]
 80017dc:	f000 f922 	bl	8001a24 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKiN5Delay15delay_details_tEEEEC1Ev>
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	4618      	mov	r0, r3
 80017e4:	3708      	adds	r7, #8
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}

080017ea <_ZNSt20_Rb_tree_key_compareISt4lessIiEEC1Ev>:
      _Rb_tree_key_compare()
 80017ea:	b480      	push	{r7}
 80017ec:	b083      	sub	sp, #12
 80017ee:	af00      	add	r7, sp, #0
 80017f0:	6078      	str	r0, [r7, #4]
      { }
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	4618      	mov	r0, r3
 80017f6:	370c      	adds	r7, #12
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bc80      	pop	{r7}
 80017fc:	4770      	bx	lr

080017fe <_ZNSt8_Rb_treeIiSt4pairIKiN5Delay15delay_details_tEESt10_Select1stIS4_ESt4lessIiESaIS4_EE8_M_beginEv>:
      _M_begin() _GLIBCXX_NOEXCEPT
 80017fe:	b480      	push	{r7}
 8001800:	b083      	sub	sp, #12
 8001802:	af00      	add	r7, sp, #0
 8001804:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	689b      	ldr	r3, [r3, #8]
 800180a:	4618      	mov	r0, r3
 800180c:	370c      	adds	r7, #12
 800180e:	46bd      	mov	sp, r7
 8001810:	bc80      	pop	{r7}
 8001812:	4770      	bx	lr

08001814 <_ZNSt20_List_const_iteratorIiEC1EPKNSt8__detail15_List_node_baseE>:
      _List_const_iterator(const __detail::_List_node_base* __x)
 8001814:	b480      	push	{r7}
 8001816:	b083      	sub	sp, #12
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
 800181c:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	683a      	ldr	r2, [r7, #0]
 8001822:	601a      	str	r2, [r3, #0]
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	4618      	mov	r0, r3
 8001828:	370c      	adds	r7, #12
 800182a:	46bd      	mov	sp, r7
 800182c:	bc80      	pop	{r7}
 800182e:	4770      	bx	lr

08001830 <_ZNKSt10_List_nodeIiE9_M_valptrEv>:
      _Tp const* _M_valptr() const { return _M_storage._M_ptr(); }
 8001830:	b580      	push	{r7, lr}
 8001832:	b082      	sub	sp, #8
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	3308      	adds	r3, #8
 800183c:	4618      	mov	r0, r3
 800183e:	f000 f922 	bl	8001a86 <_ZNK9__gnu_cxx16__aligned_membufIiE6_M_ptrEv>
 8001842:	4603      	mov	r3, r0
 8001844:	4618      	mov	r0, r3
 8001846:	3708      	adds	r7, #8
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}

0800184c <_ZSt7forwardIRKiEOT_RNSt16remove_referenceIS2_E4typeE>:
   *
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800184c:	b480      	push	{r7}
 800184e:	b083      	sub	sp, #12
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	4618      	mov	r0, r3
 8001858:	370c      	adds	r7, #12
 800185a:	46bd      	mov	sp, r7
 800185c:	bc80      	pop	{r7}
 800185e:	4770      	bx	lr

08001860 <_ZSt7forwardIRN5Delay15delay_details_tEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8001860:	b480      	push	{r7}
 8001862:	b083      	sub	sp, #12
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	4618      	mov	r0, r3
 800186c:	370c      	adds	r7, #12
 800186e:	46bd      	mov	sp, r7
 8001870:	bc80      	pop	{r7}
 8001872:	4770      	bx	lr

08001874 <_ZNSt4pairIiN5Delay15delay_details_tEEC1IRS1_Lb1EEERKiOT_>:
       constexpr pair(const _T1& __x, _U2&& __y)
 8001874:	b580      	push	{r7, lr}
 8001876:	b084      	sub	sp, #16
 8001878:	af00      	add	r7, sp, #0
 800187a:	60f8      	str	r0, [r7, #12]
 800187c:	60b9      	str	r1, [r7, #8]
 800187e:	607a      	str	r2, [r7, #4]
       : first(__x), second(std::forward<_U2>(__y)) { }
 8001880:	68bb      	ldr	r3, [r7, #8]
 8001882:	681a      	ldr	r2, [r3, #0]
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	601a      	str	r2, [r3, #0]
 8001888:	6878      	ldr	r0, [r7, #4]
 800188a:	f7ff ffe9 	bl	8001860 <_ZSt7forwardIRN5Delay15delay_details_tEEOT_RNSt16remove_referenceIS3_E4typeE>
 800188e:	4602      	mov	r2, r0
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	3304      	adds	r3, #4
 8001894:	ca07      	ldmia	r2, {r0, r1, r2}
 8001896:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	4618      	mov	r0, r3
 800189e:	3710      	adds	r7, #16
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}

080018a4 <_ZSt7forwardISt4pairIiN5Delay15delay_details_tEEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80018a4:	b480      	push	{r7}
 80018a6:	b083      	sub	sp, #12
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	4618      	mov	r0, r3
 80018b0:	370c      	adds	r7, #12
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bc80      	pop	{r7}
 80018b6:	4770      	bx	lr

080018b8 <_ZNSt8_Rb_treeIiSt4pairIKiN5Delay15delay_details_tEESt10_Select1stIS4_ESt4lessIiESaIS4_EE17_M_emplace_uniqueIJS0_IiS3_EEEES0_ISt17_Rb_tree_iteratorIS4_EbEDpOT_>:
  template<typename _Key, typename _Val, typename _KeyOfValue,
	   typename _Compare, typename _Alloc>
    template<typename... _Args>
      pair<typename _Rb_tree<_Key, _Val, _KeyOfValue,
			     _Compare, _Alloc>::iterator, bool>
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b08c      	sub	sp, #48	; 0x30
 80018bc:	af00      	add	r7, sp, #0
 80018be:	60f8      	str	r0, [r7, #12]
 80018c0:	60b9      	str	r1, [r7, #8]
 80018c2:	607a      	str	r2, [r7, #4]
      _M_emplace_unique(_Args&&... __args)
      {
	_Link_type __z = _M_create_node(std::forward<_Args>(__args)...);
 80018c4:	6878      	ldr	r0, [r7, #4]
 80018c6:	f7ff ffed 	bl	80018a4 <_ZSt7forwardISt4pairIiN5Delay15delay_details_tEEEOT_RNSt16remove_referenceIS4_E4typeE>
 80018ca:	4603      	mov	r3, r0
 80018cc:	4619      	mov	r1, r3
 80018ce:	68b8      	ldr	r0, [r7, #8]
 80018d0:	f000 f8e5 	bl	8001a9e <_ZNSt8_Rb_treeIiSt4pairIKiN5Delay15delay_details_tEESt10_Select1stIS4_ESt4lessIiESaIS4_EE14_M_create_nodeIJS0_IiS3_EEEEPSt13_Rb_tree_nodeIS4_EDpOT_>
 80018d4:	62f8      	str	r0, [r7, #44]	; 0x2c

	__try
	  {
	    typedef pair<iterator, bool> _Res;
	    auto __res = _M_get_insert_unique_pos(_S_key(__z));
 80018d6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80018d8:	f000 f97d 	bl	8001bd6 <_ZNSt8_Rb_treeIiSt4pairIKiN5Delay15delay_details_tEESt10_Select1stIS4_ESt4lessIiESaIS4_EE6_S_keyEPKSt13_Rb_tree_nodeIS4_E>
 80018dc:	4602      	mov	r2, r0
 80018de:	f107 0314 	add.w	r3, r7, #20
 80018e2:	68b9      	ldr	r1, [r7, #8]
 80018e4:	4618      	mov	r0, r3
 80018e6:	f000 f8f1 	bl	8001acc <_ZNSt8_Rb_treeIiSt4pairIKiN5Delay15delay_details_tEESt10_Select1stIS4_ESt4lessIiESaIS4_EE24_M_get_insert_unique_posERS1_>
	    if (__res.second)
 80018ea:	69bb      	ldr	r3, [r7, #24]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d013      	beq.n	8001918 <_ZNSt8_Rb_treeIiSt4pairIKiN5Delay15delay_details_tEESt10_Select1stIS4_ESt4lessIiESaIS4_EE17_M_emplace_uniqueIJS0_IiS3_EEEES0_ISt17_Rb_tree_iteratorIS4_EbEDpOT_+0x60>
	      return _Res(_M_insert_node(__res.first, __res.second, __z), true);
 80018f0:	6979      	ldr	r1, [r7, #20]
 80018f2:	69ba      	ldr	r2, [r7, #24]
 80018f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018f6:	68b8      	ldr	r0, [r7, #8]
 80018f8:	f000 f980 	bl	8001bfc <_ZNSt8_Rb_treeIiSt4pairIKiN5Delay15delay_details_tEESt10_Select1stIS4_ESt4lessIiESaIS4_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSC_PSt13_Rb_tree_nodeIS4_E>
 80018fc:	4603      	mov	r3, r0
 80018fe:	61fb      	str	r3, [r7, #28]
 8001900:	2301      	movs	r3, #1
 8001902:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8001906:	f107 0223 	add.w	r2, r7, #35	; 0x23
 800190a:	f107 031c 	add.w	r3, r7, #28
 800190e:	4619      	mov	r1, r3
 8001910:	68f8      	ldr	r0, [r7, #12]
 8001912:	f000 f9b0 	bl	8001c76 <_ZNSt4pairISt17_Rb_tree_iteratorIS_IKiN5Delay15delay_details_tEEEbEC1IS5_bLb1EEEOT_OT0_>
	__catch(...)
	  {
	    _M_drop_node(__z);
	    __throw_exception_again;
	  }
      }
 8001916:	e015      	b.n	8001944 <_ZNSt8_Rb_treeIiSt4pairIKiN5Delay15delay_details_tEESt10_Select1stIS4_ESt4lessIiESaIS4_EE17_M_emplace_uniqueIJS0_IiS3_EEEES0_ISt17_Rb_tree_iteratorIS4_EbEDpOT_+0x8c>
	    _M_drop_node(__z);
 8001918:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800191a:	68b8      	ldr	r0, [r7, #8]
 800191c:	f000 f8a2 	bl	8001a64 <_ZNSt8_Rb_treeIiSt4pairIKiN5Delay15delay_details_tEESt10_Select1stIS4_ESt4lessIiESaIS4_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS4_E>
	    return _Res(iterator(__res.first), false);
 8001920:	697a      	ldr	r2, [r7, #20]
 8001922:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001926:	4611      	mov	r1, r2
 8001928:	4618      	mov	r0, r3
 800192a:	f000 f9bd 	bl	8001ca8 <_ZNSt17_Rb_tree_iteratorISt4pairIKiN5Delay15delay_details_tEEEC1EPSt18_Rb_tree_node_base>
 800192e:	2300      	movs	r3, #0
 8001930:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8001934:	f107 022b 	add.w	r2, r7, #43	; 0x2b
 8001938:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800193c:	4619      	mov	r1, r3
 800193e:	68f8      	ldr	r0, [r7, #12]
 8001940:	f000 f999 	bl	8001c76 <_ZNSt4pairISt17_Rb_tree_iteratorIS_IKiN5Delay15delay_details_tEEEbEC1IS5_bLb1EEEOT_OT0_>
      }
 8001944:	68f8      	ldr	r0, [r7, #12]
 8001946:	3730      	adds	r7, #48	; 0x30
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}

0800194c <_ZNSt8_Rb_treeIiSt4pairIKiN5Delay15delay_details_tEESt10_Select1stIS4_ESt4lessIiESaIS4_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 800194c:	b580      	push	{r7, lr}
 800194e:	b084      	sub	sp, #16
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_header._M_left); }
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	68da      	ldr	r2, [r3, #12]
 8001958:	f107 030c 	add.w	r3, r7, #12
 800195c:	4611      	mov	r1, r2
 800195e:	4618      	mov	r0, r3
 8001960:	f000 f9a2 	bl	8001ca8 <_ZNSt17_Rb_tree_iteratorISt4pairIKiN5Delay15delay_details_tEEEC1EPSt18_Rb_tree_node_base>
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	4618      	mov	r0, r3
 8001968:	3710      	adds	r7, #16
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}

0800196e <_ZNSt8_Rb_treeIiSt4pairIKiN5Delay15delay_details_tEESt10_Select1stIS4_ESt4lessIiESaIS4_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 800196e:	b580      	push	{r7, lr}
 8001970:	b084      	sub	sp, #16
 8001972:	af00      	add	r7, sp, #0
 8001974:	6078      	str	r0, [r7, #4]
      { return iterator(&this->_M_impl._M_header); }
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	1d1a      	adds	r2, r3, #4
 800197a:	f107 030c 	add.w	r3, r7, #12
 800197e:	4611      	mov	r1, r2
 8001980:	4618      	mov	r0, r3
 8001982:	f000 f991 	bl	8001ca8 <_ZNSt17_Rb_tree_iteratorISt4pairIKiN5Delay15delay_details_tEEEC1EPSt18_Rb_tree_node_base>
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	4618      	mov	r0, r3
 800198a:	3710      	adds	r7, #16
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}

08001990 <_ZNSt13_Rb_tree_nodeISt4pairIKiN5Delay15delay_details_tEEE9_M_valptrEv>:
      _M_valptr()
 8001990:	b580      	push	{r7, lr}
 8001992:	b082      	sub	sp, #8
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	3310      	adds	r3, #16
 800199c:	4618      	mov	r0, r3
 800199e:	f000 f991 	bl	8001cc4 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKiN5Delay15delay_details_tEEE6_M_ptrEv>
 80019a2:	4603      	mov	r3, r0
 80019a4:	4618      	mov	r0, r3
 80019a6:	3708      	adds	r7, #8
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}

080019ac <_ZNSt8_Rb_treeIiSt4pairIKiN5Delay15delay_details_tEESt10_Select1stIS4_ESt4lessIiESaIS4_EE4findERS1_>:

  template<typename _Key, typename _Val, typename _KeyOfValue,
	   typename _Compare, typename _Alloc>
    typename _Rb_tree<_Key, _Val, _KeyOfValue,
		      _Compare, _Alloc>::iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80019ac:	b590      	push	{r4, r7, lr}
 80019ae:	b085      	sub	sp, #20
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
 80019b4:	6039      	str	r1, [r7, #0]
    find(const _Key& __k)
    {
      iterator __j = _M_lower_bound(_M_begin(), _M_end(), __k);
 80019b6:	6878      	ldr	r0, [r7, #4]
 80019b8:	f7ff ff21 	bl	80017fe <_ZNSt8_Rb_treeIiSt4pairIKiN5Delay15delay_details_tEESt10_Select1stIS4_ESt4lessIiESaIS4_EE8_M_beginEv>
 80019bc:	4604      	mov	r4, r0
 80019be:	6878      	ldr	r0, [r7, #4]
 80019c0:	f000 f98c 	bl	8001cdc <_ZNSt8_Rb_treeIiSt4pairIKiN5Delay15delay_details_tEESt10_Select1stIS4_ESt4lessIiESaIS4_EE6_M_endEv>
 80019c4:	4602      	mov	r2, r0
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	4621      	mov	r1, r4
 80019ca:	6878      	ldr	r0, [r7, #4]
 80019cc:	f000 f991 	bl	8001cf2 <_ZNSt8_Rb_treeIiSt4pairIKiN5Delay15delay_details_tEESt10_Select1stIS4_ESt4lessIiESaIS4_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS4_EPSt18_Rb_tree_node_baseRS1_>
 80019d0:	4603      	mov	r3, r0
 80019d2:	60bb      	str	r3, [r7, #8]
      return (__j == end()
 80019d4:	6878      	ldr	r0, [r7, #4]
 80019d6:	f7ff ffca 	bl	800196e <_ZNSt8_Rb_treeIiSt4pairIKiN5Delay15delay_details_tEESt10_Select1stIS4_ESt4lessIiESaIS4_EE3endEv>
 80019da:	4603      	mov	r3, r0
 80019dc:	60fb      	str	r3, [r7, #12]
 80019de:	f107 020c 	add.w	r2, r7, #12
 80019e2:	f107 0308 	add.w	r3, r7, #8
 80019e6:	4611      	mov	r1, r2
 80019e8:	4618      	mov	r0, r3
 80019ea:	f000 f9b3 	bl	8001d54 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKiN5Delay15delay_details_tEEES7_>
 80019ee:	4603      	mov	r3, r0
	      || _M_impl._M_key_compare(__k,
					_S_key(__j._M_node))) ? end() : __j;
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d10d      	bne.n	8001a10 <_ZNSt8_Rb_treeIiSt4pairIKiN5Delay15delay_details_tEESt10_Select1stIS4_ESt4lessIiESaIS4_EE4findERS1_+0x64>
	      || _M_impl._M_key_compare(__k,
 80019f4:	687c      	ldr	r4, [r7, #4]
					_S_key(__j._M_node))) ? end() : __j;
 80019f6:	68bb      	ldr	r3, [r7, #8]
	      || _M_impl._M_key_compare(__k,
 80019f8:	4618      	mov	r0, r3
 80019fa:	f000 f9be 	bl	8001d7a <_ZNSt8_Rb_treeIiSt4pairIKiN5Delay15delay_details_tEESt10_Select1stIS4_ESt4lessIiESaIS4_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80019fe:	4603      	mov	r3, r0
 8001a00:	461a      	mov	r2, r3
 8001a02:	6839      	ldr	r1, [r7, #0]
 8001a04:	4620      	mov	r0, r4
 8001a06:	f000 f9c4 	bl	8001d92 <_ZNKSt4lessIiEclERKiS2_>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d004      	beq.n	8001a1a <_ZNSt8_Rb_treeIiSt4pairIKiN5Delay15delay_details_tEESt10_Select1stIS4_ESt4lessIiESaIS4_EE4findERS1_+0x6e>
					_S_key(__j._M_node))) ? end() : __j;
 8001a10:	6878      	ldr	r0, [r7, #4]
 8001a12:	f7ff ffac 	bl	800196e <_ZNSt8_Rb_treeIiSt4pairIKiN5Delay15delay_details_tEESt10_Select1stIS4_ESt4lessIiESaIS4_EE3endEv>
 8001a16:	4603      	mov	r3, r0
 8001a18:	e000      	b.n	8001a1c <_ZNSt8_Rb_treeIiSt4pairIKiN5Delay15delay_details_tEESt10_Select1stIS4_ESt4lessIiESaIS4_EE4findERS1_+0x70>
 8001a1a:	68bb      	ldr	r3, [r7, #8]
    }
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	3714      	adds	r7, #20
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd90      	pop	{r4, r7, pc}

08001a24 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKiN5Delay15delay_details_tEEEEC1Ev>:
      // 2103. propagate_on_container_move_assignment
      typedef std::true_type propagate_on_container_move_assignment;
#endif

      _GLIBCXX20_CONSTEXPR
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8001a24:	b480      	push	{r7}
 8001a26:	b083      	sub	sp, #12
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	4618      	mov	r0, r3
 8001a30:	370c      	adds	r7, #12
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bc80      	pop	{r7}
 8001a36:	4770      	bx	lr

08001a38 <_ZNSt8_Rb_treeIiSt4pairIKiN5Delay15delay_details_tEESt10_Select1stIS4_ESt4lessIiESaIS4_EE8_S_rightEPSt18_Rb_tree_node_base>:
      _S_right(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8001a38:	b480      	push	{r7}
 8001a3a:	b083      	sub	sp, #12
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_right); }
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	68db      	ldr	r3, [r3, #12]
 8001a44:	4618      	mov	r0, r3
 8001a46:	370c      	adds	r7, #12
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bc80      	pop	{r7}
 8001a4c:	4770      	bx	lr

08001a4e <_ZNSt8_Rb_treeIiSt4pairIKiN5Delay15delay_details_tEESt10_Select1stIS4_ESt4lessIiESaIS4_EE7_S_leftEPSt18_Rb_tree_node_base>:
      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8001a4e:	b480      	push	{r7}
 8001a50:	b083      	sub	sp, #12
 8001a52:	af00      	add	r7, sp, #0
 8001a54:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_left); }
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	689b      	ldr	r3, [r3, #8]
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	370c      	adds	r7, #12
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bc80      	pop	{r7}
 8001a62:	4770      	bx	lr

08001a64 <_ZNSt8_Rb_treeIiSt4pairIKiN5Delay15delay_details_tEESt10_Select1stIS4_ESt4lessIiESaIS4_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS4_E>:
      _M_drop_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b082      	sub	sp, #8
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
 8001a6c:	6039      	str	r1, [r7, #0]
	_M_destroy_node(__p);
 8001a6e:	6839      	ldr	r1, [r7, #0]
 8001a70:	6878      	ldr	r0, [r7, #4]
 8001a72:	f000 f9a2 	bl	8001dba <_ZNSt8_Rb_treeIiSt4pairIKiN5Delay15delay_details_tEESt10_Select1stIS4_ESt4lessIiESaIS4_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS4_E>
	_M_put_node(__p);
 8001a76:	6839      	ldr	r1, [r7, #0]
 8001a78:	6878      	ldr	r0, [r7, #4]
 8001a7a:	f000 f9b3 	bl	8001de4 <_ZNSt8_Rb_treeIiSt4pairIKiN5Delay15delay_details_tEESt10_Select1stIS4_ESt4lessIiESaIS4_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS4_E>
      }
 8001a7e:	bf00      	nop
 8001a80:	3708      	adds	r7, #8
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}

08001a86 <_ZNK9__gnu_cxx16__aligned_membufIiE6_M_ptrEv>:
      _Tp*
      _M_ptr() noexcept
      { return static_cast<_Tp*>(_M_addr()); }

      const _Tp*
      _M_ptr() const noexcept
 8001a86:	b580      	push	{r7, lr}
 8001a88:	b082      	sub	sp, #8
 8001a8a:	af00      	add	r7, sp, #0
 8001a8c:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Tp*>(_M_addr()); }
 8001a8e:	6878      	ldr	r0, [r7, #4]
 8001a90:	f000 f9ba 	bl	8001e08 <_ZNK9__gnu_cxx16__aligned_membufIiE7_M_addrEv>
 8001a94:	4603      	mov	r3, r0
 8001a96:	4618      	mov	r0, r3
 8001a98:	3708      	adds	r7, #8
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}

08001a9e <_ZNSt8_Rb_treeIiSt4pairIKiN5Delay15delay_details_tEESt10_Select1stIS4_ESt4lessIiESaIS4_EE14_M_create_nodeIJS0_IiS3_EEEEPSt13_Rb_tree_nodeIS4_EDpOT_>:
	_M_create_node(_Args&&... __args)
 8001a9e:	b580      	push	{r7, lr}
 8001aa0:	b084      	sub	sp, #16
 8001aa2:	af00      	add	r7, sp, #0
 8001aa4:	6078      	str	r0, [r7, #4]
 8001aa6:	6039      	str	r1, [r7, #0]
	  _Link_type __tmp = _M_get_node();
 8001aa8:	6878      	ldr	r0, [r7, #4]
 8001aaa:	f000 f9b7 	bl	8001e1c <_ZNSt8_Rb_treeIiSt4pairIKiN5Delay15delay_details_tEESt10_Select1stIS4_ESt4lessIiESaIS4_EE11_M_get_nodeEv>
 8001aae:	60f8      	str	r0, [r7, #12]
	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
 8001ab0:	6838      	ldr	r0, [r7, #0]
 8001ab2:	f7ff fef7 	bl	80018a4 <_ZSt7forwardISt4pairIiN5Delay15delay_details_tEEEOT_RNSt16remove_referenceIS4_E4typeE>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	461a      	mov	r2, r3
 8001aba:	68f9      	ldr	r1, [r7, #12]
 8001abc:	6878      	ldr	r0, [r7, #4]
 8001abe:	f000 f9be 	bl	8001e3e <_ZNSt8_Rb_treeIiSt4pairIKiN5Delay15delay_details_tEESt10_Select1stIS4_ESt4lessIiESaIS4_EE17_M_construct_nodeIJS0_IiS3_EEEEvPSt13_Rb_tree_nodeIS4_EDpOT_>
	  return __tmp;
 8001ac2:	68fb      	ldr	r3, [r7, #12]
	}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	3710      	adds	r7, #16
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd80      	pop	{r7, pc}

08001acc <_ZNSt8_Rb_treeIiSt4pairIKiN5Delay15delay_details_tEESt10_Select1stIS4_ESt4lessIiESaIS4_EE24_M_get_insert_unique_posERS1_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8001acc:	b590      	push	{r4, r7, lr}
 8001ace:	b08b      	sub	sp, #44	; 0x2c
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	60f8      	str	r0, [r7, #12]
 8001ad4:	60b9      	str	r1, [r7, #8]
 8001ad6:	607a      	str	r2, [r7, #4]
      _Link_type __x = _M_begin();
 8001ad8:	68b8      	ldr	r0, [r7, #8]
 8001ada:	f7ff fe90 	bl	80017fe <_ZNSt8_Rb_treeIiSt4pairIKiN5Delay15delay_details_tEESt10_Select1stIS4_ESt4lessIiESaIS4_EE8_M_beginEv>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	61bb      	str	r3, [r7, #24]
      _Base_ptr __y = _M_end();
 8001ae2:	68b8      	ldr	r0, [r7, #8]
 8001ae4:	f000 f8fa 	bl	8001cdc <_ZNSt8_Rb_treeIiSt4pairIKiN5Delay15delay_details_tEESt10_Select1stIS4_ESt4lessIiESaIS4_EE6_M_endEv>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	617b      	str	r3, [r7, #20]
      bool __comp = true;
 8001aec:	2301      	movs	r3, #1
 8001aee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      while (__x != 0)
 8001af2:	69bb      	ldr	r3, [r7, #24]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d020      	beq.n	8001b3a <_ZNSt8_Rb_treeIiSt4pairIKiN5Delay15delay_details_tEESt10_Select1stIS4_ESt4lessIiESaIS4_EE24_M_get_insert_unique_posERS1_+0x6e>
	  __y = __x;
 8001af8:	69bb      	ldr	r3, [r7, #24]
 8001afa:	617b      	str	r3, [r7, #20]
	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
 8001afc:	68bc      	ldr	r4, [r7, #8]
 8001afe:	69bb      	ldr	r3, [r7, #24]
 8001b00:	4618      	mov	r0, r3
 8001b02:	f000 f868 	bl	8001bd6 <_ZNSt8_Rb_treeIiSt4pairIKiN5Delay15delay_details_tEESt10_Select1stIS4_ESt4lessIiESaIS4_EE6_S_keyEPKSt13_Rb_tree_nodeIS4_E>
 8001b06:	4603      	mov	r3, r0
 8001b08:	461a      	mov	r2, r3
 8001b0a:	6879      	ldr	r1, [r7, #4]
 8001b0c:	4620      	mov	r0, r4
 8001b0e:	f000 f940 	bl	8001d92 <_ZNKSt4lessIiEclERKiS2_>
 8001b12:	4603      	mov	r3, r0
 8001b14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  __x = __comp ? _S_left(__x) : _S_right(__x);
 8001b18:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d005      	beq.n	8001b2c <_ZNSt8_Rb_treeIiSt4pairIKiN5Delay15delay_details_tEESt10_Select1stIS4_ESt4lessIiESaIS4_EE24_M_get_insert_unique_posERS1_+0x60>
 8001b20:	69bb      	ldr	r3, [r7, #24]
 8001b22:	4618      	mov	r0, r3
 8001b24:	f7ff ff93 	bl	8001a4e <_ZNSt8_Rb_treeIiSt4pairIKiN5Delay15delay_details_tEESt10_Select1stIS4_ESt4lessIiESaIS4_EE7_S_leftEPSt18_Rb_tree_node_base>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	e004      	b.n	8001b36 <_ZNSt8_Rb_treeIiSt4pairIKiN5Delay15delay_details_tEESt10_Select1stIS4_ESt4lessIiESaIS4_EE24_M_get_insert_unique_posERS1_+0x6a>
 8001b2c:	69bb      	ldr	r3, [r7, #24]
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f7ff ff82 	bl	8001a38 <_ZNSt8_Rb_treeIiSt4pairIKiN5Delay15delay_details_tEESt10_Select1stIS4_ESt4lessIiESaIS4_EE8_S_rightEPSt18_Rb_tree_node_base>
 8001b34:	4603      	mov	r3, r0
 8001b36:	61bb      	str	r3, [r7, #24]
      while (__x != 0)
 8001b38:	e7db      	b.n	8001af2 <_ZNSt8_Rb_treeIiSt4pairIKiN5Delay15delay_details_tEESt10_Select1stIS4_ESt4lessIiESaIS4_EE24_M_get_insert_unique_posERS1_+0x26>
      iterator __j = iterator(__y);
 8001b3a:	697a      	ldr	r2, [r7, #20]
 8001b3c:	f107 0310 	add.w	r3, r7, #16
 8001b40:	4611      	mov	r1, r2
 8001b42:	4618      	mov	r0, r3
 8001b44:	f000 f8b0 	bl	8001ca8 <_ZNSt17_Rb_tree_iteratorISt4pairIKiN5Delay15delay_details_tEEEC1EPSt18_Rb_tree_node_base>
      if (__comp)
 8001b48:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d01d      	beq.n	8001b8c <_ZNSt8_Rb_treeIiSt4pairIKiN5Delay15delay_details_tEESt10_Select1stIS4_ESt4lessIiESaIS4_EE24_M_get_insert_unique_posERS1_+0xc0>
	  if (__j == begin())
 8001b50:	68b8      	ldr	r0, [r7, #8]
 8001b52:	f7ff fefb 	bl	800194c <_ZNSt8_Rb_treeIiSt4pairIKiN5Delay15delay_details_tEESt10_Select1stIS4_ESt4lessIiESaIS4_EE5beginEv>
 8001b56:	4603      	mov	r3, r0
 8001b58:	61fb      	str	r3, [r7, #28]
 8001b5a:	f107 021c 	add.w	r2, r7, #28
 8001b5e:	f107 0310 	add.w	r3, r7, #16
 8001b62:	4611      	mov	r1, r2
 8001b64:	4618      	mov	r0, r3
 8001b66:	f000 f8f5 	bl	8001d54 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKiN5Delay15delay_details_tEEES7_>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d008      	beq.n	8001b82 <_ZNSt8_Rb_treeIiSt4pairIKiN5Delay15delay_details_tEESt10_Select1stIS4_ESt4lessIiESaIS4_EE24_M_get_insert_unique_posERS1_+0xb6>
	    return _Res(__x, __y);
 8001b70:	f107 0214 	add.w	r2, r7, #20
 8001b74:	f107 0318 	add.w	r3, r7, #24
 8001b78:	4619      	mov	r1, r3
 8001b7a:	68f8      	ldr	r0, [r7, #12]
 8001b7c:	f000 f97f 	bl	8001e7e <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKiN5Delay15delay_details_tEEERS1_Lb1EEEOT_OT0_>
 8001b80:	e025      	b.n	8001bce <_ZNSt8_Rb_treeIiSt4pairIKiN5Delay15delay_details_tEESt10_Select1stIS4_ESt4lessIiESaIS4_EE24_M_get_insert_unique_posERS1_+0x102>
	    --__j;
 8001b82:	f107 0310 	add.w	r3, r7, #16
 8001b86:	4618      	mov	r0, r3
 8001b88:	f000 f992 	bl	8001eb0 <_ZNSt17_Rb_tree_iteratorISt4pairIKiN5Delay15delay_details_tEEEmmEv>
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
 8001b8c:	68bc      	ldr	r4, [r7, #8]
 8001b8e:	693b      	ldr	r3, [r7, #16]
 8001b90:	4618      	mov	r0, r3
 8001b92:	f000 f8f2 	bl	8001d7a <_ZNSt8_Rb_treeIiSt4pairIKiN5Delay15delay_details_tEESt10_Select1stIS4_ESt4lessIiESaIS4_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8001b96:	4603      	mov	r3, r0
 8001b98:	687a      	ldr	r2, [r7, #4]
 8001b9a:	4619      	mov	r1, r3
 8001b9c:	4620      	mov	r0, r4
 8001b9e:	f000 f8f8 	bl	8001d92 <_ZNKSt4lessIiEclERKiS2_>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d008      	beq.n	8001bba <_ZNSt8_Rb_treeIiSt4pairIKiN5Delay15delay_details_tEESt10_Select1stIS4_ESt4lessIiESaIS4_EE24_M_get_insert_unique_posERS1_+0xee>
	return _Res(__x, __y);
 8001ba8:	f107 0214 	add.w	r2, r7, #20
 8001bac:	f107 0318 	add.w	r3, r7, #24
 8001bb0:	4619      	mov	r1, r3
 8001bb2:	68f8      	ldr	r0, [r7, #12]
 8001bb4:	f000 f963 	bl	8001e7e <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKiN5Delay15delay_details_tEEERS1_Lb1EEEOT_OT0_>
 8001bb8:	e009      	b.n	8001bce <_ZNSt8_Rb_treeIiSt4pairIKiN5Delay15delay_details_tEESt10_Select1stIS4_ESt4lessIiESaIS4_EE24_M_get_insert_unique_posERS1_+0x102>
      return _Res(__j._M_node, 0);
 8001bba:	2300      	movs	r3, #0
 8001bbc:	623b      	str	r3, [r7, #32]
 8001bbe:	f107 0220 	add.w	r2, r7, #32
 8001bc2:	f107 0310 	add.w	r3, r7, #16
 8001bc6:	4619      	mov	r1, r3
 8001bc8:	68f8      	ldr	r0, [r7, #12]
 8001bca:	f000 f982 	bl	8001ed2 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 8001bce:	68f8      	ldr	r0, [r7, #12]
 8001bd0:	372c      	adds	r7, #44	; 0x2c
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd90      	pop	{r4, r7, pc}

08001bd6 <_ZNSt8_Rb_treeIiSt4pairIKiN5Delay15delay_details_tEESt10_Select1stIS4_ESt4lessIiESaIS4_EE6_S_keyEPKSt13_Rb_tree_nodeIS4_E>:
      _S_key(_Const_Link_type __x)
 8001bd6:	b580      	push	{r7, lr}
 8001bd8:	b084      	sub	sp, #16
 8001bda:	af00      	add	r7, sp, #0
 8001bdc:	6078      	str	r0, [r7, #4]
	return _KeyOfValue()(*__x->_M_valptr());
 8001bde:	6878      	ldr	r0, [r7, #4]
 8001be0:	f000 f98d 	bl	8001efe <_ZNKSt13_Rb_tree_nodeISt4pairIKiN5Delay15delay_details_tEEE9_M_valptrEv>
 8001be4:	4602      	mov	r2, r0
 8001be6:	f107 030c 	add.w	r3, r7, #12
 8001bea:	4611      	mov	r1, r2
 8001bec:	4618      	mov	r0, r3
 8001bee:	f000 f994 	bl	8001f1a <_ZNKSt10_Select1stISt4pairIKiN5Delay15delay_details_tEEEclERKS4_>
 8001bf2:	4603      	mov	r3, r0
      }
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	3710      	adds	r7, #16
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bd80      	pop	{r7, pc}

08001bfc <_ZNSt8_Rb_treeIiSt4pairIKiN5Delay15delay_details_tEESt10_Select1stIS4_ESt4lessIiESaIS4_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSC_PSt13_Rb_tree_nodeIS4_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8001bfc:	b5b0      	push	{r4, r5, r7, lr}
 8001bfe:	b086      	sub	sp, #24
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	60f8      	str	r0, [r7, #12]
 8001c04:	60b9      	str	r1, [r7, #8]
 8001c06:	607a      	str	r2, [r7, #4]
 8001c08:	603b      	str	r3, [r7, #0]
			    || _M_impl._M_key_compare(_S_key(__z),
 8001c0a:	68bb      	ldr	r3, [r7, #8]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d117      	bne.n	8001c40 <_ZNSt8_Rb_treeIiSt4pairIKiN5Delay15delay_details_tEESt10_Select1stIS4_ESt4lessIiESaIS4_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSC_PSt13_Rb_tree_nodeIS4_E+0x44>
      bool __insert_left = (__x != 0 || __p == _M_end()
 8001c10:	68f8      	ldr	r0, [r7, #12]
 8001c12:	f000 f863 	bl	8001cdc <_ZNSt8_Rb_treeIiSt4pairIKiN5Delay15delay_details_tEESt10_Select1stIS4_ESt4lessIiESaIS4_EE6_M_endEv>
 8001c16:	4602      	mov	r2, r0
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d010      	beq.n	8001c40 <_ZNSt8_Rb_treeIiSt4pairIKiN5Delay15delay_details_tEESt10_Select1stIS4_ESt4lessIiESaIS4_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSC_PSt13_Rb_tree_nodeIS4_E+0x44>
			    || _M_impl._M_key_compare(_S_key(__z),
 8001c1e:	68fc      	ldr	r4, [r7, #12]
 8001c20:	6838      	ldr	r0, [r7, #0]
 8001c22:	f7ff ffd8 	bl	8001bd6 <_ZNSt8_Rb_treeIiSt4pairIKiN5Delay15delay_details_tEESt10_Select1stIS4_ESt4lessIiESaIS4_EE6_S_keyEPKSt13_Rb_tree_nodeIS4_E>
 8001c26:	4605      	mov	r5, r0
 8001c28:	6878      	ldr	r0, [r7, #4]
 8001c2a:	f000 f8a6 	bl	8001d7a <_ZNSt8_Rb_treeIiSt4pairIKiN5Delay15delay_details_tEESt10_Select1stIS4_ESt4lessIiESaIS4_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	461a      	mov	r2, r3
 8001c32:	4629      	mov	r1, r5
 8001c34:	4620      	mov	r0, r4
 8001c36:	f000 f8ac 	bl	8001d92 <_ZNKSt4lessIiEclERKiS2_>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d001      	beq.n	8001c44 <_ZNSt8_Rb_treeIiSt4pairIKiN5Delay15delay_details_tEESt10_Select1stIS4_ESt4lessIiESaIS4_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSC_PSt13_Rb_tree_nodeIS4_E+0x48>
 8001c40:	2301      	movs	r3, #1
 8001c42:	e000      	b.n	8001c46 <_ZNSt8_Rb_treeIiSt4pairIKiN5Delay15delay_details_tEESt10_Select1stIS4_ESt4lessIiESaIS4_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSC_PSt13_Rb_tree_nodeIS4_E+0x4a>
 8001c44:	2300      	movs	r3, #0
      bool __insert_left = (__x != 0 || __p == _M_end()
 8001c46:	75fb      	strb	r3, [r7, #23]
				    this->_M_impl._M_header);
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	3304      	adds	r3, #4
      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
 8001c4c:	7df8      	ldrb	r0, [r7, #23]
 8001c4e:	687a      	ldr	r2, [r7, #4]
 8001c50:	6839      	ldr	r1, [r7, #0]
 8001c52:	f001 fced 	bl	8003630 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
      ++_M_impl._M_node_count;
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	695b      	ldr	r3, [r3, #20]
 8001c5a:	1c5a      	adds	r2, r3, #1
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	615a      	str	r2, [r3, #20]
      return iterator(__z);
 8001c60:	f107 0310 	add.w	r3, r7, #16
 8001c64:	6839      	ldr	r1, [r7, #0]
 8001c66:	4618      	mov	r0, r3
 8001c68:	f000 f81e 	bl	8001ca8 <_ZNSt17_Rb_tree_iteratorISt4pairIKiN5Delay15delay_details_tEEEC1EPSt18_Rb_tree_node_base>
 8001c6c:	693b      	ldr	r3, [r7, #16]
    }
 8001c6e:	4618      	mov	r0, r3
 8001c70:	3718      	adds	r7, #24
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bdb0      	pop	{r4, r5, r7, pc}

08001c76 <_ZNSt4pairISt17_Rb_tree_iteratorIS_IKiN5Delay15delay_details_tEEEbEC1IS5_bLb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 8001c76:	b580      	push	{r7, lr}
 8001c78:	b084      	sub	sp, #16
 8001c7a:	af00      	add	r7, sp, #0
 8001c7c:	60f8      	str	r0, [r7, #12]
 8001c7e:	60b9      	str	r1, [r7, #8]
 8001c80:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 8001c82:	68b8      	ldr	r0, [r7, #8]
 8001c84:	f000 f954 	bl	8001f30 <_ZSt7forwardISt17_Rb_tree_iteratorISt4pairIKiN5Delay15delay_details_tEEEEOT_RNSt16remove_referenceIS7_E4typeE>
 8001c88:	4602      	mov	r2, r0
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	6812      	ldr	r2, [r2, #0]
 8001c8e:	601a      	str	r2, [r3, #0]
 8001c90:	6878      	ldr	r0, [r7, #4]
 8001c92:	f000 f957 	bl	8001f44 <_ZSt7forwardIbEOT_RNSt16remove_referenceIS0_E4typeE>
 8001c96:	4603      	mov	r3, r0
 8001c98:	781a      	ldrb	r2, [r3, #0]
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	711a      	strb	r2, [r3, #4]
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	3710      	adds	r7, #16
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd80      	pop	{r7, pc}

08001ca8 <_ZNSt17_Rb_tree_iteratorISt4pairIKiN5Delay15delay_details_tEEEC1EPSt18_Rb_tree_node_base>:
      _Rb_tree_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8001ca8:	b480      	push	{r7}
 8001caa:	b083      	sub	sp, #12
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
 8001cb0:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	683a      	ldr	r2, [r7, #0]
 8001cb6:	601a      	str	r2, [r3, #0]
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	4618      	mov	r0, r3
 8001cbc:	370c      	adds	r7, #12
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bc80      	pop	{r7}
 8001cc2:	4770      	bx	lr

08001cc4 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKiN5Delay15delay_details_tEEE6_M_ptrEv>:
      _M_ptr() noexcept
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b082      	sub	sp, #8
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 8001ccc:	6878      	ldr	r0, [r7, #4]
 8001cce:	f000 f943 	bl	8001f58 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKiN5Delay15delay_details_tEEE7_M_addrEv>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	3708      	adds	r7, #8
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}

08001cdc <_ZNSt8_Rb_treeIiSt4pairIKiN5Delay15delay_details_tEESt10_Select1stIS4_ESt4lessIiESaIS4_EE6_M_endEv>:
      _M_end() _GLIBCXX_NOEXCEPT
 8001cdc:	b480      	push	{r7}
 8001cde:	b083      	sub	sp, #12
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	3304      	adds	r3, #4
 8001ce8:	4618      	mov	r0, r3
 8001cea:	370c      	adds	r7, #12
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bc80      	pop	{r7}
 8001cf0:	4770      	bx	lr

08001cf2 <_ZNSt8_Rb_treeIiSt4pairIKiN5Delay15delay_details_tEESt10_Select1stIS4_ESt4lessIiESaIS4_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS4_EPSt18_Rb_tree_node_baseRS1_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8001cf2:	b590      	push	{r4, r7, lr}
 8001cf4:	b087      	sub	sp, #28
 8001cf6:	af00      	add	r7, sp, #0
 8001cf8:	60f8      	str	r0, [r7, #12]
 8001cfa:	60b9      	str	r1, [r7, #8]
 8001cfc:	607a      	str	r2, [r7, #4]
 8001cfe:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 8001d00:	68bb      	ldr	r3, [r7, #8]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d01b      	beq.n	8001d3e <_ZNSt8_Rb_treeIiSt4pairIKiN5Delay15delay_details_tEESt10_Select1stIS4_ESt4lessIiESaIS4_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS4_EPSt18_Rb_tree_node_baseRS1_+0x4c>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 8001d06:	68fc      	ldr	r4, [r7, #12]
 8001d08:	68b8      	ldr	r0, [r7, #8]
 8001d0a:	f7ff ff64 	bl	8001bd6 <_ZNSt8_Rb_treeIiSt4pairIKiN5Delay15delay_details_tEESt10_Select1stIS4_ESt4lessIiESaIS4_EE6_S_keyEPKSt13_Rb_tree_nodeIS4_E>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	683a      	ldr	r2, [r7, #0]
 8001d12:	4619      	mov	r1, r3
 8001d14:	4620      	mov	r0, r4
 8001d16:	f000 f83c 	bl	8001d92 <_ZNKSt4lessIiEclERKiS2_>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	f083 0301 	eor.w	r3, r3, #1
 8001d20:	b2db      	uxtb	r3, r3
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d006      	beq.n	8001d34 <_ZNSt8_Rb_treeIiSt4pairIKiN5Delay15delay_details_tEESt10_Select1stIS4_ESt4lessIiESaIS4_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS4_EPSt18_Rb_tree_node_baseRS1_+0x42>
	  __y = __x, __x = _S_left(__x);
 8001d26:	68bb      	ldr	r3, [r7, #8]
 8001d28:	607b      	str	r3, [r7, #4]
 8001d2a:	68b8      	ldr	r0, [r7, #8]
 8001d2c:	f7ff fe8f 	bl	8001a4e <_ZNSt8_Rb_treeIiSt4pairIKiN5Delay15delay_details_tEESt10_Select1stIS4_ESt4lessIiESaIS4_EE7_S_leftEPSt18_Rb_tree_node_base>
 8001d30:	60b8      	str	r0, [r7, #8]
 8001d32:	e7e5      	b.n	8001d00 <_ZNSt8_Rb_treeIiSt4pairIKiN5Delay15delay_details_tEESt10_Select1stIS4_ESt4lessIiESaIS4_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS4_EPSt18_Rb_tree_node_baseRS1_+0xe>
	  __x = _S_right(__x);
 8001d34:	68b8      	ldr	r0, [r7, #8]
 8001d36:	f7ff fe7f 	bl	8001a38 <_ZNSt8_Rb_treeIiSt4pairIKiN5Delay15delay_details_tEESt10_Select1stIS4_ESt4lessIiESaIS4_EE8_S_rightEPSt18_Rb_tree_node_base>
 8001d3a:	60b8      	str	r0, [r7, #8]
      while (__x != 0)
 8001d3c:	e7e0      	b.n	8001d00 <_ZNSt8_Rb_treeIiSt4pairIKiN5Delay15delay_details_tEESt10_Select1stIS4_ESt4lessIiESaIS4_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS4_EPSt18_Rb_tree_node_baseRS1_+0xe>
      return iterator(__y);
 8001d3e:	f107 0314 	add.w	r3, r7, #20
 8001d42:	6879      	ldr	r1, [r7, #4]
 8001d44:	4618      	mov	r0, r3
 8001d46:	f7ff ffaf 	bl	8001ca8 <_ZNSt17_Rb_tree_iteratorISt4pairIKiN5Delay15delay_details_tEEEC1EPSt18_Rb_tree_node_base>
 8001d4a:	697b      	ldr	r3, [r7, #20]
    }
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	371c      	adds	r7, #28
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd90      	pop	{r4, r7, pc}

08001d54 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKiN5Delay15delay_details_tEEES7_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8001d54:	b480      	push	{r7}
 8001d56:	b083      	sub	sp, #12
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
 8001d5c:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681a      	ldr	r2, [r3, #0]
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	429a      	cmp	r2, r3
 8001d68:	bf0c      	ite	eq
 8001d6a:	2301      	moveq	r3, #1
 8001d6c:	2300      	movne	r3, #0
 8001d6e:	b2db      	uxtb	r3, r3
 8001d70:	4618      	mov	r0, r3
 8001d72:	370c      	adds	r7, #12
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bc80      	pop	{r7}
 8001d78:	4770      	bx	lr

08001d7a <_ZNSt8_Rb_treeIiSt4pairIKiN5Delay15delay_details_tEESt10_Select1stIS4_ESt4lessIiESaIS4_EE6_S_keyEPKSt18_Rb_tree_node_base>:
      _S_key(_Const_Base_ptr __x)
 8001d7a:	b580      	push	{r7, lr}
 8001d7c:	b082      	sub	sp, #8
 8001d7e:	af00      	add	r7, sp, #0
 8001d80:	6078      	str	r0, [r7, #4]
      { return _S_key(static_cast<_Const_Link_type>(__x)); }
 8001d82:	6878      	ldr	r0, [r7, #4]
 8001d84:	f7ff ff27 	bl	8001bd6 <_ZNSt8_Rb_treeIiSt4pairIKiN5Delay15delay_details_tEESt10_Select1stIS4_ESt4lessIiESaIS4_EE6_S_keyEPKSt13_Rb_tree_nodeIS4_E>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	3708      	adds	r7, #8
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}

08001d92 <_ZNKSt4lessIiEclERKiS2_>:
  template<typename _Tp>
    struct less : public binary_function<_Tp, _Tp, bool>
    {
      _GLIBCXX14_CONSTEXPR
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
 8001d92:	b480      	push	{r7}
 8001d94:	b085      	sub	sp, #20
 8001d96:	af00      	add	r7, sp, #0
 8001d98:	60f8      	str	r0, [r7, #12]
 8001d9a:	60b9      	str	r1, [r7, #8]
 8001d9c:	607a      	str	r2, [r7, #4]
      { return __x < __y; }
 8001d9e:	68bb      	ldr	r3, [r7, #8]
 8001da0:	681a      	ldr	r2, [r3, #0]
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	429a      	cmp	r2, r3
 8001da8:	bfb4      	ite	lt
 8001daa:	2301      	movlt	r3, #1
 8001dac:	2300      	movge	r3, #0
 8001dae:	b2db      	uxtb	r3, r3
 8001db0:	4618      	mov	r0, r3
 8001db2:	3714      	adds	r7, #20
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bc80      	pop	{r7}
 8001db8:	4770      	bx	lr

08001dba <_ZNSt8_Rb_treeIiSt4pairIKiN5Delay15delay_details_tEESt10_Select1stIS4_ESt4lessIiESaIS4_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS4_E>:
      _M_destroy_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8001dba:	b590      	push	{r4, r7, lr}
 8001dbc:	b083      	sub	sp, #12
 8001dbe:	af00      	add	r7, sp, #0
 8001dc0:	6078      	str	r0, [r7, #4]
 8001dc2:	6039      	str	r1, [r7, #0]
	_Alloc_traits::destroy(_M_get_Node_allocator(), __p->_M_valptr());
 8001dc4:	6878      	ldr	r0, [r7, #4]
 8001dc6:	f000 f8d1 	bl	8001f6c <_ZNSt8_Rb_treeIiSt4pairIKiN5Delay15delay_details_tEESt10_Select1stIS4_ESt4lessIiESaIS4_EE21_M_get_Node_allocatorEv>
 8001dca:	4604      	mov	r4, r0
 8001dcc:	6838      	ldr	r0, [r7, #0]
 8001dce:	f7ff fddf 	bl	8001990 <_ZNSt13_Rb_tree_nodeISt4pairIKiN5Delay15delay_details_tEEE9_M_valptrEv>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	4619      	mov	r1, r3
 8001dd6:	4620      	mov	r0, r4
 8001dd8:	f000 f8d2 	bl	8001f80 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKiN5Delay15delay_details_tEEEEE7destroyIS5_EEvRS7_PT_>
      }
 8001ddc:	bf00      	nop
 8001dde:	370c      	adds	r7, #12
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd90      	pop	{r4, r7, pc}

08001de4 <_ZNSt8_Rb_treeIiSt4pairIKiN5Delay15delay_details_tEESt10_Select1stIS4_ESt4lessIiESaIS4_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS4_E>:
      _M_put_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b082      	sub	sp, #8
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
 8001dec:	6039      	str	r1, [r7, #0]
      { _Alloc_traits::deallocate(_M_get_Node_allocator(), __p, 1); }
 8001dee:	6878      	ldr	r0, [r7, #4]
 8001df0:	f000 f8bc 	bl	8001f6c <_ZNSt8_Rb_treeIiSt4pairIKiN5Delay15delay_details_tEESt10_Select1stIS4_ESt4lessIiESaIS4_EE21_M_get_Node_allocatorEv>
 8001df4:	4603      	mov	r3, r0
 8001df6:	2201      	movs	r2, #1
 8001df8:	6839      	ldr	r1, [r7, #0]
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f000 f8cd 	bl	8001f9a <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKiN5Delay15delay_details_tEEEEE10deallocateERS7_PS6_j>
 8001e00:	bf00      	nop
 8001e02:	3708      	adds	r7, #8
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd80      	pop	{r7, pc}

08001e08 <_ZNK9__gnu_cxx16__aligned_membufIiE7_M_addrEv>:
      _M_addr() const noexcept
 8001e08:	b480      	push	{r7}
 8001e0a:	b083      	sub	sp, #12
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
      { return static_cast<const void*>(&_M_storage); }
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	4618      	mov	r0, r3
 8001e14:	370c      	adds	r7, #12
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bc80      	pop	{r7}
 8001e1a:	4770      	bx	lr

08001e1c <_ZNSt8_Rb_treeIiSt4pairIKiN5Delay15delay_details_tEESt10_Select1stIS4_ESt4lessIiESaIS4_EE11_M_get_nodeEv>:
      _M_get_node()
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b082      	sub	sp, #8
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::allocate(_M_get_Node_allocator(), 1); }
 8001e24:	6878      	ldr	r0, [r7, #4]
 8001e26:	f000 f8a1 	bl	8001f6c <_ZNSt8_Rb_treeIiSt4pairIKiN5Delay15delay_details_tEESt10_Select1stIS4_ESt4lessIiESaIS4_EE21_M_get_Node_allocatorEv>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	2101      	movs	r1, #1
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f000 f8c2 	bl	8001fb8 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKiN5Delay15delay_details_tEEEEE8allocateERS7_j>
 8001e34:	4603      	mov	r3, r0
 8001e36:	4618      	mov	r0, r3
 8001e38:	3708      	adds	r7, #8
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}

08001e3e <_ZNSt8_Rb_treeIiSt4pairIKiN5Delay15delay_details_tEESt10_Select1stIS4_ESt4lessIiESaIS4_EE17_M_construct_nodeIJS0_IiS3_EEEEvPSt13_Rb_tree_nodeIS4_EDpOT_>:
	_M_construct_node(_Link_type __node, _Args&&... __args)
 8001e3e:	b5b0      	push	{r4, r5, r7, lr}
 8001e40:	b084      	sub	sp, #16
 8001e42:	af00      	add	r7, sp, #0
 8001e44:	60f8      	str	r0, [r7, #12]
 8001e46:	60b9      	str	r1, [r7, #8]
 8001e48:	607a      	str	r2, [r7, #4]
	      ::new(__node) _Rb_tree_node<_Val>;
 8001e4a:	68bb      	ldr	r3, [r7, #8]
 8001e4c:	4619      	mov	r1, r3
 8001e4e:	2020      	movs	r0, #32
 8001e50:	f7ff fa94 	bl	800137c <_ZnwjPv>
	      _Alloc_traits::construct(_M_get_Node_allocator(),
 8001e54:	68f8      	ldr	r0, [r7, #12]
 8001e56:	f000 f889 	bl	8001f6c <_ZNSt8_Rb_treeIiSt4pairIKiN5Delay15delay_details_tEESt10_Select1stIS4_ESt4lessIiESaIS4_EE21_M_get_Node_allocatorEv>
 8001e5a:	4604      	mov	r4, r0
 8001e5c:	68b8      	ldr	r0, [r7, #8]
 8001e5e:	f7ff fd97 	bl	8001990 <_ZNSt13_Rb_tree_nodeISt4pairIKiN5Delay15delay_details_tEEE9_M_valptrEv>
 8001e62:	4605      	mov	r5, r0
 8001e64:	6878      	ldr	r0, [r7, #4]
 8001e66:	f7ff fd1d 	bl	80018a4 <_ZSt7forwardISt4pairIiN5Delay15delay_details_tEEEOT_RNSt16remove_referenceIS4_E4typeE>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	461a      	mov	r2, r3
 8001e6e:	4629      	mov	r1, r5
 8001e70:	4620      	mov	r0, r4
 8001e72:	f000 f8b0 	bl	8001fd6 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKiN5Delay15delay_details_tEEEEE9constructIS5_JS1_IiS4_EEEEvRS7_PT_DpOT0_>
	}
 8001e76:	bf00      	nop
 8001e78:	3710      	adds	r7, #16
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bdb0      	pop	{r4, r5, r7, pc}

08001e7e <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKiN5Delay15delay_details_tEEERS1_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 8001e7e:	b580      	push	{r7, lr}
 8001e80:	b084      	sub	sp, #16
 8001e82:	af00      	add	r7, sp, #0
 8001e84:	60f8      	str	r0, [r7, #12]
 8001e86:	60b9      	str	r1, [r7, #8]
 8001e88:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 8001e8a:	68b8      	ldr	r0, [r7, #8]
 8001e8c:	f000 f8b6 	bl	8001ffc <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKiN5Delay15delay_details_tEEEEOT_RNSt16remove_referenceIS9_E4typeE>
 8001e90:	4603      	mov	r3, r0
 8001e92:	681a      	ldr	r2, [r3, #0]
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	601a      	str	r2, [r3, #0]
 8001e98:	6878      	ldr	r0, [r7, #4]
 8001e9a:	f000 f8b9 	bl	8002010 <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	681a      	ldr	r2, [r3, #0]
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	605a      	str	r2, [r3, #4]
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	3710      	adds	r7, #16
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bd80      	pop	{r7, pc}

08001eb0 <_ZNSt17_Rb_tree_iteratorISt4pairIKiN5Delay15delay_details_tEEEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b082      	sub	sp, #8
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_decrement(_M_node);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f001 fbb5 	bl	800362c <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
 8001ec2:	4602      	mov	r2, r0
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	601a      	str	r2, [r3, #0]
	return *this;
 8001ec8:	687b      	ldr	r3, [r7, #4]
      }
 8001eca:	4618      	mov	r0, r3
 8001ecc:	3708      	adds	r7, #8
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}

08001ed2 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>:
       constexpr pair(_U1&& __x, const _T2& __y)
 8001ed2:	b580      	push	{r7, lr}
 8001ed4:	b084      	sub	sp, #16
 8001ed6:	af00      	add	r7, sp, #0
 8001ed8:	60f8      	str	r0, [r7, #12]
 8001eda:	60b9      	str	r1, [r7, #8]
 8001edc:	607a      	str	r2, [r7, #4]
       : first(std::forward<_U1>(__x)), second(__y) { }
 8001ede:	68b8      	ldr	r0, [r7, #8]
 8001ee0:	f000 f896 	bl	8002010 <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	681a      	ldr	r2, [r3, #0]
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	601a      	str	r2, [r3, #0]
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681a      	ldr	r2, [r3, #0]
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	605a      	str	r2, [r3, #4]
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	3710      	adds	r7, #16
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}

08001efe <_ZNKSt13_Rb_tree_nodeISt4pairIKiN5Delay15delay_details_tEEE9_M_valptrEv>:
      _M_valptr() const
 8001efe:	b580      	push	{r7, lr}
 8001f00:	b082      	sub	sp, #8
 8001f02:	af00      	add	r7, sp, #0
 8001f04:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	3310      	adds	r3, #16
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f000 f88a 	bl	8002024 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKiN5Delay15delay_details_tEEE6_M_ptrEv>
 8001f10:	4603      	mov	r3, r0
 8001f12:	4618      	mov	r0, r3
 8001f14:	3708      	adds	r7, #8
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}

08001f1a <_ZNKSt10_Select1stISt4pairIKiN5Delay15delay_details_tEEEclERKS4_>:
      typename _Pair::first_type&
      operator()(_Pair& __x) const
      { return __x.first; }

      const typename _Pair::first_type&
      operator()(const _Pair& __x) const
 8001f1a:	b480      	push	{r7}
 8001f1c:	b083      	sub	sp, #12
 8001f1e:	af00      	add	r7, sp, #0
 8001f20:	6078      	str	r0, [r7, #4]
 8001f22:	6039      	str	r1, [r7, #0]
      { return __x.first; }
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	4618      	mov	r0, r3
 8001f28:	370c      	adds	r7, #12
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bc80      	pop	{r7}
 8001f2e:	4770      	bx	lr

08001f30 <_ZSt7forwardISt17_Rb_tree_iteratorISt4pairIKiN5Delay15delay_details_tEEEEOT_RNSt16remove_referenceIS7_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8001f30:	b480      	push	{r7}
 8001f32:	b083      	sub	sp, #12
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	370c      	adds	r7, #12
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bc80      	pop	{r7}
 8001f42:	4770      	bx	lr

08001f44 <_ZSt7forwardIbEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8001f44:	b480      	push	{r7}
 8001f46:	b083      	sub	sp, #12
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	4618      	mov	r0, r3
 8001f50:	370c      	adds	r7, #12
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bc80      	pop	{r7}
 8001f56:	4770      	bx	lr

08001f58 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKiN5Delay15delay_details_tEEE7_M_addrEv>:
      _M_addr() noexcept
 8001f58:	b480      	push	{r7}
 8001f5a:	b083      	sub	sp, #12
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	4618      	mov	r0, r3
 8001f64:	370c      	adds	r7, #12
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bc80      	pop	{r7}
 8001f6a:	4770      	bx	lr

08001f6c <_ZNSt8_Rb_treeIiSt4pairIKiN5Delay15delay_details_tEESt10_Select1stIS4_ESt4lessIiESaIS4_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 8001f6c:	b480      	push	{r7}
 8001f6e:	b083      	sub	sp, #12
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	4618      	mov	r0, r3
 8001f78:	370c      	adds	r7, #12
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bc80      	pop	{r7}
 8001f7e:	4770      	bx	lr

08001f80 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKiN5Delay15delay_details_tEEEEE7destroyIS5_EEvRS7_PT_>:
       *
       *  Calls @c __a.destroy(__p).
      */
      template<typename _Up>
	static _GLIBCXX20_CONSTEXPR void
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b082      	sub	sp, #8
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
 8001f88:	6039      	str	r1, [r7, #0]
	noexcept(is_nothrow_destructible<_Up>::value)
	{
#if __cplusplus <= 201703L
	  __a.destroy(__p);
 8001f8a:	6839      	ldr	r1, [r7, #0]
 8001f8c:	6878      	ldr	r0, [r7, #4]
 8001f8e:	f000 f855 	bl	800203c <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKiN5Delay15delay_details_tEEEE7destroyIS6_EEvPT_>
#else
	  std::destroy_at(__p);
#endif
	}
 8001f92:	bf00      	nop
 8001f94:	3708      	adds	r7, #8
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}

08001f9a <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKiN5Delay15delay_details_tEEEEE10deallocateERS7_PS6_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8001f9a:	b580      	push	{r7, lr}
 8001f9c:	b084      	sub	sp, #16
 8001f9e:	af00      	add	r7, sp, #0
 8001fa0:	60f8      	str	r0, [r7, #12]
 8001fa2:	60b9      	str	r1, [r7, #8]
 8001fa4:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8001fa6:	687a      	ldr	r2, [r7, #4]
 8001fa8:	68b9      	ldr	r1, [r7, #8]
 8001faa:	68f8      	ldr	r0, [r7, #12]
 8001fac:	f000 f850 	bl	8002050 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKiN5Delay15delay_details_tEEEE10deallocateEPS7_j>
 8001fb0:	bf00      	nop
 8001fb2:	3710      	adds	r7, #16
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}

08001fb8 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKiN5Delay15delay_details_tEEEEE8allocateERS7_j>:
      allocate(allocator_type& __a, size_type __n)
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b082      	sub	sp, #8
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
 8001fc0:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	6839      	ldr	r1, [r7, #0]
 8001fc6:	6878      	ldr	r0, [r7, #4]
 8001fc8:	f000 f851 	bl	800206e <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKiN5Delay15delay_details_tEEEE8allocateEjPKv>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	4618      	mov	r0, r3
 8001fd0:	3708      	adds	r7, #8
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}

08001fd6 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKiN5Delay15delay_details_tEEEEE9constructIS5_JS1_IiS4_EEEEvRS7_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8001fd6:	b580      	push	{r7, lr}
 8001fd8:	b084      	sub	sp, #16
 8001fda:	af00      	add	r7, sp, #0
 8001fdc:	60f8      	str	r0, [r7, #12]
 8001fde:	60b9      	str	r1, [r7, #8]
 8001fe0:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 8001fe2:	6878      	ldr	r0, [r7, #4]
 8001fe4:	f7ff fc5e 	bl	80018a4 <_ZSt7forwardISt4pairIiN5Delay15delay_details_tEEEOT_RNSt16remove_referenceIS4_E4typeE>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	461a      	mov	r2, r3
 8001fec:	68b9      	ldr	r1, [r7, #8]
 8001fee:	68f8      	ldr	r0, [r7, #12]
 8001ff0:	f000 f85c 	bl	80020ac <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKiN5Delay15delay_details_tEEEE9constructIS6_JS2_IiS5_EEEEvPT_DpOT0_>
	}
 8001ff4:	bf00      	nop
 8001ff6:	3710      	adds	r7, #16
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd80      	pop	{r7, pc}

08001ffc <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKiN5Delay15delay_details_tEEEEOT_RNSt16remove_referenceIS9_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8001ffc:	b480      	push	{r7}
 8001ffe:	b083      	sub	sp, #12
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	4618      	mov	r0, r3
 8002008:	370c      	adds	r7, #12
 800200a:	46bd      	mov	sp, r7
 800200c:	bc80      	pop	{r7}
 800200e:	4770      	bx	lr

08002010 <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8002010:	b480      	push	{r7}
 8002012:	b083      	sub	sp, #12
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	4618      	mov	r0, r3
 800201c:	370c      	adds	r7, #12
 800201e:	46bd      	mov	sp, r7
 8002020:	bc80      	pop	{r7}
 8002022:	4770      	bx	lr

08002024 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKiN5Delay15delay_details_tEEE6_M_ptrEv>:
      _M_ptr() const noexcept
 8002024:	b580      	push	{r7, lr}
 8002026:	b082      	sub	sp, #8
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Tp*>(_M_addr()); }
 800202c:	6878      	ldr	r0, [r7, #4]
 800202e:	f000 f855 	bl	80020dc <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKiN5Delay15delay_details_tEEE7_M_addrEv>
 8002032:	4603      	mov	r3, r0
 8002034:	4618      	mov	r0, r3
 8002036:	3708      	adds	r7, #8
 8002038:	46bd      	mov	sp, r7
 800203a:	bd80      	pop	{r7, pc}

0800203c <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKiN5Delay15delay_details_tEEEE7destroyIS6_EEvPT_>:
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }

      template<typename _Up>
	void
	destroy(_Up* __p)
 800203c:	b480      	push	{r7}
 800203e:	b083      	sub	sp, #12
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
 8002044:	6039      	str	r1, [r7, #0]
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
 8002046:	bf00      	nop
 8002048:	370c      	adds	r7, #12
 800204a:	46bd      	mov	sp, r7
 800204c:	bc80      	pop	{r7}
 800204e:	4770      	bx	lr

08002050 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKiN5Delay15delay_details_tEEEE10deallocateEPS7_j>:
      deallocate(_Tp* __p, size_type __t)
 8002050:	b580      	push	{r7, lr}
 8002052:	b084      	sub	sp, #16
 8002054:	af00      	add	r7, sp, #0
 8002056:	60f8      	str	r0, [r7, #12]
 8002058:	60b9      	str	r1, [r7, #8]
 800205a:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	015b      	lsls	r3, r3, #5
 8002060:	4619      	mov	r1, r3
 8002062:	68b8      	ldr	r0, [r7, #8]
 8002064:	f001 fa71 	bl	800354a <_ZdlPvj>
      }
 8002068:	3710      	adds	r7, #16
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}

0800206e <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKiN5Delay15delay_details_tEEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800206e:	b580      	push	{r7, lr}
 8002070:	b084      	sub	sp, #16
 8002072:	af00      	add	r7, sp, #0
 8002074:	60f8      	str	r0, [r7, #12]
 8002076:	60b9      	str	r1, [r7, #8]
 8002078:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 800207a:	68f8      	ldr	r0, [r7, #12]
 800207c:	f000 f838 	bl	80020f0 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKiN5Delay15delay_details_tEEEE11_M_max_sizeEv>
 8002080:	4602      	mov	r2, r0
 8002082:	68bb      	ldr	r3, [r7, #8]
 8002084:	4293      	cmp	r3, r2
 8002086:	bf8c      	ite	hi
 8002088:	2301      	movhi	r3, #1
 800208a:	2300      	movls	r3, #0
 800208c:	b2db      	uxtb	r3, r3
 800208e:	2b00      	cmp	r3, #0
 8002090:	d001      	beq.n	8002096 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKiN5Delay15delay_details_tEEEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8002092:	f001 fb28 	bl	80036e6 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8002096:	68bb      	ldr	r3, [r7, #8]
 8002098:	015b      	lsls	r3, r3, #5
 800209a:	4618      	mov	r0, r3
 800209c:	f001 fa57 	bl	800354e <_Znwj>
 80020a0:	4603      	mov	r3, r0
 80020a2:	bf00      	nop
      }
 80020a4:	4618      	mov	r0, r3
 80020a6:	3710      	adds	r7, #16
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd80      	pop	{r7, pc}

080020ac <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKiN5Delay15delay_details_tEEEE9constructIS6_JS2_IiS5_EEEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 80020ac:	b590      	push	{r4, r7, lr}
 80020ae:	b085      	sub	sp, #20
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	60f8      	str	r0, [r7, #12]
 80020b4:	60b9      	str	r1, [r7, #8]
 80020b6:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80020b8:	6878      	ldr	r0, [r7, #4]
 80020ba:	f7ff fbf3 	bl	80018a4 <_ZSt7forwardISt4pairIiN5Delay15delay_details_tEEEOT_RNSt16remove_referenceIS4_E4typeE>
 80020be:	4604      	mov	r4, r0
 80020c0:	68bb      	ldr	r3, [r7, #8]
 80020c2:	4619      	mov	r1, r3
 80020c4:	2010      	movs	r0, #16
 80020c6:	f7ff f959 	bl	800137c <_ZnwjPv>
 80020ca:	4603      	mov	r3, r0
 80020cc:	4621      	mov	r1, r4
 80020ce:	4618      	mov	r0, r3
 80020d0:	f000 f819 	bl	8002106 <_ZNSt4pairIKiN5Delay15delay_details_tEEC1IiS2_Lb1EEEOS_IT_T0_E>
 80020d4:	bf00      	nop
 80020d6:	3714      	adds	r7, #20
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd90      	pop	{r4, r7, pc}

080020dc <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKiN5Delay15delay_details_tEEE7_M_addrEv>:
      _M_addr() const noexcept
 80020dc:	b480      	push	{r7}
 80020de:	b083      	sub	sp, #12
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
      { return static_cast<const void*>(&_M_storage); }
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	4618      	mov	r0, r3
 80020e8:	370c      	adds	r7, #12
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bc80      	pop	{r7}
 80020ee:	4770      	bx	lr

080020f0 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKiN5Delay15delay_details_tEEEE11_M_max_sizeEv>:
	{ return false; }
#endif

    private:
      _GLIBCXX_CONSTEXPR size_type
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 80020f0:	b480      	push	{r7}
 80020f2:	b083      	sub	sp, #12
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
      {
#if __PTRDIFF_MAX__ < __SIZE_MAX__
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 80020f8:	f06f 437c 	mvn.w	r3, #4227858432	; 0xfc000000
#else
	return std::size_t(-1) / sizeof(_Tp);
#endif
      }
 80020fc:	4618      	mov	r0, r3
 80020fe:	370c      	adds	r7, #12
 8002100:	46bd      	mov	sp, r7
 8002102:	bc80      	pop	{r7}
 8002104:	4770      	bx	lr

08002106 <_ZNSt4pairIKiN5Delay15delay_details_tEEC1IiS2_Lb1EEEOS_IT_T0_E>:
	constexpr pair(pair<_U1, _U2>&& __p)
 8002106:	b580      	push	{r7, lr}
 8002108:	b082      	sub	sp, #8
 800210a:	af00      	add	r7, sp, #0
 800210c:	6078      	str	r0, [r7, #4]
 800210e:	6039      	str	r1, [r7, #0]
	: first(std::forward<_U1>(__p.first)),
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	4618      	mov	r0, r3
 8002114:	f000 f814 	bl	8002140 <_ZSt7forwardIiEOT_RNSt16remove_referenceIS0_E4typeE>
 8002118:	4603      	mov	r3, r0
	  second(std::forward<_U2>(__p.second)) { }
 800211a:	681a      	ldr	r2, [r3, #0]
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	601a      	str	r2, [r3, #0]
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	3304      	adds	r3, #4
 8002124:	4618      	mov	r0, r3
 8002126:	f000 f815 	bl	8002154 <_ZSt7forwardIN5Delay15delay_details_tEEOT_RNSt16remove_referenceIS2_E4typeE>
 800212a:	4602      	mov	r2, r0
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	3304      	adds	r3, #4
 8002130:	ca07      	ldmia	r2, {r0, r1, r2}
 8002132:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	4618      	mov	r0, r3
 800213a:	3708      	adds	r7, #8
 800213c:	46bd      	mov	sp, r7
 800213e:	bd80      	pop	{r7, pc}

08002140 <_ZSt7forwardIiEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8002140:	b480      	push	{r7}
 8002142:	b083      	sub	sp, #12
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	4618      	mov	r0, r3
 800214c:	370c      	adds	r7, #12
 800214e:	46bd      	mov	sp, r7
 8002150:	bc80      	pop	{r7}
 8002152:	4770      	bx	lr

08002154 <_ZSt7forwardIN5Delay15delay_details_tEEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8002154:	b480      	push	{r7}
 8002156:	b083      	sub	sp, #12
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	4618      	mov	r0, r3
 8002160:	370c      	adds	r7, #12
 8002162:	46bd      	mov	sp, r7
 8002164:	bc80      	pop	{r7}
 8002166:	4770      	bx	lr

08002168 <_Z13init_sysClockv>:
#include "INITIALIZATION.hpp"
#include "stm32f1xx.h"
#include "!!!CONFIG.hpp"

//////////////////////////////////////////////////////////////////////////////////////////////////////////////
void init_sysClock(){
 8002168:	b480      	push	{r7}
 800216a:	af00      	add	r7, sp, #0

	// ENABLE HSE, WAIT FOR HSE BECOME READY
	RCC->CR |= RCC_CR_HSEON;									// HSE TURN ON
 800216c:	4b31      	ldr	r3, [pc, #196]	; (8002234 <_Z13init_sysClockv+0xcc>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a30      	ldr	r2, [pc, #192]	; (8002234 <_Z13init_sysClockv+0xcc>)
 8002172:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002176:	6013      	str	r3, [r2, #0]
	while(!(RCC->CR & RCC_CR_HSERDY));							// HSE wait for ignition
 8002178:	4b2e      	ldr	r3, [pc, #184]	; (8002234 <_Z13init_sysClockv+0xcc>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002180:	2b00      	cmp	r3, #0
 8002182:	bf0c      	ite	eq
 8002184:	2301      	moveq	r3, #1
 8002186:	2300      	movne	r3, #0
 8002188:	b2db      	uxtb	r3, r3
 800218a:	2b00      	cmp	r3, #0
 800218c:	d000      	beq.n	8002190 <_Z13init_sysClockv+0x28>
 800218e:	e7f3      	b.n	8002178 <_Z13init_sysClockv+0x10>
	// TURN OFF PLL BEFORE INIT
	//RCC->CFGR	&= ~RCC_CR_PLLON;
	//while(RCC->CR & RCC_CR_PLLRDY);
	RCC->CFGR	|= RCC_CFGR_PLLSRC;			// PLL SOURCE: HSE IS USED AS SOURCE
 8002190:	4b28      	ldr	r3, [pc, #160]	; (8002234 <_Z13init_sysClockv+0xcc>)
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	4a27      	ldr	r2, [pc, #156]	; (8002234 <_Z13init_sysClockv+0xcc>)
 8002196:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800219a:	6053      	str	r3, [r2, #4]
	RCC->CFGR	|= RCC_CFGR_PLLMULL6;		// PLL multiplication factor is 6
 800219c:	4b25      	ldr	r3, [pc, #148]	; (8002234 <_Z13init_sysClockv+0xcc>)
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	4a24      	ldr	r2, [pc, #144]	; (8002234 <_Z13init_sysClockv+0xcc>)
 80021a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80021a6:	6053      	str	r3, [r2, #4]
	RCC->CR		|= RCC_CR_PLLON;			// PLL ON
 80021a8:	4b22      	ldr	r3, [pc, #136]	; (8002234 <_Z13init_sysClockv+0xcc>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a21      	ldr	r2, [pc, #132]	; (8002234 <_Z13init_sysClockv+0xcc>)
 80021ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80021b2:	6013      	str	r3, [r2, #0]
	while(!(RCC->CR & RCC_CR_PLLRDY));		// WAIT TILL PLL BECOME READY
 80021b4:	4b1f      	ldr	r3, [pc, #124]	; (8002234 <_Z13init_sysClockv+0xcc>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021bc:	2b00      	cmp	r3, #0
 80021be:	bf0c      	ite	eq
 80021c0:	2301      	moveq	r3, #1
 80021c2:	2300      	movne	r3, #0
 80021c4:	b2db      	uxtb	r3, r3
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d000      	beq.n	80021cc <_Z13init_sysClockv+0x64>
 80021ca:	e7f3      	b.n	80021b4 <_Z13init_sysClockv+0x4c>

	// CONFIGURE FLASH PREFETCH AND THE LATENCY
	FLASH->ACR	|= FLASH_ACR_PRFTBE;		// preftch filter activated
 80021cc:	4b1a      	ldr	r3, [pc, #104]	; (8002238 <_Z13init_sysClockv+0xd0>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a19      	ldr	r2, [pc, #100]	; (8002238 <_Z13init_sysClockv+0xd0>)
 80021d2:	f043 0310 	orr.w	r3, r3, #16
 80021d6:	6013      	str	r3, [r2, #0]
	FLASH->ACR	|= FLASH_ACR_LATENCY_1;		// latency 1
 80021d8:	4b17      	ldr	r3, [pc, #92]	; (8002238 <_Z13init_sysClockv+0xd0>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a16      	ldr	r2, [pc, #88]	; (8002238 <_Z13init_sysClockv+0xd0>)
 80021de:	f043 0302 	orr.w	r3, r3, #2
 80021e2:	6013      	str	r3, [r2, #0]
	RCC->CFGR	|= RCC_CFGR_HPRE_DIV1;		// AHB PRESCALLER (SYSCLK not divided)
 80021e4:	4b13      	ldr	r3, [pc, #76]	; (8002234 <_Z13init_sysClockv+0xcc>)
 80021e6:	4a13      	ldr	r2, [pc, #76]	; (8002234 <_Z13init_sysClockv+0xcc>)
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	6053      	str	r3, [r2, #4]
	RCC->CFGR	|= RCC_CFGR_MCO_SYSCLK;		// CLOCK OUTPUT TO THE MCO PIN
 80021ec:	4b11      	ldr	r3, [pc, #68]	; (8002234 <_Z13init_sysClockv+0xcc>)
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	4a10      	ldr	r2, [pc, #64]	; (8002234 <_Z13init_sysClockv+0xcc>)
 80021f2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80021f6:	6053      	str	r3, [r2, #4]
	RCC->CFGR	|= RCC_CFGR_SW_PLL;			// PLL FINALLLY SELECTED AS A SYSTEM CLOCk
 80021f8:	4b0e      	ldr	r3, [pc, #56]	; (8002234 <_Z13init_sysClockv+0xcc>)
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	4a0d      	ldr	r2, [pc, #52]	; (8002234 <_Z13init_sysClockv+0xcc>)
 80021fe:	f043 0302 	orr.w	r3, r3, #2
 8002202:	6053      	str	r3, [r2, #4]
	RCC->CFGR	|= RCC_CFGR_PPRE1_DIV1;		// APB1 PRESCALLER (HCLK not divided)
 8002204:	4b0b      	ldr	r3, [pc, #44]	; (8002234 <_Z13init_sysClockv+0xcc>)
 8002206:	4a0b      	ldr	r2, [pc, #44]	; (8002234 <_Z13init_sysClockv+0xcc>)
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	6053      	str	r3, [r2, #4]
	RCC->CFGR	|= RCC_CFGR_PPRE2_DIV1;		// APB2 PRESCALLER (HCLK not divided)
 800220c:	4b09      	ldr	r3, [pc, #36]	; (8002234 <_Z13init_sysClockv+0xcc>)
 800220e:	4a09      	ldr	r2, [pc, #36]	; (8002234 <_Z13init_sysClockv+0xcc>)
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	6053      	str	r3, [r2, #4]
	while(!(RCC->CFGR & RCC_CFGR_SWS_PLL));	// wait for a flag confirming PLL is used as clock
 8002214:	4b07      	ldr	r3, [pc, #28]	; (8002234 <_Z13init_sysClockv+0xcc>)
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	f003 0308 	and.w	r3, r3, #8
 800221c:	2b00      	cmp	r3, #0
 800221e:	bf0c      	ite	eq
 8002220:	2301      	moveq	r3, #1
 8002222:	2300      	movne	r3, #0
 8002224:	b2db      	uxtb	r3, r3
 8002226:	2b00      	cmp	r3, #0
 8002228:	d000      	beq.n	800222c <_Z13init_sysClockv+0xc4>
 800222a:	e7f3      	b.n	8002214 <_Z13init_sysClockv+0xac>
}
 800222c:	bf00      	nop
 800222e:	46bd      	mov	sp, r7
 8002230:	bc80      	pop	{r7}
 8002232:	4770      	bx	lr
 8002234:	40021000 	.word	0x40021000
 8002238:	40022000 	.word	0x40022000

0800223c <_Z9init_GPIOv>:
//////////////////////////////////////////////////////////////////////////////////////////////////////////////
void init_GPIO(){
 800223c:	b480      	push	{r7}
 800223e:	af00      	add	r7, sp, #0
	RCC->APB2ENR |=  RCC_APB2ENR_IOPAEN;						// PORT A CLOCK ENABLE
 8002240:	4b10      	ldr	r3, [pc, #64]	; (8002284 <_Z9init_GPIOv+0x48>)
 8002242:	699b      	ldr	r3, [r3, #24]
 8002244:	4a0f      	ldr	r2, [pc, #60]	; (8002284 <_Z9init_GPIOv+0x48>)
 8002246:	f043 0304 	orr.w	r3, r3, #4
 800224a:	6193      	str	r3, [r2, #24]
	RCC->APB2ENR |=  RCC_APB2ENR_IOPBEN;						// PORT B CLOCK ENABLE
 800224c:	4b0d      	ldr	r3, [pc, #52]	; (8002284 <_Z9init_GPIOv+0x48>)
 800224e:	699b      	ldr	r3, [r3, #24]
 8002250:	4a0c      	ldr	r2, [pc, #48]	; (8002284 <_Z9init_GPIOv+0x48>)
 8002252:	f043 0308 	orr.w	r3, r3, #8
 8002256:	6193      	str	r3, [r2, #24]
	RCC->APB2ENR |=  RCC_APB2ENR_IOPCEN;						// PORT C CLOCK ENABLE
 8002258:	4b0a      	ldr	r3, [pc, #40]	; (8002284 <_Z9init_GPIOv+0x48>)
 800225a:	699b      	ldr	r3, [r3, #24]
 800225c:	4a09      	ldr	r2, [pc, #36]	; (8002284 <_Z9init_GPIOv+0x48>)
 800225e:	f043 0310 	orr.w	r3, r3, #16
 8002262:	6193      	str	r3, [r2, #24]
	GPIOC->CRH	 &=  ~GPIO_CRH_CNF13;							// LED PORT CONFIG
 8002264:	4b08      	ldr	r3, [pc, #32]	; (8002288 <_Z9init_GPIOv+0x4c>)
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	4a07      	ldr	r2, [pc, #28]	; (8002288 <_Z9init_GPIOv+0x4c>)
 800226a:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800226e:	6053      	str	r3, [r2, #4]
	GPIOC->CRH	 |=  GPIO_CRH_MODE13;							// LED PORT CONFIG
 8002270:	4b05      	ldr	r3, [pc, #20]	; (8002288 <_Z9init_GPIOv+0x4c>)
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	4a04      	ldr	r2, [pc, #16]	; (8002288 <_Z9init_GPIOv+0x4c>)
 8002276:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800227a:	6053      	str	r3, [r2, #4]
}
 800227c:	bf00      	nop
 800227e:	46bd      	mov	sp, r7
 8002280:	bc80      	pop	{r7}
 8002282:	4770      	bx	lr
 8002284:	40021000 	.word	0x40021000
 8002288:	40011000 	.word	0x40011000

0800228c <_Z12init_SysTickv>:
//////////////////////////////////////////////////////////////////////////////////////////////////////////////
void init_SysTick(){
 800228c:	b480      	push	{r7}
 800228e:	af00      	add	r7, sp, #0
	SysTick->LOAD &= ~SysTick_LOAD_RELOAD_Msk;		// RELOAD register clear
 8002290:	4b11      	ldr	r3, [pc, #68]	; (80022d8 <_Z12init_SysTickv+0x4c>)
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	4a10      	ldr	r2, [pc, #64]	; (80022d8 <_Z12init_SysTickv+0x4c>)
 8002296:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800229a:	6053      	str	r3, [r2, #4]
	SysTick->LOAD  = SysClock/(1000-1);				// VALUE register gets 8000 to have 1kHz SysTick interruption
 800229c:	4b0e      	ldr	r3, [pc, #56]	; (80022d8 <_Z12init_SysTickv+0x4c>)
 800229e:	f64b 32b0 	movw	r2, #48048	; 0xbbb0
 80022a2:	605a      	str	r2, [r3, #4]
	SysTick->VAL   = ~SysTick_VAL_CURRENT_Msk;		// VALUE register clear
 80022a4:	4b0c      	ldr	r3, [pc, #48]	; (80022d8 <_Z12init_SysTickv+0x4c>)
 80022a6:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 80022aa:	609a      	str	r2, [r3, #8]
	SysTick->CTRL |= SysTick_CTRL_CLKSOURCE_Msk; 	// AHB bus is a clock source for SysTick
 80022ac:	4b0a      	ldr	r3, [pc, #40]	; (80022d8 <_Z12init_SysTickv+0x4c>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a09      	ldr	r2, [pc, #36]	; (80022d8 <_Z12init_SysTickv+0x4c>)
 80022b2:	f043 0304 	orr.w	r3, r3, #4
 80022b6:	6013      	str	r3, [r2, #0]
	SysTick->CTRL |= SysTick_CTRL_TICKINT_Msk;		// SysTick interruption enable
 80022b8:	4b07      	ldr	r3, [pc, #28]	; (80022d8 <_Z12init_SysTickv+0x4c>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a06      	ldr	r2, [pc, #24]	; (80022d8 <_Z12init_SysTickv+0x4c>)
 80022be:	f043 0302 	orr.w	r3, r3, #2
 80022c2:	6013      	str	r3, [r2, #0]
	SysTick->CTRL |= SysTick_CTRL_ENABLE_Msk;		// SysTick Enable
 80022c4:	4b04      	ldr	r3, [pc, #16]	; (80022d8 <_Z12init_SysTickv+0x4c>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a03      	ldr	r2, [pc, #12]	; (80022d8 <_Z12init_SysTickv+0x4c>)
 80022ca:	f043 0301 	orr.w	r3, r3, #1
 80022ce:	6013      	str	r3, [r2, #0]
}
 80022d0:	bf00      	nop
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bc80      	pop	{r7}
 80022d6:	4770      	bx	lr
 80022d8:	e000e010 	.word	0xe000e010

080022dc <_Z8init_ADCv>:
//////////////////////////////////////////////////////////////////////////////////////////////////////////////
void init_ADC(){
 80022dc:	b480      	push	{r7}
 80022de:	b085      	sub	sp, #20
 80022e0:	af00      	add	r7, sp, #0
	//	VREF - ADC channel 16
	//	TEMP - ADC channel 17
	RCC->APB2ENR 	|= RCC_APB2ENR_IOPAEN;						// PORT A CLOCK ENABLE FOR ADC PURPOSE
 80022e2:	4ba7      	ldr	r3, [pc, #668]	; (8002580 <_Z8init_ADCv+0x2a4>)
 80022e4:	699b      	ldr	r3, [r3, #24]
 80022e6:	4aa6      	ldr	r2, [pc, #664]	; (8002580 <_Z8init_ADCv+0x2a4>)
 80022e8:	f043 0304 	orr.w	r3, r3, #4
 80022ec:	6193      	str	r3, [r2, #24]
	RCC->APB2ENR 	|= RCC_APB2ENR_IOPBEN;						// PORT B CLOCK ENABLE FOR ADC PURPOSE
 80022ee:	4ba4      	ldr	r3, [pc, #656]	; (8002580 <_Z8init_ADCv+0x2a4>)
 80022f0:	699b      	ldr	r3, [r3, #24]
 80022f2:	4aa3      	ldr	r2, [pc, #652]	; (8002580 <_Z8init_ADCv+0x2a4>)
 80022f4:	f043 0308 	orr.w	r3, r3, #8
 80022f8:	6193      	str	r3, [r2, #24]
	RCC->APB2ENR 	|= RCC_APB2ENR_IOPCEN;						// PORT C CLOCK ENABLE FOR ADC PURPOSE
 80022fa:	4ba1      	ldr	r3, [pc, #644]	; (8002580 <_Z8init_ADCv+0x2a4>)
 80022fc:	699b      	ldr	r3, [r3, #24]
 80022fe:	4aa0      	ldr	r2, [pc, #640]	; (8002580 <_Z8init_ADCv+0x2a4>)
 8002300:	f043 0310 	orr.w	r3, r3, #16
 8002304:	6193      	str	r3, [r2, #24]
////////////////////////////////////////////////////////////////////////////////////////////////////////////
// CONFIGURING GPIOs AS ANALOG INPUTS!!!!
	for(int i=0; i<SENSORS_QTY; i++){													// FOR SENSORS QUATITY
 8002306:	2300      	movs	r3, #0
 8002308:	60fb      	str	r3, [r7, #12]
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	2b09      	cmp	r3, #9
 800230e:	f300 8086 	bgt.w	800241e <_Z8init_ADCv+0x142>
		if(my_sensors[i].GPIO_PORT_NAME == GPIOA) // IF SENSOR PORT IS GPIOA
 8002312:	499c      	ldr	r1, [pc, #624]	; (8002584 <_Z8init_ADCv+0x2a8>)
 8002314:	68fa      	ldr	r2, [r7, #12]
 8002316:	4613      	mov	r3, r2
 8002318:	00db      	lsls	r3, r3, #3
 800231a:	1a9b      	subs	r3, r3, r2
 800231c:	00db      	lsls	r3, r3, #3
 800231e:	440b      	add	r3, r1
 8002320:	330c      	adds	r3, #12
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a98      	ldr	r2, [pc, #608]	; (8002588 <_Z8init_ADCv+0x2ac>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d134      	bne.n	8002394 <_Z8init_ADCv+0xb8>
		{																				// CONFIGURING GPIOA PIN AS ANALOG MODE (PROGRAMMING CNF BITS TO 00)
			if(my_sensors[i].GPIO_PIN_NUMBER <=7 ){										// FOR ADC CHANNELS <=7 USE CRL REGISTER
 800232a:	4996      	ldr	r1, [pc, #600]	; (8002584 <_Z8init_ADCv+0x2a8>)
 800232c:	68fa      	ldr	r2, [r7, #12]
 800232e:	4613      	mov	r3, r2
 8002330:	00db      	lsls	r3, r3, #3
 8002332:	1a9b      	subs	r3, r3, r2
 8002334:	00db      	lsls	r3, r3, #3
 8002336:	440b      	add	r3, r1
 8002338:	3310      	adds	r3, #16
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	2b07      	cmp	r3, #7
 800233e:	dc14      	bgt.n	800236a <_Z8init_ADCv+0x8e>
				GPIOA->CRL &= ~(0b11 << (((my_sensors[i].GPIO_PIN_NUMBER) 	  *4 ) +2) );	// USE Y=kX+B TO CALCULATE MASK SHIFT
 8002340:	4b91      	ldr	r3, [pc, #580]	; (8002588 <_Z8init_ADCv+0x2ac>)
 8002342:	6819      	ldr	r1, [r3, #0]
 8002344:	488f      	ldr	r0, [pc, #572]	; (8002584 <_Z8init_ADCv+0x2a8>)
 8002346:	68fa      	ldr	r2, [r7, #12]
 8002348:	4613      	mov	r3, r2
 800234a:	00db      	lsls	r3, r3, #3
 800234c:	1a9b      	subs	r3, r3, r2
 800234e:	00db      	lsls	r3, r3, #3
 8002350:	4403      	add	r3, r0
 8002352:	3310      	adds	r3, #16
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	009b      	lsls	r3, r3, #2
 8002358:	3302      	adds	r3, #2
 800235a:	2203      	movs	r2, #3
 800235c:	fa02 f303 	lsl.w	r3, r2, r3
 8002360:	43db      	mvns	r3, r3
 8002362:	4a89      	ldr	r2, [pc, #548]	; (8002588 <_Z8init_ADCv+0x2ac>)
 8002364:	400b      	ands	r3, r1
 8002366:	6013      	str	r3, [r2, #0]
 8002368:	e014      	b.n	8002394 <_Z8init_ADCv+0xb8>
			}else{																		// FOR ADC CHANNELS >7 USE CRH REGISTER
				GPIOA->CRH &= ~(0b11 << (((my_sensors[i].GPIO_PIN_NUMBER - 8) *4 ) +2) );	// USE Y=kX+B TO CALCULATE MASK SHIFT
 800236a:	4b87      	ldr	r3, [pc, #540]	; (8002588 <_Z8init_ADCv+0x2ac>)
 800236c:	6859      	ldr	r1, [r3, #4]
 800236e:	4885      	ldr	r0, [pc, #532]	; (8002584 <_Z8init_ADCv+0x2a8>)
 8002370:	68fa      	ldr	r2, [r7, #12]
 8002372:	4613      	mov	r3, r2
 8002374:	00db      	lsls	r3, r3, #3
 8002376:	1a9b      	subs	r3, r3, r2
 8002378:	00db      	lsls	r3, r3, #3
 800237a:	4403      	add	r3, r0
 800237c:	3310      	adds	r3, #16
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	3b08      	subs	r3, #8
 8002382:	009b      	lsls	r3, r3, #2
 8002384:	3302      	adds	r3, #2
 8002386:	2203      	movs	r2, #3
 8002388:	fa02 f303 	lsl.w	r3, r2, r3
 800238c:	43db      	mvns	r3, r3
 800238e:	4a7e      	ldr	r2, [pc, #504]	; (8002588 <_Z8init_ADCv+0x2ac>)
 8002390:	400b      	ands	r3, r1
 8002392:	6053      	str	r3, [r2, #4]
			}
		}
		if(my_sensors[i].GPIO_PORT_NAME == GPIOB) // IF SENSOR PORT IS GPIOB
 8002394:	497b      	ldr	r1, [pc, #492]	; (8002584 <_Z8init_ADCv+0x2a8>)
 8002396:	68fa      	ldr	r2, [r7, #12]
 8002398:	4613      	mov	r3, r2
 800239a:	00db      	lsls	r3, r3, #3
 800239c:	1a9b      	subs	r3, r3, r2
 800239e:	00db      	lsls	r3, r3, #3
 80023a0:	440b      	add	r3, r1
 80023a2:	330c      	adds	r3, #12
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4a79      	ldr	r2, [pc, #484]	; (800258c <_Z8init_ADCv+0x2b0>)
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d134      	bne.n	8002416 <_Z8init_ADCv+0x13a>
		{
			if(my_sensors[i].GPIO_PIN_NUMBER <=7 ){
 80023ac:	4975      	ldr	r1, [pc, #468]	; (8002584 <_Z8init_ADCv+0x2a8>)
 80023ae:	68fa      	ldr	r2, [r7, #12]
 80023b0:	4613      	mov	r3, r2
 80023b2:	00db      	lsls	r3, r3, #3
 80023b4:	1a9b      	subs	r3, r3, r2
 80023b6:	00db      	lsls	r3, r3, #3
 80023b8:	440b      	add	r3, r1
 80023ba:	3310      	adds	r3, #16
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	2b07      	cmp	r3, #7
 80023c0:	dc14      	bgt.n	80023ec <_Z8init_ADCv+0x110>
				GPIOB->CRL &= ~(0b11 << (((my_sensors[i].GPIO_PIN_NUMBER) 	  *4 ) +2) );
 80023c2:	4b72      	ldr	r3, [pc, #456]	; (800258c <_Z8init_ADCv+0x2b0>)
 80023c4:	6819      	ldr	r1, [r3, #0]
 80023c6:	486f      	ldr	r0, [pc, #444]	; (8002584 <_Z8init_ADCv+0x2a8>)
 80023c8:	68fa      	ldr	r2, [r7, #12]
 80023ca:	4613      	mov	r3, r2
 80023cc:	00db      	lsls	r3, r3, #3
 80023ce:	1a9b      	subs	r3, r3, r2
 80023d0:	00db      	lsls	r3, r3, #3
 80023d2:	4403      	add	r3, r0
 80023d4:	3310      	adds	r3, #16
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	009b      	lsls	r3, r3, #2
 80023da:	3302      	adds	r3, #2
 80023dc:	2203      	movs	r2, #3
 80023de:	fa02 f303 	lsl.w	r3, r2, r3
 80023e2:	43db      	mvns	r3, r3
 80023e4:	4a69      	ldr	r2, [pc, #420]	; (800258c <_Z8init_ADCv+0x2b0>)
 80023e6:	400b      	ands	r3, r1
 80023e8:	6013      	str	r3, [r2, #0]
 80023ea:	e014      	b.n	8002416 <_Z8init_ADCv+0x13a>
			}else{
				GPIOB->CRH &= ~(0b11 << (((my_sensors[i].GPIO_PIN_NUMBER - 8) *4 ) +2) );
 80023ec:	4b67      	ldr	r3, [pc, #412]	; (800258c <_Z8init_ADCv+0x2b0>)
 80023ee:	6859      	ldr	r1, [r3, #4]
 80023f0:	4864      	ldr	r0, [pc, #400]	; (8002584 <_Z8init_ADCv+0x2a8>)
 80023f2:	68fa      	ldr	r2, [r7, #12]
 80023f4:	4613      	mov	r3, r2
 80023f6:	00db      	lsls	r3, r3, #3
 80023f8:	1a9b      	subs	r3, r3, r2
 80023fa:	00db      	lsls	r3, r3, #3
 80023fc:	4403      	add	r3, r0
 80023fe:	3310      	adds	r3, #16
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	3b08      	subs	r3, #8
 8002404:	009b      	lsls	r3, r3, #2
 8002406:	3302      	adds	r3, #2
 8002408:	2203      	movs	r2, #3
 800240a:	fa02 f303 	lsl.w	r3, r2, r3
 800240e:	43db      	mvns	r3, r3
 8002410:	4a5e      	ldr	r2, [pc, #376]	; (800258c <_Z8init_ADCv+0x2b0>)
 8002412:	400b      	ands	r3, r1
 8002414:	6053      	str	r3, [r2, #4]
	for(int i=0; i<SENSORS_QTY; i++){													// FOR SENSORS QUATITY
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	3301      	adds	r3, #1
 800241a:	60fb      	str	r3, [r7, #12]
 800241c:	e775      	b.n	800230a <_Z8init_ADCv+0x2e>
			}
		}
	}
// CONFIGURING GPIOs AS ANALOG INPUTS ENDED
////////////////////////////////////////////////////////////////////////////////////////////////////////////
	RCC ->APB2ENR	|= RCC_APB2ENR_ADC1EN;					// EN clock for ADC1
 800241e:	4b58      	ldr	r3, [pc, #352]	; (8002580 <_Z8init_ADCv+0x2a4>)
 8002420:	699b      	ldr	r3, [r3, #24]
 8002422:	4a57      	ldr	r2, [pc, #348]	; (8002580 <_Z8init_ADCv+0x2a4>)
 8002424:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002428:	6193      	str	r3, [r2, #24]
	RCC ->CFGR 		&= ~RCC_CFGR_ADCPRE;			 		// ADC prescaller configured to division factor 2
 800242a:	4b55      	ldr	r3, [pc, #340]	; (8002580 <_Z8init_ADCv+0x2a4>)
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	4a54      	ldr	r2, [pc, #336]	; (8002580 <_Z8init_ADCv+0x2a4>)
 8002430:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002434:	6053      	str	r3, [r2, #4]
//	ADC1->CR1 		|= ADC_CR1_EOCIE;						// Enable interrupt for regular channels.
	ADC1->CR1		|= ADC_CR1_SCAN;						// SCAN mode activated
 8002436:	4b56      	ldr	r3, [pc, #344]	; (8002590 <_Z8init_ADCv+0x2b4>)
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	4a55      	ldr	r2, [pc, #340]	; (8002590 <_Z8init_ADCv+0x2b4>)
 800243c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002440:	6053      	str	r3, [r2, #4]
	ADC1->CR2 		|= ADC_CR2_TSVREFE;						// Temperature sensor enable
 8002442:	4b53      	ldr	r3, [pc, #332]	; (8002590 <_Z8init_ADCv+0x2b4>)
 8002444:	689b      	ldr	r3, [r3, #8]
 8002446:	4a52      	ldr	r2, [pc, #328]	; (8002590 <_Z8init_ADCv+0x2b4>)
 8002448:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800244c:	6093      	str	r3, [r2, #8]
	ADC1->CR2 		&= ~ADC_CR2_ALIGN;						// Align result to the right
 800244e:	4b50      	ldr	r3, [pc, #320]	; (8002590 <_Z8init_ADCv+0x2b4>)
 8002450:	689b      	ldr	r3, [r3, #8]
 8002452:	4a4f      	ldr	r2, [pc, #316]	; (8002590 <_Z8init_ADCv+0x2b4>)
 8002454:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002458:	6093      	str	r3, [r2, #8]
	ADC1->CR2		|= ADC_CR2_EXTTRIG;					    // external trigger selected as event trigger for ADC
 800245a:	4b4d      	ldr	r3, [pc, #308]	; (8002590 <_Z8init_ADCv+0x2b4>)
 800245c:	689b      	ldr	r3, [r3, #8]
 800245e:	4a4c      	ldr	r2, [pc, #304]	; (8002590 <_Z8init_ADCv+0x2b4>)
 8002460:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002464:	6093      	str	r3, [r2, #8]
	ADC1->CR2		|= ADC_CR2_EXTSEL_Msk;					// SWSTART selected as external trigger for ADC
 8002466:	4b4a      	ldr	r3, [pc, #296]	; (8002590 <_Z8init_ADCv+0x2b4>)
 8002468:	689b      	ldr	r3, [r3, #8]
 800246a:	4a49      	ldr	r2, [pc, #292]	; (8002590 <_Z8init_ADCv+0x2b4>)
 800246c:	f443 2360 	orr.w	r3, r3, #917504	; 0xe0000
 8002470:	6093      	str	r3, [r2, #8]
	ADC1->CR2		|= ADC_CR2_DMA;							// DMA REQUEST ENABLE
 8002472:	4b47      	ldr	r3, [pc, #284]	; (8002590 <_Z8init_ADCv+0x2b4>)
 8002474:	689b      	ldr	r3, [r3, #8]
 8002476:	4a46      	ldr	r2, [pc, #280]	; (8002590 <_Z8init_ADCv+0x2b4>)
 8002478:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800247c:	6093      	str	r3, [r2, #8]
//	ADC1->CR2		|= ADC_CR2_CONT;						// CONT mode enabled

// CONFIGURING ADC CHANNELS SAMPLING RATE
	for(int i=0; i<SENSORS_QTY; i++)							// FOR SENSORS QUANTITY
 800247e:	2300      	movs	r3, #0
 8002480:	60bb      	str	r3, [r7, #8]
 8002482:	68bb      	ldr	r3, [r7, #8]
 8002484:	2b09      	cmp	r3, #9
 8002486:	dc29      	bgt.n	80024dc <_Z8init_ADCv+0x200>
	{
		if( (0 <= i) && (i <= 9) )								// for channels <=9 write to SMPR2
 8002488:	68bb      	ldr	r3, [r7, #8]
 800248a:	2b00      	cmp	r3, #0
 800248c:	db0e      	blt.n	80024ac <_Z8init_ADCv+0x1d0>
 800248e:	68bb      	ldr	r3, [r7, #8]
 8002490:	2b09      	cmp	r3, #9
 8002492:	dc0b      	bgt.n	80024ac <_Z8init_ADCv+0x1d0>
		{
			ADC1->SMPR2	|= 0b100 << ((i-0)*3);					// SAMPLE TIME 41.5 cycles
 8002494:	4b3e      	ldr	r3, [pc, #248]	; (8002590 <_Z8init_ADCv+0x2b4>)
 8002496:	6919      	ldr	r1, [r3, #16]
 8002498:	68ba      	ldr	r2, [r7, #8]
 800249a:	4613      	mov	r3, r2
 800249c:	005b      	lsls	r3, r3, #1
 800249e:	4413      	add	r3, r2
 80024a0:	2204      	movs	r2, #4
 80024a2:	fa02 f303 	lsl.w	r3, r2, r3
 80024a6:	4a3a      	ldr	r2, [pc, #232]	; (8002590 <_Z8init_ADCv+0x2b4>)
 80024a8:	430b      	orrs	r3, r1
 80024aa:	6113      	str	r3, [r2, #16]
		}
		if( (10 <= i) && (i <=17) )								// for channels <=17 write to SMPR1
 80024ac:	68bb      	ldr	r3, [r7, #8]
 80024ae:	2b09      	cmp	r3, #9
 80024b0:	dd10      	ble.n	80024d4 <_Z8init_ADCv+0x1f8>
 80024b2:	68bb      	ldr	r3, [r7, #8]
 80024b4:	2b11      	cmp	r3, #17
 80024b6:	dc0d      	bgt.n	80024d4 <_Z8init_ADCv+0x1f8>
		{
			ADC1->SMPR1	|= 0b100 << ((i-10)*3);					// SAMPLE TIME 41.5 cycles
 80024b8:	4b35      	ldr	r3, [pc, #212]	; (8002590 <_Z8init_ADCv+0x2b4>)
 80024ba:	68d9      	ldr	r1, [r3, #12]
 80024bc:	68bb      	ldr	r3, [r7, #8]
 80024be:	f1a3 020a 	sub.w	r2, r3, #10
 80024c2:	4613      	mov	r3, r2
 80024c4:	005b      	lsls	r3, r3, #1
 80024c6:	4413      	add	r3, r2
 80024c8:	2204      	movs	r2, #4
 80024ca:	fa02 f303 	lsl.w	r3, r2, r3
 80024ce:	4a30      	ldr	r2, [pc, #192]	; (8002590 <_Z8init_ADCv+0x2b4>)
 80024d0:	430b      	orrs	r3, r1
 80024d2:	60d3      	str	r3, [r2, #12]
	for(int i=0; i<SENSORS_QTY; i++)							// FOR SENSORS QUANTITY
 80024d4:	68bb      	ldr	r3, [r7, #8]
 80024d6:	3301      	adds	r3, #1
 80024d8:	60bb      	str	r3, [r7, #8]
 80024da:	e7d2      	b.n	8002482 <_Z8init_ADCv+0x1a6>
		}
	}

	// CONFIGURING ADC CHANNELS POLLING SEQUENCE
	for(int i=0; i<SENSORS_QTY; i++)								// FOR SENSORS QUANTITY
 80024dc:	2300      	movs	r3, #0
 80024de:	607b      	str	r3, [r7, #4]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2b09      	cmp	r3, #9
 80024e4:	f300 80c9 	bgt.w	800267a <_Z8init_ADCv+0x39e>
	{
		switch (i) {
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2b09      	cmp	r3, #9
 80024ec:	f200 80c1 	bhi.w	8002672 <_Z8init_ADCv+0x396>
 80024f0:	a201      	add	r2, pc, #4	; (adr r2, 80024f8 <_Z8init_ADCv+0x21c>)
 80024f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024f6:	bf00      	nop
 80024f8:	08002521 	.word	0x08002521
 80024fc:	0800253f 	.word	0x0800253f
 8002500:	0800255f 	.word	0x0800255f
 8002504:	08002595 	.word	0x08002595
 8002508:	080025b5 	.word	0x080025b5
 800250c:	080025d5 	.word	0x080025d5
 8002510:	080025f5 	.word	0x080025f5
 8002514:	08002613 	.word	0x08002613
 8002518:	08002633 	.word	0x08002633
 800251c:	08002653 	.word	0x08002653
			case 0:
				ADC1->SQR3  |= my_sensors[i].ADC_CHANNEL << ADC_SQR3_SQ1_Pos;	// 1-th sequential conversion
 8002520:	4b1b      	ldr	r3, [pc, #108]	; (8002590 <_Z8init_ADCv+0x2b4>)
 8002522:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002524:	4817      	ldr	r0, [pc, #92]	; (8002584 <_Z8init_ADCv+0x2a8>)
 8002526:	687a      	ldr	r2, [r7, #4]
 8002528:	4613      	mov	r3, r2
 800252a:	00db      	lsls	r3, r3, #3
 800252c:	1a9b      	subs	r3, r3, r2
 800252e:	00db      	lsls	r3, r3, #3
 8002530:	4403      	add	r3, r0
 8002532:	3314      	adds	r3, #20
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4a16      	ldr	r2, [pc, #88]	; (8002590 <_Z8init_ADCv+0x2b4>)
 8002538:	430b      	orrs	r3, r1
 800253a:	6353      	str	r3, [r2, #52]	; 0x34
				break;
 800253c:	e099      	b.n	8002672 <_Z8init_ADCv+0x396>
			case 1:
				ADC1->SQR3  |= my_sensors[i].ADC_CHANNEL << ADC_SQR3_SQ2_Pos;	// 2-th sequential conversion
 800253e:	4b14      	ldr	r3, [pc, #80]	; (8002590 <_Z8init_ADCv+0x2b4>)
 8002540:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002542:	4810      	ldr	r0, [pc, #64]	; (8002584 <_Z8init_ADCv+0x2a8>)
 8002544:	687a      	ldr	r2, [r7, #4]
 8002546:	4613      	mov	r3, r2
 8002548:	00db      	lsls	r3, r3, #3
 800254a:	1a9b      	subs	r3, r3, r2
 800254c:	00db      	lsls	r3, r3, #3
 800254e:	4403      	add	r3, r0
 8002550:	3314      	adds	r3, #20
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	015b      	lsls	r3, r3, #5
 8002556:	4a0e      	ldr	r2, [pc, #56]	; (8002590 <_Z8init_ADCv+0x2b4>)
 8002558:	430b      	orrs	r3, r1
 800255a:	6353      	str	r3, [r2, #52]	; 0x34
				break;
 800255c:	e089      	b.n	8002672 <_Z8init_ADCv+0x396>
			case 2:
				ADC1->SQR3  |= my_sensors[i].ADC_CHANNEL << ADC_SQR3_SQ3_Pos;	// 3-th sequential conversion
 800255e:	4b0c      	ldr	r3, [pc, #48]	; (8002590 <_Z8init_ADCv+0x2b4>)
 8002560:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002562:	4808      	ldr	r0, [pc, #32]	; (8002584 <_Z8init_ADCv+0x2a8>)
 8002564:	687a      	ldr	r2, [r7, #4]
 8002566:	4613      	mov	r3, r2
 8002568:	00db      	lsls	r3, r3, #3
 800256a:	1a9b      	subs	r3, r3, r2
 800256c:	00db      	lsls	r3, r3, #3
 800256e:	4403      	add	r3, r0
 8002570:	3314      	adds	r3, #20
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	029b      	lsls	r3, r3, #10
 8002576:	4a06      	ldr	r2, [pc, #24]	; (8002590 <_Z8init_ADCv+0x2b4>)
 8002578:	430b      	orrs	r3, r1
 800257a:	6353      	str	r3, [r2, #52]	; 0x34
				break;
 800257c:	e079      	b.n	8002672 <_Z8init_ADCv+0x396>
 800257e:	bf00      	nop
 8002580:	40021000 	.word	0x40021000
 8002584:	20000048 	.word	0x20000048
 8002588:	40010800 	.word	0x40010800
 800258c:	40010c00 	.word	0x40010c00
 8002590:	40012400 	.word	0x40012400
			case 3:
				ADC1->SQR3  |= my_sensors[i].ADC_CHANNEL << ADC_SQR3_SQ4_Pos;	// 4-th sequential conversion
 8002594:	4b54      	ldr	r3, [pc, #336]	; (80026e8 <_Z8init_ADCv+0x40c>)
 8002596:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002598:	4854      	ldr	r0, [pc, #336]	; (80026ec <_Z8init_ADCv+0x410>)
 800259a:	687a      	ldr	r2, [r7, #4]
 800259c:	4613      	mov	r3, r2
 800259e:	00db      	lsls	r3, r3, #3
 80025a0:	1a9b      	subs	r3, r3, r2
 80025a2:	00db      	lsls	r3, r3, #3
 80025a4:	4403      	add	r3, r0
 80025a6:	3314      	adds	r3, #20
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	03db      	lsls	r3, r3, #15
 80025ac:	4a4e      	ldr	r2, [pc, #312]	; (80026e8 <_Z8init_ADCv+0x40c>)
 80025ae:	430b      	orrs	r3, r1
 80025b0:	6353      	str	r3, [r2, #52]	; 0x34
				break;
 80025b2:	e05e      	b.n	8002672 <_Z8init_ADCv+0x396>
			case 4:
				ADC1->SQR3  |= my_sensors[i].ADC_CHANNEL << ADC_SQR3_SQ5_Pos;	// 5-th sequential conversion
 80025b4:	4b4c      	ldr	r3, [pc, #304]	; (80026e8 <_Z8init_ADCv+0x40c>)
 80025b6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80025b8:	484c      	ldr	r0, [pc, #304]	; (80026ec <_Z8init_ADCv+0x410>)
 80025ba:	687a      	ldr	r2, [r7, #4]
 80025bc:	4613      	mov	r3, r2
 80025be:	00db      	lsls	r3, r3, #3
 80025c0:	1a9b      	subs	r3, r3, r2
 80025c2:	00db      	lsls	r3, r3, #3
 80025c4:	4403      	add	r3, r0
 80025c6:	3314      	adds	r3, #20
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	051b      	lsls	r3, r3, #20
 80025cc:	4a46      	ldr	r2, [pc, #280]	; (80026e8 <_Z8init_ADCv+0x40c>)
 80025ce:	430b      	orrs	r3, r1
 80025d0:	6353      	str	r3, [r2, #52]	; 0x34
				break;
 80025d2:	e04e      	b.n	8002672 <_Z8init_ADCv+0x396>
			case 5:
				ADC1->SQR3  |= my_sensors[i].ADC_CHANNEL << ADC_SQR3_SQ6_Pos;	// 6-th sequential conversion
 80025d4:	4b44      	ldr	r3, [pc, #272]	; (80026e8 <_Z8init_ADCv+0x40c>)
 80025d6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80025d8:	4844      	ldr	r0, [pc, #272]	; (80026ec <_Z8init_ADCv+0x410>)
 80025da:	687a      	ldr	r2, [r7, #4]
 80025dc:	4613      	mov	r3, r2
 80025de:	00db      	lsls	r3, r3, #3
 80025e0:	1a9b      	subs	r3, r3, r2
 80025e2:	00db      	lsls	r3, r3, #3
 80025e4:	4403      	add	r3, r0
 80025e6:	3314      	adds	r3, #20
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	065b      	lsls	r3, r3, #25
 80025ec:	4a3e      	ldr	r2, [pc, #248]	; (80026e8 <_Z8init_ADCv+0x40c>)
 80025ee:	430b      	orrs	r3, r1
 80025f0:	6353      	str	r3, [r2, #52]	; 0x34
				break;
 80025f2:	e03e      	b.n	8002672 <_Z8init_ADCv+0x396>
			case 6:
				ADC1->SQR2  |= my_sensors[i].ADC_CHANNEL << ADC_SQR2_SQ7_Pos;	// 7-th sequential conversion
 80025f4:	4b3c      	ldr	r3, [pc, #240]	; (80026e8 <_Z8init_ADCv+0x40c>)
 80025f6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80025f8:	483c      	ldr	r0, [pc, #240]	; (80026ec <_Z8init_ADCv+0x410>)
 80025fa:	687a      	ldr	r2, [r7, #4]
 80025fc:	4613      	mov	r3, r2
 80025fe:	00db      	lsls	r3, r3, #3
 8002600:	1a9b      	subs	r3, r3, r2
 8002602:	00db      	lsls	r3, r3, #3
 8002604:	4403      	add	r3, r0
 8002606:	3314      	adds	r3, #20
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4a37      	ldr	r2, [pc, #220]	; (80026e8 <_Z8init_ADCv+0x40c>)
 800260c:	430b      	orrs	r3, r1
 800260e:	6313      	str	r3, [r2, #48]	; 0x30
				break;
 8002610:	e02f      	b.n	8002672 <_Z8init_ADCv+0x396>
			case 7:
				ADC1->SQR2  |= my_sensors[i].ADC_CHANNEL << ADC_SQR2_SQ8_Pos;	// 8-th sequential conversion
 8002612:	4b35      	ldr	r3, [pc, #212]	; (80026e8 <_Z8init_ADCv+0x40c>)
 8002614:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002616:	4835      	ldr	r0, [pc, #212]	; (80026ec <_Z8init_ADCv+0x410>)
 8002618:	687a      	ldr	r2, [r7, #4]
 800261a:	4613      	mov	r3, r2
 800261c:	00db      	lsls	r3, r3, #3
 800261e:	1a9b      	subs	r3, r3, r2
 8002620:	00db      	lsls	r3, r3, #3
 8002622:	4403      	add	r3, r0
 8002624:	3314      	adds	r3, #20
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	015b      	lsls	r3, r3, #5
 800262a:	4a2f      	ldr	r2, [pc, #188]	; (80026e8 <_Z8init_ADCv+0x40c>)
 800262c:	430b      	orrs	r3, r1
 800262e:	6313      	str	r3, [r2, #48]	; 0x30
				break;
 8002630:	e01f      	b.n	8002672 <_Z8init_ADCv+0x396>
			case 8:
				ADC1->SQR2  |= my_sensors[i].ADC_CHANNEL << ADC_SQR2_SQ9_Pos;	// 9-th sequential conversion
 8002632:	4b2d      	ldr	r3, [pc, #180]	; (80026e8 <_Z8init_ADCv+0x40c>)
 8002634:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002636:	482d      	ldr	r0, [pc, #180]	; (80026ec <_Z8init_ADCv+0x410>)
 8002638:	687a      	ldr	r2, [r7, #4]
 800263a:	4613      	mov	r3, r2
 800263c:	00db      	lsls	r3, r3, #3
 800263e:	1a9b      	subs	r3, r3, r2
 8002640:	00db      	lsls	r3, r3, #3
 8002642:	4403      	add	r3, r0
 8002644:	3314      	adds	r3, #20
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	029b      	lsls	r3, r3, #10
 800264a:	4a27      	ldr	r2, [pc, #156]	; (80026e8 <_Z8init_ADCv+0x40c>)
 800264c:	430b      	orrs	r3, r1
 800264e:	6313      	str	r3, [r2, #48]	; 0x30
				break;
 8002650:	e00f      	b.n	8002672 <_Z8init_ADCv+0x396>
			case 9:
				ADC1->SQR2  |= my_sensors[i].ADC_CHANNEL << ADC_SQR2_SQ10_Pos;	// 10-th sequential conversion
 8002652:	4b25      	ldr	r3, [pc, #148]	; (80026e8 <_Z8init_ADCv+0x40c>)
 8002654:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002656:	4825      	ldr	r0, [pc, #148]	; (80026ec <_Z8init_ADCv+0x410>)
 8002658:	687a      	ldr	r2, [r7, #4]
 800265a:	4613      	mov	r3, r2
 800265c:	00db      	lsls	r3, r3, #3
 800265e:	1a9b      	subs	r3, r3, r2
 8002660:	00db      	lsls	r3, r3, #3
 8002662:	4403      	add	r3, r0
 8002664:	3314      	adds	r3, #20
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	03db      	lsls	r3, r3, #15
 800266a:	4a1f      	ldr	r2, [pc, #124]	; (80026e8 <_Z8init_ADCv+0x40c>)
 800266c:	430b      	orrs	r3, r1
 800266e:	6313      	str	r3, [r2, #48]	; 0x30
				break;
 8002670:	bf00      	nop
	for(int i=0; i<SENSORS_QTY; i++)								// FOR SENSORS QUANTITY
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	3301      	adds	r3, #1
 8002676:	607b      	str	r3, [r7, #4]
 8002678:	e732      	b.n	80024e0 <_Z8init_ADCv+0x204>
//			ADC1->SQR1  |= my_sensors[i].ADC_CHANNEL << ((i-13)*5);
//		}
	}

// CONFIGURING SEQUENCE LENGTH
	ADC1->SQR1 |= ((SENSORS_QTY - 1) << ADC_SQR1_L_Pos);	// AMOUNT OF ADC CONVERTIONS
 800267a:	4b1b      	ldr	r3, [pc, #108]	; (80026e8 <_Z8init_ADCv+0x40c>)
 800267c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800267e:	4a1a      	ldr	r2, [pc, #104]	; (80026e8 <_Z8init_ADCv+0x40c>)
 8002680:	f443 0310 	orr.w	r3, r3, #9437184	; 0x900000
 8002684:	62d3      	str	r3, [r2, #44]	; 0x2c
// value in SQR1_L register part should be by -1 smaller, as ZERO corresponds to single conversion.

// LAUNCH ADC FIRST TIME
	ADC1->CR2 |= ADC_CR2_ADON;								// turn-on ADC
 8002686:	4b18      	ldr	r3, [pc, #96]	; (80026e8 <_Z8init_ADCv+0x40c>)
 8002688:	689b      	ldr	r3, [r3, #8]
 800268a:	4a17      	ldr	r2, [pc, #92]	; (80026e8 <_Z8init_ADCv+0x40c>)
 800268c:	f043 0301 	orr.w	r3, r3, #1
 8002690:	6093      	str	r3, [r2, #8]

// ADC CALIBRATION START
	volatile int i=1000000;
 8002692:	4b17      	ldr	r3, [pc, #92]	; (80026f0 <_Z8init_ADCv+0x414>)
 8002694:	603b      	str	r3, [r7, #0]
	while(i>0)
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	2b00      	cmp	r3, #0
 800269a:	bfcc      	ite	gt
 800269c:	2301      	movgt	r3, #1
 800269e:	2300      	movle	r3, #0
 80026a0:	b2db      	uxtb	r3, r3
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d003      	beq.n	80026ae <_Z8init_ADCv+0x3d2>
	{
		i--;
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	3b01      	subs	r3, #1
 80026aa:	603b      	str	r3, [r7, #0]
	while(i>0)
 80026ac:	e7f3      	b.n	8002696 <_Z8init_ADCv+0x3ba>
	}
	ADC1->CR2 |= ADC_CR2_CAL;
 80026ae:	4b0e      	ldr	r3, [pc, #56]	; (80026e8 <_Z8init_ADCv+0x40c>)
 80026b0:	689b      	ldr	r3, [r3, #8]
 80026b2:	4a0d      	ldr	r2, [pc, #52]	; (80026e8 <_Z8init_ADCv+0x40c>)
 80026b4:	f043 0304 	orr.w	r3, r3, #4
 80026b8:	6093      	str	r3, [r2, #8]
	while ((ADC1->CR2 & ADC_CR2_CAL) != 0);
 80026ba:	4b0b      	ldr	r3, [pc, #44]	; (80026e8 <_Z8init_ADCv+0x40c>)
 80026bc:	689b      	ldr	r3, [r3, #8]
 80026be:	f003 0304 	and.w	r3, r3, #4
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	bf14      	ite	ne
 80026c6:	2301      	movne	r3, #1
 80026c8:	2300      	moveq	r3, #0
 80026ca:	b2db      	uxtb	r3, r3
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d000      	beq.n	80026d2 <_Z8init_ADCv+0x3f6>
 80026d0:	e7f3      	b.n	80026ba <_Z8init_ADCv+0x3de>
	// ADC CALIBRATION FINISH

    ADC1->CR2   |= ADC_CR2_ADON;	  	// SET ADON to ENABLE ADC SECOND TIME
 80026d2:	4b05      	ldr	r3, [pc, #20]	; (80026e8 <_Z8init_ADCv+0x40c>)
 80026d4:	689b      	ldr	r3, [r3, #8]
 80026d6:	4a04      	ldr	r2, [pc, #16]	; (80026e8 <_Z8init_ADCv+0x40c>)
 80026d8:	f043 0301 	orr.w	r3, r3, #1
 80026dc:	6093      	str	r3, [r2, #8]
}
 80026de:	bf00      	nop
 80026e0:	3714      	adds	r7, #20
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bc80      	pop	{r7}
 80026e6:	4770      	bx	lr
 80026e8:	40012400 	.word	0x40012400
 80026ec:	20000048 	.word	0x20000048
 80026f0:	000f4240 	.word	0x000f4240

080026f4 <_Z10init_USARTv>:
//////////////////////////////////////////////////////////////////////////////////////////////////////////////
void init_USART(){	// USART 3 IS USED
 80026f4:	b480      	push	{r7}
 80026f6:	af00      	add	r7, sp, #0
//	UART INTERNAL CLOCK IS 32MHz
	RCC->APB1ENR |= RCC_APB1ENR_USART3EN;	// USART 3 CLOCK ENABLE
 80026f8:	4b1e      	ldr	r3, [pc, #120]	; (8002774 <_Z10init_USARTv+0x80>)
 80026fa:	69db      	ldr	r3, [r3, #28]
 80026fc:	4a1d      	ldr	r2, [pc, #116]	; (8002774 <_Z10init_USARTv+0x80>)
 80026fe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002702:	61d3      	str	r3, [r2, #28]
	RCC->APB2ENR |= RCC_APB2ENR_IOPBEN;	    // GPIOB CLOCK ENABLE FOR UART PURPOSE
 8002704:	4b1b      	ldr	r3, [pc, #108]	; (8002774 <_Z10init_USARTv+0x80>)
 8002706:	699b      	ldr	r3, [r3, #24]
 8002708:	4a1a      	ldr	r2, [pc, #104]	; (8002774 <_Z10init_USARTv+0x80>)
 800270a:	f043 0308 	orr.w	r3, r3, #8
 800270e:	6193      	str	r3, [r2, #24]
//	TXD3 -> PB10, ALTERNATE FUNCTION OUTPUT WITH P-P
	GPIOB->CRH	 &= ~GPIO_CRH_CNF10_Msk;	// GPIOB.10, CLEARING CNF10[] BITS
 8002710:	4b19      	ldr	r3, [pc, #100]	; (8002778 <_Z10init_USARTv+0x84>)
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	4a18      	ldr	r2, [pc, #96]	; (8002778 <_Z10init_USARTv+0x84>)
 8002716:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800271a:	6053      	str	r3, [r2, #4]
	GPIOB->CRH	 |=	GPIO_CRH_CNF10_1;		// GPIOB.10, SET CNF10[1:0] (Alternate function output Push-pull)
 800271c:	4b16      	ldr	r3, [pc, #88]	; (8002778 <_Z10init_USARTv+0x84>)
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	4a15      	ldr	r2, [pc, #84]	; (8002778 <_Z10init_USARTv+0x84>)
 8002722:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002726:	6053      	str	r3, [r2, #4]
	GPIOB->CRH	 &= ~GPIO_CRH_MODE10_Msk;	// GPIOB.10, CLEARING MODE10[] BITS
 8002728:	4b13      	ldr	r3, [pc, #76]	; (8002778 <_Z10init_USARTv+0x84>)
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	4a12      	ldr	r2, [pc, #72]	; (8002778 <_Z10init_USARTv+0x84>)
 800272e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002732:	6053      	str	r3, [r2, #4]
	GPIOB->CRH 	 |= GPIO_CRH_MODE10_1;		// GPIOB.10, SET MODE10[1:0] (Output mode PP, max speed 2 MHz)
 8002734:	4b10      	ldr	r3, [pc, #64]	; (8002778 <_Z10init_USARTv+0x84>)
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	4a0f      	ldr	r2, [pc, #60]	; (8002778 <_Z10init_USARTv+0x84>)
 800273a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800273e:	6053      	str	r3, [r2, #4]

//	UART CONFIGURATION
	USART3->CR1	 |= USART_CR1_UE;			// ENABLE USART1 MODULE
 8002740:	4b0e      	ldr	r3, [pc, #56]	; (800277c <_Z10init_USARTv+0x88>)
 8002742:	68db      	ldr	r3, [r3, #12]
 8002744:	4a0d      	ldr	r2, [pc, #52]	; (800277c <_Z10init_USARTv+0x88>)
 8002746:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800274a:	60d3      	str	r3, [r2, #12]
	USART3->BRR   = 208 << 4;				// (32MHz/(16*9600BAUD))=208
 800274c:	4b0b      	ldr	r3, [pc, #44]	; (800277c <_Z10init_USARTv+0x88>)
 800274e:	f44f 6250 	mov.w	r2, #3328	; 0xd00
 8002752:	609a      	str	r2, [r3, #8]
	USART3->CR1  |= USART_CR1_TE;			// ENABLE TRANSMITTER
 8002754:	4b09      	ldr	r3, [pc, #36]	; (800277c <_Z10init_USARTv+0x88>)
 8002756:	68db      	ldr	r3, [r3, #12]
 8002758:	4a08      	ldr	r2, [pc, #32]	; (800277c <_Z10init_USARTv+0x88>)
 800275a:	f043 0308 	orr.w	r3, r3, #8
 800275e:	60d3      	str	r3, [r2, #12]
//	USART3->CR2	 |= USART_CR1_RE;			// ENABLE RECEIVER
	USART3->CR2   = 0;						//
 8002760:	4b06      	ldr	r3, [pc, #24]	; (800277c <_Z10init_USARTv+0x88>)
 8002762:	2200      	movs	r2, #0
 8002764:	611a      	str	r2, [r3, #16]
	USART3->CR3   = 0;
 8002766:	4b05      	ldr	r3, [pc, #20]	; (800277c <_Z10init_USARTv+0x88>)
 8002768:	2200      	movs	r2, #0
 800276a:	615a      	str	r2, [r3, #20]
}
 800276c:	bf00      	nop
 800276e:	46bd      	mov	sp, r7
 8002770:	bc80      	pop	{r7}
 8002772:	4770      	bx	lr
 8002774:	40021000 	.word	0x40021000
 8002778:	40010c00 	.word	0x40010c00
 800277c:	40004800 	.word	0x40004800

08002780 <_Z8init_DMAv>:
//////////////////////////////////////////////////////////////////////////////////////////////////////////////
void init_DMA(){
 8002780:	b480      	push	{r7}
 8002782:	af00      	add	r7, sp, #0
//	extern volatile uint32_t global_ADC_DMA_BUFFER[];
	extern volatile ADC_dump_struct ADC_DATA_DUMP;
	RCC->AHBENR 		 |= RCC_AHBENR_DMA1EN;				// DMA CHANNEL 1 CLOCK ANABLE
 8002784:	4b1b      	ldr	r3, [pc, #108]	; (80027f4 <_Z8init_DMAv+0x74>)
 8002786:	695b      	ldr	r3, [r3, #20]
 8002788:	4a1a      	ldr	r2, [pc, #104]	; (80027f4 <_Z8init_DMAv+0x74>)
 800278a:	f043 0301 	orr.w	r3, r3, #1
 800278e:	6153      	str	r3, [r2, #20]
	DMA1_Channel1->CMAR   = (uint32_t)ADC_DATA_DUMP.ADC_DMA_buffer_array;// GLOBAL VARIABLE ADRESS TO THE CMAR REGISTER
 8002790:	4b19      	ldr	r3, [pc, #100]	; (80027f8 <_Z8init_DMAv+0x78>)
 8002792:	4a1a      	ldr	r2, [pc, #104]	; (80027fc <_Z8init_DMAv+0x7c>)
 8002794:	60da      	str	r2, [r3, #12]
	DMA1_Channel1->CPAR   = (uint32_t)(&ADC1->DR);			// ADC1 DATA REGISTER TO THE CPAR REGISTER. ADC START ADDRESS 0x4001 2400, DR FFSET 0x4001 27FF
 8002796:	4b18      	ldr	r3, [pc, #96]	; (80027f8 <_Z8init_DMAv+0x78>)
 8002798:	4a19      	ldr	r2, [pc, #100]	; (8002800 <_Z8init_DMAv+0x80>)
 800279a:	609a      	str	r2, [r3, #8]
 	DMA1_Channel1->CNDTR  = SENSORS_QTY;				// NUMBER DATA TO BE TRANSFERRED
 800279c:	4b16      	ldr	r3, [pc, #88]	; (80027f8 <_Z8init_DMAv+0x78>)
 800279e:	220a      	movs	r2, #10
 80027a0:	605a      	str	r2, [r3, #4]
 	DMA1_Channel1->CCR	 |= DMA_CCR_MSIZE_1;				// MEMORY SIZE 32BIT
 80027a2:	4b15      	ldr	r3, [pc, #84]	; (80027f8 <_Z8init_DMAv+0x78>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4a14      	ldr	r2, [pc, #80]	; (80027f8 <_Z8init_DMAv+0x78>)
 80027a8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80027ac:	6013      	str	r3, [r2, #0]
	DMA1_Channel1->CCR	 |= DMA_CCR_PSIZE_1;				// PERYPH SIZE 32BIT
 80027ae:	4b12      	ldr	r3, [pc, #72]	; (80027f8 <_Z8init_DMAv+0x78>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4a11      	ldr	r2, [pc, #68]	; (80027f8 <_Z8init_DMAv+0x78>)
 80027b4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80027b8:	6013      	str	r3, [r2, #0]
	DMA1_Channel1->CCR	 |= DMA_CCR_MINC;					// MEMORY INCREMENT MODE ENABLED
 80027ba:	4b0f      	ldr	r3, [pc, #60]	; (80027f8 <_Z8init_DMAv+0x78>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4a0e      	ldr	r2, [pc, #56]	; (80027f8 <_Z8init_DMAv+0x78>)
 80027c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027c4:	6013      	str	r3, [r2, #0]
	DMA1_Channel1->CCR	 |= DMA_CCR_TCIE;					// TRANSFER COMPLETE INTERRUPT ENABLE
 80027c6:	4b0c      	ldr	r3, [pc, #48]	; (80027f8 <_Z8init_DMAv+0x78>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4a0b      	ldr	r2, [pc, #44]	; (80027f8 <_Z8init_DMAv+0x78>)
 80027cc:	f043 0302 	orr.w	r3, r3, #2
 80027d0:	6013      	str	r3, [r2, #0]
//	DMA1_Channel1->CCR	 |= DMA_CCR_HTIE;
	DMA1_Channel1->CCR	 |= DMA_CCR_CIRC;					// CICULAR MODE ENABLED
 80027d2:	4b09      	ldr	r3, [pc, #36]	; (80027f8 <_Z8init_DMAv+0x78>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4a08      	ldr	r2, [pc, #32]	; (80027f8 <_Z8init_DMAv+0x78>)
 80027d8:	f043 0320 	orr.w	r3, r3, #32
 80027dc:	6013      	str	r3, [r2, #0]
	DMA1_Channel1->CCR	 |= DMA_CCR_EN;						// CHANNEL 1 ENABLE
 80027de:	4b06      	ldr	r3, [pc, #24]	; (80027f8 <_Z8init_DMAv+0x78>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4a05      	ldr	r2, [pc, #20]	; (80027f8 <_Z8init_DMAv+0x78>)
 80027e4:	f043 0301 	orr.w	r3, r3, #1
 80027e8:	6013      	str	r3, [r2, #0]
}
 80027ea:	bf00      	nop
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bc80      	pop	{r7}
 80027f0:	4770      	bx	lr
 80027f2:	bf00      	nop
 80027f4:	40021000 	.word	0x40021000
 80027f8:	40020008 	.word	0x40020008
 80027fc:	20000468 	.word	0x20000468
 8002800:	4001244c 	.word	0x4001244c

08002804 <_Z9init_TIM2i>:
///////////////////////////////////////////////////////////////////////////////////////
void init_TIM2(int overflow_time_in_ms){
 8002804:	b590      	push	{r4, r7, lr}
 8002806:	b085      	sub	sp, #20
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
	RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;			// ACTIVATE CLOCK FOR TIM2
 800280c:	4b2c      	ldr	r3, [pc, #176]	; (80028c0 <_Z9init_TIM2i+0xbc>)
 800280e:	69db      	ldr	r3, [r3, #28]
 8002810:	4a2b      	ldr	r2, [pc, #172]	; (80028c0 <_Z9init_TIM2i+0xbc>)
 8002812:	f043 0301 	orr.w	r3, r3, #1
 8002816:	61d3      	str	r3, [r2, #28]
	float TIM2_ARR_VALUE  = 0;
 8002818:	f04f 0300 	mov.w	r3, #0
 800281c:	60bb      	str	r3, [r7, #8]
	float TIM2_PRESCALLER = 0;
 800281e:	f04f 0300 	mov.w	r3, #0
 8002822:	60fb      	str	r3, [r7, #12]
	do
	{
		TIM2_PRESCALLER++;
 8002824:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8002828:	68f8      	ldr	r0, [r7, #12]
 800282a:	f7fe f875 	bl	8000918 <__addsf3>
 800282e:	4603      	mov	r3, r0
 8002830:	60fb      	str	r3, [r7, #12]
		TIM2_ARR_VALUE = ( (float)overflow_time_in_ms/1000 )*( (float)(SysClock/TIM2_PRESCALLER) );
 8002832:	6878      	ldr	r0, [r7, #4]
 8002834:	f7fe f924 	bl	8000a80 <__aeabi_i2f>
 8002838:	4603      	mov	r3, r0
 800283a:	4922      	ldr	r1, [pc, #136]	; (80028c4 <_Z9init_TIM2i+0xc0>)
 800283c:	4618      	mov	r0, r3
 800283e:	f7fe fa27 	bl	8000c90 <__aeabi_fdiv>
 8002842:	4603      	mov	r3, r0
 8002844:	461c      	mov	r4, r3
 8002846:	68f9      	ldr	r1, [r7, #12]
 8002848:	481f      	ldr	r0, [pc, #124]	; (80028c8 <_Z9init_TIM2i+0xc4>)
 800284a:	f7fe fa21 	bl	8000c90 <__aeabi_fdiv>
 800284e:	4603      	mov	r3, r0
 8002850:	4619      	mov	r1, r3
 8002852:	4620      	mov	r0, r4
 8002854:	f7fe f968 	bl	8000b28 <__aeabi_fmul>
 8002858:	4603      	mov	r3, r0
 800285a:	60bb      	str	r3, [r7, #8]
	}while(TIM2_ARR_VALUE > 65535);				// CHECK WHETHER VALUE LESS THAN (2^16-1)
 800285c:	491b      	ldr	r1, [pc, #108]	; (80028cc <_Z9init_TIM2i+0xc8>)
 800285e:	68b8      	ldr	r0, [r7, #8]
 8002860:	f7fe fb1e 	bl	8000ea0 <__aeabi_fcmpgt>
 8002864:	4603      	mov	r3, r0
 8002866:	2b00      	cmp	r3, #0
 8002868:	d000      	beq.n	800286c <_Z9init_TIM2i+0x68>
	do
 800286a:	e7db      	b.n	8002824 <_Z9init_TIM2i+0x20>
	TIM2->PSC	  = TIM2_PRESCALLER ;			// TIMER CLOCK FREQUENCY IS SysClk/(x+1)
 800286c:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 8002870:	68f8      	ldr	r0, [r7, #12]
 8002872:	f7fe fb1f 	bl	8000eb4 <__aeabi_f2uiz>
 8002876:	4603      	mov	r3, r0
 8002878:	62a3      	str	r3, [r4, #40]	; 0x28
	TIM2->ARR	  = TIM2_ARR_VALUE;				// OVERFLOW PERIOD LOADING
 800287a:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 800287e:	68b8      	ldr	r0, [r7, #8]
 8002880:	f7fe fb18 	bl	8000eb4 <__aeabi_f2uiz>
 8002884:	4603      	mov	r3, r0
 8002886:	62e3      	str	r3, [r4, #44]	; 0x2c
	TIM2->CR1    |= TIM_CR1_URS;				// TIMER OVERFLOW GENERATES UPDATE INTERRUPT
 8002888:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002892:	f043 0304 	orr.w	r3, r3, #4
 8002896:	6013      	str	r3, [r2, #0]
	TIM2->DIER   |= TIM_DIER_UIE;				// UPDATE INTERRUPT ENABLE
 8002898:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800289c:	68db      	ldr	r3, [r3, #12]
 800289e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80028a2:	f043 0301 	orr.w	r3, r3, #1
 80028a6:	60d3      	str	r3, [r2, #12]
	TIM2->CR1    |= TIM_CR1_CEN;				// ENABLE TIMER TIM2
 80028a8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80028b2:	f043 0301 	orr.w	r3, r3, #1
 80028b6:	6013      	str	r3, [r2, #0]
}
 80028b8:	bf00      	nop
 80028ba:	3714      	adds	r7, #20
 80028bc:	46bd      	mov	sp, r7
 80028be:	bd90      	pop	{r4, r7, pc}
 80028c0:	40021000 	.word	0x40021000
 80028c4:	447a0000 	.word	0x447a0000
 80028c8:	4c371b00 	.word	0x4c371b00
 80028cc:	477fff00 	.word	0x477fff00

080028d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028d0:	b480      	push	{r7}
 80028d2:	b083      	sub	sp, #12
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	4603      	mov	r3, r0
 80028d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	db0b      	blt.n	80028fa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80028e2:	79fb      	ldrb	r3, [r7, #7]
 80028e4:	f003 021f 	and.w	r2, r3, #31
 80028e8:	4906      	ldr	r1, [pc, #24]	; (8002904 <__NVIC_EnableIRQ+0x34>)
 80028ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028ee:	095b      	lsrs	r3, r3, #5
 80028f0:	2001      	movs	r0, #1
 80028f2:	fa00 f202 	lsl.w	r2, r0, r2
 80028f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80028fa:	bf00      	nop
 80028fc:	370c      	adds	r7, #12
 80028fe:	46bd      	mov	sp, r7
 8002900:	bc80      	pop	{r7}
 8002902:	4770      	bx	lr
 8002904:	e000e100 	.word	0xe000e100

08002908 <_ZNSt8__detail17_List_node_headerC1Ev>:
      _List_node_header() _GLIBCXX_NOEXCEPT
 8002908:	b580      	push	{r7, lr}
 800290a:	b082      	sub	sp, #8
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
      { _M_init(); }
 8002910:	6878      	ldr	r0, [r7, #4]
 8002912:	f000 f805 	bl	8002920 <_ZNSt8__detail17_List_node_header7_M_initEv>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	4618      	mov	r0, r3
 800291a:	3708      	adds	r7, #8
 800291c:	46bd      	mov	sp, r7
 800291e:	bd80      	pop	{r7, pc}

08002920 <_ZNSt8__detail17_List_node_header7_M_initEv>:
      _M_init() _GLIBCXX_NOEXCEPT
 8002920:	b480      	push	{r7}
 8002922:	b083      	sub	sp, #12
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
	this->_M_next = this->_M_prev = this;
 8002928:	687a      	ldr	r2, [r7, #4]
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	605a      	str	r2, [r3, #4]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	685a      	ldr	r2, [r3, #4]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	601a      	str	r2, [r3, #0]
	this->_M_size = 0;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2200      	movs	r2, #0
 800293a:	609a      	str	r2, [r3, #8]
      }
 800293c:	bf00      	nop
 800293e:	370c      	adds	r7, #12
 8002940:	46bd      	mov	sp, r7
 8002942:	bc80      	pop	{r7}
 8002944:	4770      	bx	lr

08002946 <_ZN15ADC_dump_structC1Ev>:

typedef struct{
	uint32_t ADC_DMA_buffer_array[AVERAGING_RATIO][SENSORS_QTY]={0};
	uint32_t averaging_step;
	bool	 ADC_DATA_READY;
}ADC_dump_struct;
 8002946:	b580      	push	{r7, lr}
 8002948:	b082      	sub	sp, #8
 800294a:	af00      	add	r7, sp, #0
 800294c:	6078      	str	r0, [r7, #4]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	4618      	mov	r0, r3
 8002952:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8002956:	461a      	mov	r2, r3
 8002958:	2100      	movs	r1, #0
 800295a:	f000 ff21 	bl	80037a0 <memset>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	4618      	mov	r0, r3
 8002962:	3708      	adds	r7, #8
 8002964:	46bd      	mov	sp, r7
 8002966:	bd80      	pop	{r7, pc}

08002968 <_ZNSt7__cxx114listIiSaIiEED1Ev>:
      ~list() = default;
 8002968:	b580      	push	{r7, lr}
 800296a:	b082      	sub	sp, #8
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	4618      	mov	r0, r3
 8002974:	f000 f930 	bl	8002bd8 <_ZNSt7__cxx1110_List_baseIiSaIiEED1Ev>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	4618      	mov	r0, r3
 800297c:	3708      	adds	r7, #8
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}
	...

08002984 <SysTick_Handler>:
//Trigger trigger_1000ms(1000);										// CREATING CLASS "TRIGGER" instance, with argument "500ms"

///////////////////////////////////////////////////////////////////////////////////////
// HANDLERS START HERE/////////////////////////////////////
extern "C" void SysTick_Handler(void)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	af00      	add	r7, sp, #0
	if(global_SysTick_Cnt>0){
 8002988:	4b09      	ldr	r3, [pc, #36]	; (80029b0 <SysTick_Handler+0x2c>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	2b00      	cmp	r3, #0
 800298e:	bf14      	ite	ne
 8002990:	2301      	movne	r3, #1
 8002992:	2300      	moveq	r3, #0
 8002994:	b2db      	uxtb	r3, r3
 8002996:	2b00      	cmp	r3, #0
 8002998:	d004      	beq.n	80029a4 <SysTick_Handler+0x20>
		global_SysTick_Cnt--;
 800299a:	4b05      	ldr	r3, [pc, #20]	; (80029b0 <SysTick_Handler+0x2c>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	3b01      	subs	r3, #1
 80029a0:	4a03      	ldr	r2, [pc, #12]	; (80029b0 <SysTick_Handler+0x2c>)
 80029a2:	6013      	str	r3, [r2, #0]
	}
	my_delays_set.delay_update();	// updates class managing time delays
 80029a4:	4803      	ldr	r0, [pc, #12]	; (80029b4 <SysTick_Handler+0x30>)
 80029a6:	f7fe fd80 	bl	80014aa <_ZN5Delay12delay_updateEv>
//	trigger_0001ms.trigger_update();	// ping trigger
//	trigger_0010ms.trigger_update();	// ping trigger
//	trigger_0100ms.trigger_update();	// ping trigger
//	trigger_0500ms.trigger_update();	// ping trigger
//	trigger_1000ms.trigger_update();	// ping trigger
}
 80029aa:	bf00      	nop
 80029ac:	bd80      	pop	{r7, pc}
 80029ae:	bf00      	nop
 80029b0:	20000464 	.word	0x20000464
 80029b4:	2000063c 	.word	0x2000063c

080029b8 <ADC1_2_IRQHandler>:

extern "C" void ADC1_2_IRQHandler(void)
{
 80029b8:	b480      	push	{r7}
 80029ba:	af00      	add	r7, sp, #0
	ADC1->SR   &= ~ADC_SR_EOC;	 	  // END OF CONVERSION flag reset
 80029bc:	4b04      	ldr	r3, [pc, #16]	; (80029d0 <ADC1_2_IRQHandler+0x18>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a03      	ldr	r2, [pc, #12]	; (80029d0 <ADC1_2_IRQHandler+0x18>)
 80029c2:	f023 0302 	bic.w	r3, r3, #2
 80029c6:	6013      	str	r3, [r2, #0]
}
 80029c8:	bf00      	nop
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bc80      	pop	{r7}
 80029ce:	4770      	bx	lr
 80029d0:	40012400 	.word	0x40012400

080029d4 <DMA1_Channel1_IRQHandler>:

extern "C" void DMA1_Channel1_IRQHandler(void)
{
 80029d4:	b480      	push	{r7}
 80029d6:	af00      	add	r7, sp, #0
	DMA1->IFCR |= DMA_IFCR_CTCIF1;  // CLEAR DMA INTERUPT
 80029d8:	4b2b      	ldr	r3, [pc, #172]	; (8002a88 <DMA1_Channel1_IRQHandler+0xb4>)
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	4a2a      	ldr	r2, [pc, #168]	; (8002a88 <DMA1_Channel1_IRQHandler+0xb4>)
 80029de:	f043 0302 	orr.w	r3, r3, #2
 80029e2:	6053      	str	r3, [r2, #4]

	if(ADC_DATA_DUMP.averaging_step == AVERAGING_RATIO)
 80029e4:	4b29      	ldr	r3, [pc, #164]	; (8002a8c <DMA1_Channel1_IRQHandler+0xb8>)
 80029e6:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 80029ea:	2b0a      	cmp	r3, #10
 80029ec:	bf0c      	ite	eq
 80029ee:	2301      	moveq	r3, #1
 80029f0:	2300      	movne	r3, #0
 80029f2:	b2db      	uxtb	r3, r3
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d00b      	beq.n	8002a10 <DMA1_Channel1_IRQHandler+0x3c>
	{
		ADC_DATA_DUMP.averaging_step = 0;
 80029f8:	4b24      	ldr	r3, [pc, #144]	; (8002a8c <DMA1_Channel1_IRQHandler+0xb8>)
 80029fa:	2200      	movs	r2, #0
 80029fc:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
		DMA1_Channel1->CMAR = (uint32_t)ADC_DATA_DUMP.ADC_DMA_buffer_array; // return original receiver adress
 8002a00:	4b23      	ldr	r3, [pc, #140]	; (8002a90 <DMA1_Channel1_IRQHandler+0xbc>)
 8002a02:	4a22      	ldr	r2, [pc, #136]	; (8002a8c <DMA1_Channel1_IRQHandler+0xb8>)
 8002a04:	60da      	str	r2, [r3, #12]
		ADC_DATA_DUMP.ADC_DATA_READY = true;
 8002a06:	4b21      	ldr	r3, [pc, #132]	; (8002a8c <DMA1_Channel1_IRQHandler+0xb8>)
 8002a08:	2201      	movs	r2, #1
 8002a0a:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194
		/*DMA address update* finish*/
		DMA1_Channel1->CCR	 |= DMA_CCR_EN;							// CHANNEL 1 ENABLE
		while((DMA1_Channel1->CCR & DMA_CCR_EN) != DMA_CCR_EN);
		ADC_DATA_DUMP.averaging_step++;
	}
}
 8002a0e:	e036      	b.n	8002a7e <DMA1_Channel1_IRQHandler+0xaa>
		DMA1_Channel1->CCR	 &= ~DMA_CCR_EN;						// CHANNEL DISABLE
 8002a10:	4b1f      	ldr	r3, [pc, #124]	; (8002a90 <DMA1_Channel1_IRQHandler+0xbc>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a1e      	ldr	r2, [pc, #120]	; (8002a90 <DMA1_Channel1_IRQHandler+0xbc>)
 8002a16:	f023 0301 	bic.w	r3, r3, #1
 8002a1a:	6013      	str	r3, [r2, #0]
		while(DMA1_Channel1->CCR & DMA_CCR_EN);						// wait for DMA turn-off
 8002a1c:	4b1c      	ldr	r3, [pc, #112]	; (8002a90 <DMA1_Channel1_IRQHandler+0xbc>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f003 0301 	and.w	r3, r3, #1
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	bf14      	ite	ne
 8002a28:	2301      	movne	r3, #1
 8002a2a:	2300      	moveq	r3, #0
 8002a2c:	b2db      	uxtb	r3, r3
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d000      	beq.n	8002a34 <DMA1_Channel1_IRQHandler+0x60>
 8002a32:	e7f3      	b.n	8002a1c <DMA1_Channel1_IRQHandler+0x48>
		DMA1_Channel1->CMAR = (uint32_t)(ADC_DATA_DUMP.ADC_DMA_buffer_array) + ADC_DATA_DUMP.averaging_step * SENSORS_QTY * sizeof(uint32_t);
 8002a34:	4b15      	ldr	r3, [pc, #84]	; (8002a8c <DMA1_Channel1_IRQHandler+0xb8>)
 8002a36:	f8d3 2190 	ldr.w	r2, [r3, #400]	; 0x190
 8002a3a:	4613      	mov	r3, r2
 8002a3c:	009b      	lsls	r3, r3, #2
 8002a3e:	4413      	add	r3, r2
 8002a40:	00db      	lsls	r3, r3, #3
 8002a42:	4619      	mov	r1, r3
 8002a44:	4b11      	ldr	r3, [pc, #68]	; (8002a8c <DMA1_Channel1_IRQHandler+0xb8>)
 8002a46:	4a12      	ldr	r2, [pc, #72]	; (8002a90 <DMA1_Channel1_IRQHandler+0xbc>)
 8002a48:	440b      	add	r3, r1
 8002a4a:	60d3      	str	r3, [r2, #12]
		DMA1_Channel1->CCR	 |= DMA_CCR_EN;							// CHANNEL 1 ENABLE
 8002a4c:	4b10      	ldr	r3, [pc, #64]	; (8002a90 <DMA1_Channel1_IRQHandler+0xbc>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a0f      	ldr	r2, [pc, #60]	; (8002a90 <DMA1_Channel1_IRQHandler+0xbc>)
 8002a52:	f043 0301 	orr.w	r3, r3, #1
 8002a56:	6013      	str	r3, [r2, #0]
		while((DMA1_Channel1->CCR & DMA_CCR_EN) != DMA_CCR_EN);
 8002a58:	4b0d      	ldr	r3, [pc, #52]	; (8002a90 <DMA1_Channel1_IRQHandler+0xbc>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f003 0301 	and.w	r3, r3, #1
 8002a60:	2b01      	cmp	r3, #1
 8002a62:	bf14      	ite	ne
 8002a64:	2301      	movne	r3, #1
 8002a66:	2300      	moveq	r3, #0
 8002a68:	b2db      	uxtb	r3, r3
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d000      	beq.n	8002a70 <DMA1_Channel1_IRQHandler+0x9c>
 8002a6e:	e7f3      	b.n	8002a58 <DMA1_Channel1_IRQHandler+0x84>
		ADC_DATA_DUMP.averaging_step++;
 8002a70:	4b06      	ldr	r3, [pc, #24]	; (8002a8c <DMA1_Channel1_IRQHandler+0xb8>)
 8002a72:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 8002a76:	3301      	adds	r3, #1
 8002a78:	4a04      	ldr	r2, [pc, #16]	; (8002a8c <DMA1_Channel1_IRQHandler+0xb8>)
 8002a7a:	f8c2 3190 	str.w	r3, [r2, #400]	; 0x190
}
 8002a7e:	bf00      	nop
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bc80      	pop	{r7}
 8002a84:	4770      	bx	lr
 8002a86:	bf00      	nop
 8002a88:	40020000 	.word	0x40020000
 8002a8c:	20000468 	.word	0x20000468
 8002a90:	40020008 	.word	0x40020008

08002a94 <TIM2_IRQHandler>:

extern "C" void TIM2_IRQHandler(void)
{
 8002a94:	b480      	push	{r7}
 8002a96:	af00      	add	r7, sp, #0
	TIM2 ->SR  &= ~TIM_SR_UIF;			// CLEAR INTERRUPT FLAG
 8002a98:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002a9c:	691b      	ldr	r3, [r3, #16]
 8002a9e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002aa2:	f023 0301 	bic.w	r3, r3, #1
 8002aa6:	6113      	str	r3, [r2, #16]
	//	ADC1->CR2  |= ADC_CR2_SWSTART;   	// Start ADC conversion
}
 8002aa8:	bf00      	nop
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bc80      	pop	{r7}
 8002aae:	4770      	bx	lr

08002ab0 <main>:
// HANDLERS END HERE/////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////////////
// MAIN //////////////////////////////////////////////////////////////////////////////////////////
int main(void)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	af00      	add	r7, sp, #0
    init_sysClock();
 8002ab4:	f7ff fb58 	bl	8002168 <_Z13init_sysClockv>
    init_SysTick();
 8002ab8:	f7ff fbe8 	bl	800228c <_Z12init_SysTickv>
    init_GPIO();
 8002abc:	f7ff fbbe 	bl	800223c <_Z9init_GPIOv>
    init_DMA();
 8002ac0:	f7ff fe5e 	bl	8002780 <_Z8init_DMAv>
    init_ADC();
 8002ac4:	f7ff fc0a 	bl	80022dc <_Z8init_ADCv>
    init_USART();
 8002ac8:	f7ff fe14 	bl	80026f4 <_Z10init_USARTv>
    init_TIM2(100);										// initialize TIM2 with 100ms overflow interval
 8002acc:	2064      	movs	r0, #100	; 0x64
 8002ace:	f7ff fe99 	bl	8002804 <_Z9init_TIM2i>
    NVIC_EnableIRQ(SysTick_IRQn);	  					// ENABLE SysTick interrupt
 8002ad2:	f04f 30ff 	mov.w	r0, #4294967295
 8002ad6:	f7ff fefb 	bl	80028d0 <__NVIC_EnableIRQ>
    NVIC_EnableIRQ(ADC1_2_IRQn);	  					// ENABLING ADC INTERRUPTION
 8002ada:	2012      	movs	r0, #18
 8002adc:	f7ff fef8 	bl	80028d0 <__NVIC_EnableIRQ>
    NVIC_EnableIRQ(DMA1_Channel1_IRQn);					// ENABLING DMA INTERRUPT
 8002ae0:	200b      	movs	r0, #11
 8002ae2:	f7ff fef5 	bl	80028d0 <__NVIC_EnableIRQ>
    NVIC_EnableIRQ(TIM2_IRQn);							// ENABLING INTERRUPT FOR TIM2
 8002ae6:	201c      	movs	r0, #28
 8002ae8:	f7ff fef2 	bl	80028d0 <__NVIC_EnableIRQ>
    GPIOC->ODR  |= GPIO_ODR_ODR13;	  					// SET LED GPIO HIGH (LIGHT OFF)
 8002aec:	4b0f      	ldr	r3, [pc, #60]	; (8002b2c <main+0x7c>)
 8002aee:	68db      	ldr	r3, [r3, #12]
 8002af0:	4a0e      	ldr	r2, [pc, #56]	; (8002b2c <main+0x7c>)
 8002af2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002af6:	60d3      	str	r3, [r2, #12]
		// 		const char* message = "---5s of your life is gone--- \n";
		//		UART_transmit_string(message);
		//		PROCESS_DATA(ADC_DATA_DUMP.ADC_DMA_buffer_array);
		//		PREPARE_MESSAGE();	// SENDS ALL THE PREPARED DATA THROUGH UART

		if(my_delays_set.delay_is_over(100) == true)
 8002af8:	2164      	movs	r1, #100	; 0x64
 8002afa:	480d      	ldr	r0, [pc, #52]	; (8002b30 <main+0x80>)
 8002afc:	f7fe fd2a 	bl	8001554 <_ZN5Delay13delay_is_overEi>
 8002b00:	4603      	mov	r3, r0
 8002b02:	2b01      	cmp	r3, #1
			{

			}
		if(my_delays_set.delay_is_over(10000) == true)
 8002b04:	f242 7110 	movw	r1, #10000	; 0x2710
 8002b08:	4809      	ldr	r0, [pc, #36]	; (8002b30 <main+0x80>)
 8002b0a:	f7fe fd23 	bl	8001554 <_ZN5Delay13delay_is_overEi>
 8002b0e:	4603      	mov	r3, r0
 8002b10:	2b01      	cmp	r3, #1
 8002b12:	bf0c      	ite	eq
 8002b14:	2301      	moveq	r3, #1
 8002b16:	2300      	movne	r3, #0
 8002b18:	b2db      	uxtb	r3, r3
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d0ec      	beq.n	8002af8 <main+0x48>
			{
				GPIOC->ODR ^= GPIO_ODR_ODR13;	  // INVERT LED GPIO
 8002b1e:	4b03      	ldr	r3, [pc, #12]	; (8002b2c <main+0x7c>)
 8002b20:	68db      	ldr	r3, [r3, #12]
 8002b22:	4a02      	ldr	r2, [pc, #8]	; (8002b2c <main+0x7c>)
 8002b24:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002b28:	60d3      	str	r3, [r2, #12]
		if(my_delays_set.delay_is_over(100) == true)
 8002b2a:	e7e5      	b.n	8002af8 <main+0x48>
 8002b2c:	40011000 	.word	0x40011000
 8002b30:	2000063c 	.word	0x2000063c

08002b34 <_ZNSaIiEC1Ev>:
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b082      	sub	sp, #8
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
 8002b3c:	6878      	ldr	r0, [r7, #4]
 8002b3e:	f000 f85b 	bl	8002bf8 <_ZN9__gnu_cxx13new_allocatorIiEC1Ev>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	4618      	mov	r0, r3
 8002b46:	3708      	adds	r7, #8
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bd80      	pop	{r7, pc}

08002b4c <_ZNSaIiED1Ev>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

#if __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~allocator() _GLIBCXX_NOTHROW { }
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b082      	sub	sp, #8
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
 8002b54:	6878      	ldr	r0, [r7, #4]
 8002b56:	f000 f859 	bl	8002c0c <_ZN9__gnu_cxx13new_allocatorIiED1Ev>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	3708      	adds	r7, #8
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bd80      	pop	{r7, pc}

08002b64 <_ZNSt7__cxx114listIiSaIiEEC1ESt16initializer_listIiERKS1_>:
      list(initializer_list<value_type> __l,
 8002b64:	b5b0      	push	{r4, r5, r7, lr}
 8002b66:	b086      	sub	sp, #24
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	60f8      	str	r0, [r7, #12]
 8002b6c:	1d38      	adds	r0, r7, #4
 8002b6e:	e880 0006 	stmia.w	r0, {r1, r2}
 8002b72:	603b      	str	r3, [r7, #0]
      : _Base(_Node_alloc_type(__a))
 8002b74:	68fc      	ldr	r4, [r7, #12]
 8002b76:	f107 0314 	add.w	r3, r7, #20
 8002b7a:	6839      	ldr	r1, [r7, #0]
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	f000 f84f 	bl	8002c20 <_ZNSaISt10_List_nodeIiEEC1IiEERKSaIT_E>
 8002b82:	f107 0314 	add.w	r3, r7, #20
 8002b86:	4619      	mov	r1, r3
 8002b88:	4620      	mov	r0, r4
 8002b8a:	f000 f862 	bl	8002c52 <_ZNSt7__cxx1110_List_baseIiSaIiEEC1EOSaISt10_List_nodeIiEE>
 8002b8e:	f107 0314 	add.w	r3, r7, #20
 8002b92:	4618      	mov	r0, r3
 8002b94:	f000 f851 	bl	8002c3a <_ZNSaISt10_List_nodeIiEED1Ev>
      { _M_initialize_dispatch(__l.begin(), __l.end(), __false_type()); }
 8002b98:	1d3b      	adds	r3, r7, #4
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	f000 f86c 	bl	8002c78 <_ZNKSt16initializer_listIiE5beginEv>
 8002ba0:	4604      	mov	r4, r0
 8002ba2:	1d3b      	adds	r3, r7, #4
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	f000 f872 	bl	8002c8e <_ZNKSt16initializer_listIiE3endEv>
 8002baa:	4602      	mov	r2, r0
 8002bac:	462b      	mov	r3, r5
 8002bae:	4621      	mov	r1, r4
 8002bb0:	68f8      	ldr	r0, [r7, #12]
 8002bb2:	f000 f87e 	bl	8002cb2 <_ZNSt7__cxx114listIiSaIiEE22_M_initialize_dispatchIPKiEEvT_S6_St12__false_type>
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	4618      	mov	r0, r3
 8002bba:	3718      	adds	r7, #24
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	bdb0      	pop	{r4, r5, r7, pc}

08002bc0 <_ZNSt7__cxx1110_List_baseIiSaIiEE10_List_implD1Ev>:
      struct _List_impl
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b082      	sub	sp, #8
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
 8002bc8:	6878      	ldr	r0, [r7, #4]
 8002bca:	f000 f836 	bl	8002c3a <_ZNSaISt10_List_nodeIiEED1Ev>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	3708      	adds	r7, #8
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bd80      	pop	{r7, pc}

08002bd8 <_ZNSt7__cxx1110_List_baseIiSaIiEED1Ev>:
      ~_List_base() _GLIBCXX_NOEXCEPT
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b082      	sub	sp, #8
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
      { _M_clear(); }
 8002be0:	6878      	ldr	r0, [r7, #4]
 8002be2:	f000 f87d 	bl	8002ce0 <_ZNSt7__cxx1110_List_baseIiSaIiEE8_M_clearEv>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	4618      	mov	r0, r3
 8002bea:	f7ff ffe9 	bl	8002bc0 <_ZNSt7__cxx1110_List_baseIiSaIiEE10_List_implD1Ev>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	3708      	adds	r7, #8
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bd80      	pop	{r7, pc}

08002bf8 <_ZN9__gnu_cxx13new_allocatorIiEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8002bf8:	b480      	push	{r7}
 8002bfa:	b083      	sub	sp, #12
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	4618      	mov	r0, r3
 8002c04:	370c      	adds	r7, #12
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bc80      	pop	{r7}
 8002c0a:	4770      	bx	lr

08002c0c <_ZN9__gnu_cxx13new_allocatorIiED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8002c0c:	b480      	push	{r7}
 8002c0e:	b083      	sub	sp, #12
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	4618      	mov	r0, r3
 8002c18:	370c      	adds	r7, #12
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bc80      	pop	{r7}
 8002c1e:	4770      	bx	lr

08002c20 <_ZNSaISt10_List_nodeIiEEC1IiEERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b082      	sub	sp, #8
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
 8002c28:	6039      	str	r1, [r7, #0]
 8002c2a:	6878      	ldr	r0, [r7, #4]
 8002c2c:	f000 f87d 	bl	8002d2a <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIiEEC1Ev>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	4618      	mov	r0, r3
 8002c34:	3708      	adds	r7, #8
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bd80      	pop	{r7, pc}

08002c3a <_ZNSaISt10_List_nodeIiEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8002c3a:	b580      	push	{r7, lr}
 8002c3c:	b082      	sub	sp, #8
 8002c3e:	af00      	add	r7, sp, #0
 8002c40:	6078      	str	r0, [r7, #4]
 8002c42:	6878      	ldr	r0, [r7, #4]
 8002c44:	f000 f87b 	bl	8002d3e <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIiEED1Ev>
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	3708      	adds	r7, #8
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bd80      	pop	{r7, pc}

08002c52 <_ZNSt7__cxx1110_List_baseIiSaIiEEC1EOSaISt10_List_nodeIiEE>:
      _List_base(_Node_alloc_type&& __a)
 8002c52:	b590      	push	{r4, r7, lr}
 8002c54:	b083      	sub	sp, #12
 8002c56:	af00      	add	r7, sp, #0
 8002c58:	6078      	str	r0, [r7, #4]
 8002c5a:	6039      	str	r1, [r7, #0]
      : _M_impl(std::move(__a))
 8002c5c:	687c      	ldr	r4, [r7, #4]
 8002c5e:	6838      	ldr	r0, [r7, #0]
 8002c60:	f000 f877 	bl	8002d52 <_ZSt4moveIRSaISt10_List_nodeIiEEEONSt16remove_referenceIT_E4typeEOS5_>
 8002c64:	4603      	mov	r3, r0
 8002c66:	4619      	mov	r1, r3
 8002c68:	4620      	mov	r0, r4
 8002c6a:	f000 f87c 	bl	8002d66 <_ZNSt7__cxx1110_List_baseIiSaIiEE10_List_implC1EOSaISt10_List_nodeIiEE>
      { }
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	4618      	mov	r0, r3
 8002c72:	370c      	adds	r7, #12
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bd90      	pop	{r4, r7, pc}

08002c78 <_ZNKSt16initializer_listIiE5beginEv>:
      constexpr size_type
      size() const noexcept { return _M_len; }

      // First element.
      constexpr const_iterator
      begin() const noexcept { return _M_array; }
 8002c78:	b480      	push	{r7}
 8002c7a:	b083      	sub	sp, #12
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4618      	mov	r0, r3
 8002c86:	370c      	adds	r7, #12
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bc80      	pop	{r7}
 8002c8c:	4770      	bx	lr

08002c8e <_ZNKSt16initializer_listIiE3endEv>:

      // One past the last element.
      constexpr const_iterator
      end() const noexcept { return begin() + size(); }
 8002c8e:	b590      	push	{r4, r7, lr}
 8002c90:	b083      	sub	sp, #12
 8002c92:	af00      	add	r7, sp, #0
 8002c94:	6078      	str	r0, [r7, #4]
 8002c96:	6878      	ldr	r0, [r7, #4]
 8002c98:	f7ff ffee 	bl	8002c78 <_ZNKSt16initializer_listIiE5beginEv>
 8002c9c:	4604      	mov	r4, r0
 8002c9e:	6878      	ldr	r0, [r7, #4]
 8002ca0:	f000 f877 	bl	8002d92 <_ZNKSt16initializer_listIiE4sizeEv>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	009b      	lsls	r3, r3, #2
 8002ca8:	4423      	add	r3, r4
 8002caa:	4618      	mov	r0, r3
 8002cac:	370c      	adds	r7, #12
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bd90      	pop	{r4, r7, pc}

08002cb2 <_ZNSt7__cxx114listIiSaIiEE22_M_initialize_dispatchIPKiEEvT_S6_St12__false_type>:
	{ _M_fill_initialize(static_cast<size_type>(__n), __x); }

      // Called by the range constructor to implement [23.1.1]/9
      template<typename _InputIterator>
	void
	_M_initialize_dispatch(_InputIterator __first, _InputIterator __last,
 8002cb2:	b580      	push	{r7, lr}
 8002cb4:	b084      	sub	sp, #16
 8002cb6:	af00      	add	r7, sp, #0
 8002cb8:	60f8      	str	r0, [r7, #12]
 8002cba:	60b9      	str	r1, [r7, #8]
 8002cbc:	607a      	str	r2, [r7, #4]
 8002cbe:	703b      	strb	r3, [r7, #0]
			       __false_type)
	{
	  for (; __first != __last; ++__first)
 8002cc0:	68ba      	ldr	r2, [r7, #8]
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	429a      	cmp	r2, r3
 8002cc6:	d007      	beq.n	8002cd8 <_ZNSt7__cxx114listIiSaIiEE22_M_initialize_dispatchIPKiEEvT_S6_St12__false_type+0x26>
#if __cplusplus >= 201103L
	    emplace_back(*__first);
 8002cc8:	68b9      	ldr	r1, [r7, #8]
 8002cca:	68f8      	ldr	r0, [r7, #12]
 8002ccc:	f000 f86c 	bl	8002da8 <_ZNSt7__cxx114listIiSaIiEE12emplace_backIJRKiEEERiDpOT_>
	  for (; __first != __last; ++__first)
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	3304      	adds	r3, #4
 8002cd4:	60bb      	str	r3, [r7, #8]
 8002cd6:	e7f3      	b.n	8002cc0 <_ZNSt7__cxx114listIiSaIiEE22_M_initialize_dispatchIPKiEEvT_S6_St12__false_type+0xe>
#else
	    push_back(*__first);
#endif
	}
 8002cd8:	bf00      	nop
 8002cda:	3710      	adds	r7, #16
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bd80      	pop	{r7, pc}

08002ce0 <_ZNSt7__cxx1110_List_baseIiSaIiEE8_M_clearEv>:
_GLIBCXX_BEGIN_NAMESPACE_VERSION
_GLIBCXX_BEGIN_NAMESPACE_CONTAINER

  template<typename _Tp, typename _Alloc>
    void
    _List_base<_Tp, _Alloc>::
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b086      	sub	sp, #24
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
    _M_clear() _GLIBCXX_NOEXCEPT
    {
      typedef _List_node<_Tp>  _Node;
      __detail::_List_node_base* __cur = _M_impl._M_node._M_next;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	617b      	str	r3, [r7, #20]
      while (__cur != &_M_impl._M_node)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	697a      	ldr	r2, [r7, #20]
 8002cf2:	429a      	cmp	r2, r3
 8002cf4:	d015      	beq.n	8002d22 <_ZNSt7__cxx1110_List_baseIiSaIiEE8_M_clearEv+0x42>
	{
	  _Node* __tmp = static_cast<_Node*>(__cur);
 8002cf6:	697b      	ldr	r3, [r7, #20]
 8002cf8:	613b      	str	r3, [r7, #16]
	  __cur = __tmp->_M_next;
 8002cfa:	693b      	ldr	r3, [r7, #16]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	617b      	str	r3, [r7, #20]
	  _Tp* __val = __tmp->_M_valptr();
 8002d00:	6938      	ldr	r0, [r7, #16]
 8002d02:	f000 f86b 	bl	8002ddc <_ZNSt10_List_nodeIiE9_M_valptrEv>
 8002d06:	60f8      	str	r0, [r7, #12]
#if __cplusplus >= 201103L
	  _Node_alloc_traits::destroy(_M_get_Node_allocator(), __val);
 8002d08:	6878      	ldr	r0, [r7, #4]
 8002d0a:	f000 f875 	bl	8002df8 <_ZNSt7__cxx1110_List_baseIiSaIiEE21_M_get_Node_allocatorEv>
 8002d0e:	4603      	mov	r3, r0
 8002d10:	68f9      	ldr	r1, [r7, #12]
 8002d12:	4618      	mov	r0, r3
 8002d14:	f000 f87a 	bl	8002e0c <_ZNSt16allocator_traitsISaISt10_List_nodeIiEEE7destroyIiEEvRS2_PT_>
#else
	  _Tp_alloc_type(_M_get_Node_allocator()).destroy(__val);
#endif
	  _M_put_node(__tmp);
 8002d18:	6939      	ldr	r1, [r7, #16]
 8002d1a:	6878      	ldr	r0, [r7, #4]
 8002d1c:	f000 f883 	bl	8002e26 <_ZNSt7__cxx1110_List_baseIiSaIiEE11_M_put_nodeEPSt10_List_nodeIiE>
      while (__cur != &_M_impl._M_node)
 8002d20:	e7e5      	b.n	8002cee <_ZNSt7__cxx1110_List_baseIiSaIiEE8_M_clearEv+0xe>
	}
    }
 8002d22:	bf00      	nop
 8002d24:	3718      	adds	r7, #24
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd80      	pop	{r7, pc}

08002d2a <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIiEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8002d2a:	b480      	push	{r7}
 8002d2c:	b083      	sub	sp, #12
 8002d2e:	af00      	add	r7, sp, #0
 8002d30:	6078      	str	r0, [r7, #4]
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	4618      	mov	r0, r3
 8002d36:	370c      	adds	r7, #12
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bc80      	pop	{r7}
 8002d3c:	4770      	bx	lr

08002d3e <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIiEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8002d3e:	b480      	push	{r7}
 8002d40:	b083      	sub	sp, #12
 8002d42:	af00      	add	r7, sp, #0
 8002d44:	6078      	str	r0, [r7, #4]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	4618      	mov	r0, r3
 8002d4a:	370c      	adds	r7, #12
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bc80      	pop	{r7}
 8002d50:	4770      	bx	lr

08002d52 <_ZSt4moveIRSaISt10_List_nodeIiEEEONSt16remove_referenceIT_E4typeEOS5_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 8002d52:	b480      	push	{r7}
 8002d54:	b083      	sub	sp, #12
 8002d56:	af00      	add	r7, sp, #0
 8002d58:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	370c      	adds	r7, #12
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bc80      	pop	{r7}
 8002d64:	4770      	bx	lr

08002d66 <_ZNSt7__cxx1110_List_baseIiSaIiEE10_List_implC1EOSaISt10_List_nodeIiEE>:
	_List_impl(_Node_alloc_type&& __a) noexcept
 8002d66:	b580      	push	{r7, lr}
 8002d68:	b082      	sub	sp, #8
 8002d6a:	af00      	add	r7, sp, #0
 8002d6c:	6078      	str	r0, [r7, #4]
 8002d6e:	6039      	str	r1, [r7, #0]
	: _Node_alloc_type(std::move(__a))
 8002d70:	6838      	ldr	r0, [r7, #0]
 8002d72:	f7ff ffee 	bl	8002d52 <_ZSt4moveIRSaISt10_List_nodeIiEEEONSt16remove_referenceIT_E4typeEOS5_>
 8002d76:	4603      	mov	r3, r0
 8002d78:	4619      	mov	r1, r3
 8002d7a:	6878      	ldr	r0, [r7, #4]
 8002d7c:	f000 f862 	bl	8002e44 <_ZNSaISt10_List_nodeIiEEC1ERKS1_>
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	4618      	mov	r0, r3
 8002d84:	f7ff fdc0 	bl	8002908 <_ZNSt8__detail17_List_node_headerC1Ev>
	{ }
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	3708      	adds	r7, #8
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}

08002d92 <_ZNKSt16initializer_listIiE4sizeEv>:
      size() const noexcept { return _M_len; }
 8002d92:	b480      	push	{r7}
 8002d94:	b083      	sub	sp, #12
 8002d96:	af00      	add	r7, sp, #0
 8002d98:	6078      	str	r0, [r7, #4]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	4618      	mov	r0, r3
 8002da0:	370c      	adds	r7, #12
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bc80      	pop	{r7}
 8002da6:	4770      	bx	lr

08002da8 <_ZNSt7__cxx114listIiSaIiEE12emplace_backIJRKiEEERiDpOT_>:
	emplace_back(_Args&&... __args)
 8002da8:	b590      	push	{r4, r7, lr}
 8002daa:	b083      	sub	sp, #12
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
 8002db0:	6039      	str	r1, [r7, #0]
	  this->_M_insert(end(), std::forward<_Args>(__args)...);
 8002db2:	6878      	ldr	r0, [r7, #4]
 8002db4:	f000 f854 	bl	8002e60 <_ZNSt7__cxx114listIiSaIiEE3endEv>
 8002db8:	4604      	mov	r4, r0
 8002dba:	6838      	ldr	r0, [r7, #0]
 8002dbc:	f7fe fd46 	bl	800184c <_ZSt7forwardIRKiEOT_RNSt16remove_referenceIS2_E4typeE>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	461a      	mov	r2, r3
 8002dc4:	4621      	mov	r1, r4
 8002dc6:	6878      	ldr	r0, [r7, #4]
 8002dc8:	f000 f85a 	bl	8002e80 <_ZNSt7__cxx114listIiSaIiEE9_M_insertIJRKiEEEvSt14_List_iteratorIiEDpOT_>
	return back();
 8002dcc:	6878      	ldr	r0, [r7, #4]
 8002dce:	f000 f875 	bl	8002ebc <_ZNSt7__cxx114listIiSaIiEE4backEv>
 8002dd2:	4603      	mov	r3, r0
	}
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	370c      	adds	r7, #12
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	bd90      	pop	{r4, r7, pc}

08002ddc <_ZNSt10_List_nodeIiE9_M_valptrEv>:
      _Tp*       _M_valptr()       { return _M_storage._M_ptr(); }
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b082      	sub	sp, #8
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	3308      	adds	r3, #8
 8002de8:	4618      	mov	r0, r3
 8002dea:	f000 f87f 	bl	8002eec <_ZN9__gnu_cxx16__aligned_membufIiE6_M_ptrEv>
 8002dee:	4603      	mov	r3, r0
 8002df0:	4618      	mov	r0, r3
 8002df2:	3708      	adds	r7, #8
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bd80      	pop	{r7, pc}

08002df8 <_ZNSt7__cxx1110_List_baseIiSaIiEE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 8002df8:	b480      	push	{r7}
 8002dfa:	b083      	sub	sp, #12
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
      { return _M_impl; }
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	4618      	mov	r0, r3
 8002e04:	370c      	adds	r7, #12
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bc80      	pop	{r7}
 8002e0a:	4770      	bx	lr

08002e0c <_ZNSt16allocator_traitsISaISt10_List_nodeIiEEE7destroyIiEEvRS2_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b082      	sub	sp, #8
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
 8002e14:	6039      	str	r1, [r7, #0]
	  __a.destroy(__p);
 8002e16:	6839      	ldr	r1, [r7, #0]
 8002e18:	6878      	ldr	r0, [r7, #4]
 8002e1a:	f000 f873 	bl	8002f04 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIiEE7destroyIiEEvPT_>
	}
 8002e1e:	bf00      	nop
 8002e20:	3708      	adds	r7, #8
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}

08002e26 <_ZNSt7__cxx1110_List_baseIiSaIiEE11_M_put_nodeEPSt10_List_nodeIiE>:
      _M_put_node(typename _Node_alloc_traits::pointer __p) _GLIBCXX_NOEXCEPT
 8002e26:	b580      	push	{r7, lr}
 8002e28:	b082      	sub	sp, #8
 8002e2a:	af00      	add	r7, sp, #0
 8002e2c:	6078      	str	r0, [r7, #4]
 8002e2e:	6039      	str	r1, [r7, #0]
      { _Node_alloc_traits::deallocate(_M_impl, __p, 1); }
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2201      	movs	r2, #1
 8002e34:	6839      	ldr	r1, [r7, #0]
 8002e36:	4618      	mov	r0, r3
 8002e38:	f000 f86e 	bl	8002f18 <_ZNSt16allocator_traitsISaISt10_List_nodeIiEEE10deallocateERS2_PS1_j>
 8002e3c:	bf00      	nop
 8002e3e:	3708      	adds	r7, #8
 8002e40:	46bd      	mov	sp, r7
 8002e42:	bd80      	pop	{r7, pc}

08002e44 <_ZNSaISt10_List_nodeIiEEC1ERKS1_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b082      	sub	sp, #8
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
 8002e4c:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 8002e4e:	6839      	ldr	r1, [r7, #0]
 8002e50:	6878      	ldr	r0, [r7, #4]
 8002e52:	f000 f870 	bl	8002f36 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIiEEC1ERKS3_>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	4618      	mov	r0, r3
 8002e5a:	3708      	adds	r7, #8
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bd80      	pop	{r7, pc}

08002e60 <_ZNSt7__cxx114listIiSaIiEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b084      	sub	sp, #16
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
      { return iterator(&this->_M_impl._M_node); }
 8002e68:	687a      	ldr	r2, [r7, #4]
 8002e6a:	f107 030c 	add.w	r3, r7, #12
 8002e6e:	4611      	mov	r1, r2
 8002e70:	4618      	mov	r0, r3
 8002e72:	f000 f86b 	bl	8002f4c <_ZNSt14_List_iteratorIiEC1EPNSt8__detail15_List_node_baseE>
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	4618      	mov	r0, r3
 8002e7a:	3710      	adds	r7, #16
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bd80      	pop	{r7, pc}

08002e80 <_ZNSt7__cxx114listIiSaIiEE9_M_insertIJRKiEEEvSt14_List_iteratorIiEDpOT_>:
	this->_M_inc_size(1);
      }
#else
     template<typename... _Args>
       void
       _M_insert(iterator __position, _Args&&... __args)
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b086      	sub	sp, #24
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	60f8      	str	r0, [r7, #12]
 8002e88:	60b9      	str	r1, [r7, #8]
 8002e8a:	607a      	str	r2, [r7, #4]
       {
	 _Node* __tmp = _M_create_node(std::forward<_Args>(__args)...);
 8002e8c:	6878      	ldr	r0, [r7, #4]
 8002e8e:	f7fe fcdd 	bl	800184c <_ZSt7forwardIRKiEOT_RNSt16remove_referenceIS2_E4typeE>
 8002e92:	4603      	mov	r3, r0
 8002e94:	4619      	mov	r1, r3
 8002e96:	68f8      	ldr	r0, [r7, #12]
 8002e98:	f000 f866 	bl	8002f68 <_ZNSt7__cxx114listIiSaIiEE14_M_create_nodeIJRKiEEEPSt10_List_nodeIiEDpOT_>
 8002e9c:	6178      	str	r0, [r7, #20]
	 __tmp->_M_hook(__position._M_node);
 8002e9e:	697b      	ldr	r3, [r7, #20]
 8002ea0:	68ba      	ldr	r2, [r7, #8]
 8002ea2:	4611      	mov	r1, r2
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	f000 fb63 	bl	8003570 <_ZNSt8__detail15_List_node_base7_M_hookEPS0_>
	 this->_M_inc_size(1);
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	2101      	movs	r1, #1
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f000 f88e 	bl	8002fd0 <_ZNSt7__cxx1110_List_baseIiSaIiEE11_M_inc_sizeEj>
       }
 8002eb4:	bf00      	nop
 8002eb6:	3718      	adds	r7, #24
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bd80      	pop	{r7, pc}

08002ebc <_ZNSt7__cxx114listIiSaIiEE4backEv>:
      back() _GLIBCXX_NOEXCEPT
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b084      	sub	sp, #16
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
	iterator __tmp = end();
 8002ec4:	6878      	ldr	r0, [r7, #4]
 8002ec6:	f7ff ffcb 	bl	8002e60 <_ZNSt7__cxx114listIiSaIiEE3endEv>
 8002eca:	4603      	mov	r3, r0
 8002ecc:	60fb      	str	r3, [r7, #12]
	--__tmp;
 8002ece:	f107 030c 	add.w	r3, r7, #12
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	f000 f88c 	bl	8002ff0 <_ZNSt14_List_iteratorIiEmmEv>
	return *__tmp;
 8002ed8:	f107 030c 	add.w	r3, r7, #12
 8002edc:	4618      	mov	r0, r3
 8002ede:	f000 f896 	bl	800300e <_ZNKSt14_List_iteratorIiEdeEv>
 8002ee2:	4603      	mov	r3, r0
      }
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	3710      	adds	r7, #16
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bd80      	pop	{r7, pc}

08002eec <_ZN9__gnu_cxx16__aligned_membufIiE6_M_ptrEv>:
      _M_ptr() noexcept
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b082      	sub	sp, #8
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 8002ef4:	6878      	ldr	r0, [r7, #4]
 8002ef6:	f000 f898 	bl	800302a <_ZN9__gnu_cxx16__aligned_membufIiE7_M_addrEv>
 8002efa:	4603      	mov	r3, r0
 8002efc:	4618      	mov	r0, r3
 8002efe:	3708      	adds	r7, #8
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bd80      	pop	{r7, pc}

08002f04 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIiEE7destroyIiEEvPT_>:
	destroy(_Up* __p)
 8002f04:	b480      	push	{r7}
 8002f06:	b083      	sub	sp, #12
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
 8002f0c:	6039      	str	r1, [r7, #0]
	{ __p->~_Up(); }
 8002f0e:	bf00      	nop
 8002f10:	370c      	adds	r7, #12
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bc80      	pop	{r7}
 8002f16:	4770      	bx	lr

08002f18 <_ZNSt16allocator_traitsISaISt10_List_nodeIiEEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b084      	sub	sp, #16
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	60f8      	str	r0, [r7, #12]
 8002f20:	60b9      	str	r1, [r7, #8]
 8002f22:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8002f24:	687a      	ldr	r2, [r7, #4]
 8002f26:	68b9      	ldr	r1, [r7, #8]
 8002f28:	68f8      	ldr	r0, [r7, #12]
 8002f2a:	f000 f888 	bl	800303e <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIiEE10deallocateEPS2_j>
 8002f2e:	bf00      	nop
 8002f30:	3710      	adds	r7, #16
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd80      	pop	{r7, pc}

08002f36 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIiEEC1ERKS3_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 8002f36:	b480      	push	{r7}
 8002f38:	b083      	sub	sp, #12
 8002f3a:	af00      	add	r7, sp, #0
 8002f3c:	6078      	str	r0, [r7, #4]
 8002f3e:	6039      	str	r1, [r7, #0]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	4618      	mov	r0, r3
 8002f44:	370c      	adds	r7, #12
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bc80      	pop	{r7}
 8002f4a:	4770      	bx	lr

08002f4c <_ZNSt14_List_iteratorIiEC1EPNSt8__detail15_List_node_baseE>:
      _List_iterator(__detail::_List_node_base* __x) _GLIBCXX_NOEXCEPT
 8002f4c:	b480      	push	{r7}
 8002f4e:	b083      	sub	sp, #12
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
 8002f54:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	683a      	ldr	r2, [r7, #0]
 8002f5a:	601a      	str	r2, [r3, #0]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	4618      	mov	r0, r3
 8002f60:	370c      	adds	r7, #12
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bc80      	pop	{r7}
 8002f66:	4770      	bx	lr

08002f68 <_ZNSt7__cxx114listIiSaIiEE14_M_create_nodeIJRKiEEEPSt10_List_nodeIiEDpOT_>:
	_M_create_node(_Args&&... __args)
 8002f68:	b590      	push	{r4, r7, lr}
 8002f6a:	b087      	sub	sp, #28
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
 8002f70:	6039      	str	r1, [r7, #0]
	  auto __p = this->_M_get_node();
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	4618      	mov	r0, r3
 8002f76:	f000 f874 	bl	8003062 <_ZNSt7__cxx1110_List_baseIiSaIiEE11_M_get_nodeEv>
 8002f7a:	6178      	str	r0, [r7, #20]
	  auto& __alloc = _M_get_Node_allocator();
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	4618      	mov	r0, r3
 8002f80:	f7ff ff3a 	bl	8002df8 <_ZNSt7__cxx1110_List_baseIiSaIiEE21_M_get_Node_allocatorEv>
 8002f84:	6138      	str	r0, [r7, #16]
	  __allocated_ptr<_Node_alloc_type> __guard{__alloc, __p};
 8002f86:	f107 0308 	add.w	r3, r7, #8
 8002f8a:	697a      	ldr	r2, [r7, #20]
 8002f8c:	6939      	ldr	r1, [r7, #16]
 8002f8e:	4618      	mov	r0, r3
 8002f90:	f000 f875 	bl	800307e <_ZNSt15__allocated_ptrISaISt10_List_nodeIiEEEC1ERS2_PS1_>
	  _Node_alloc_traits::construct(__alloc, __p->_M_valptr(),
 8002f94:	6978      	ldr	r0, [r7, #20]
 8002f96:	f7ff ff21 	bl	8002ddc <_ZNSt10_List_nodeIiE9_M_valptrEv>
 8002f9a:	4604      	mov	r4, r0
 8002f9c:	6838      	ldr	r0, [r7, #0]
 8002f9e:	f7fe fc55 	bl	800184c <_ZSt7forwardIRKiEOT_RNSt16remove_referenceIS2_E4typeE>
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	461a      	mov	r2, r3
 8002fa6:	4621      	mov	r1, r4
 8002fa8:	6938      	ldr	r0, [r7, #16]
 8002faa:	f000 f891 	bl	80030d0 <_ZNSt16allocator_traitsISaISt10_List_nodeIiEEE9constructIiJRKiEEEvRS2_PT_DpOT0_>
	  __guard = nullptr;
 8002fae:	f107 0308 	add.w	r3, r7, #8
 8002fb2:	2100      	movs	r1, #0
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	f000 f89e 	bl	80030f6 <_ZNSt15__allocated_ptrISaISt10_List_nodeIiEEEaSEDn>
	  return __p;
 8002fba:	697c      	ldr	r4, [r7, #20]
	  __allocated_ptr<_Node_alloc_type> __guard{__alloc, __p};
 8002fbc:	f107 0308 	add.w	r3, r7, #8
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	f000 f870 	bl	80030a6 <_ZNSt15__allocated_ptrISaISt10_List_nodeIiEEED1Ev>
	  return __p;
 8002fc6:	4623      	mov	r3, r4
	}
 8002fc8:	4618      	mov	r0, r3
 8002fca:	371c      	adds	r7, #28
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bd90      	pop	{r4, r7, pc}

08002fd0 <_ZNSt7__cxx1110_List_baseIiSaIiEE11_M_inc_sizeEj>:
      void _M_inc_size(size_t __n) { _M_impl._M_node._M_size += __n; }
 8002fd0:	b480      	push	{r7}
 8002fd2:	b083      	sub	sp, #12
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
 8002fd8:	6039      	str	r1, [r7, #0]
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	689a      	ldr	r2, [r3, #8]
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	441a      	add	r2, r3
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	609a      	str	r2, [r3, #8]
 8002fe6:	bf00      	nop
 8002fe8:	370c      	adds	r7, #12
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bc80      	pop	{r7}
 8002fee:	4770      	bx	lr

08002ff0 <_ZNSt14_List_iteratorIiEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 8002ff0:	b480      	push	{r7}
 8002ff2:	b083      	sub	sp, #12
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
	_M_node = _M_node->_M_prev;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	685a      	ldr	r2, [r3, #4]
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	601a      	str	r2, [r3, #0]
	return *this;
 8003002:	687b      	ldr	r3, [r7, #4]
      }
 8003004:	4618      	mov	r0, r3
 8003006:	370c      	adds	r7, #12
 8003008:	46bd      	mov	sp, r7
 800300a:	bc80      	pop	{r7}
 800300c:	4770      	bx	lr

0800300e <_ZNKSt14_List_iteratorIiEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 800300e:	b580      	push	{r7, lr}
 8003010:	b082      	sub	sp, #8
 8003012:	af00      	add	r7, sp, #0
 8003014:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Node*>(_M_node)->_M_valptr(); }
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4618      	mov	r0, r3
 800301c:	f7ff fede 	bl	8002ddc <_ZNSt10_List_nodeIiE9_M_valptrEv>
 8003020:	4603      	mov	r3, r0
 8003022:	4618      	mov	r0, r3
 8003024:	3708      	adds	r7, #8
 8003026:	46bd      	mov	sp, r7
 8003028:	bd80      	pop	{r7, pc}

0800302a <_ZN9__gnu_cxx16__aligned_membufIiE7_M_addrEv>:
      _M_addr() noexcept
 800302a:	b480      	push	{r7}
 800302c:	b083      	sub	sp, #12
 800302e:	af00      	add	r7, sp, #0
 8003030:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	4618      	mov	r0, r3
 8003036:	370c      	adds	r7, #12
 8003038:	46bd      	mov	sp, r7
 800303a:	bc80      	pop	{r7}
 800303c:	4770      	bx	lr

0800303e <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIiEE10deallocateEPS2_j>:
      deallocate(_Tp* __p, size_type __t)
 800303e:	b580      	push	{r7, lr}
 8003040:	b084      	sub	sp, #16
 8003042:	af00      	add	r7, sp, #0
 8003044:	60f8      	str	r0, [r7, #12]
 8003046:	60b9      	str	r1, [r7, #8]
 8003048:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 800304a:	687a      	ldr	r2, [r7, #4]
 800304c:	4613      	mov	r3, r2
 800304e:	005b      	lsls	r3, r3, #1
 8003050:	4413      	add	r3, r2
 8003052:	009b      	lsls	r3, r3, #2
 8003054:	4619      	mov	r1, r3
 8003056:	68b8      	ldr	r0, [r7, #8]
 8003058:	f000 fa77 	bl	800354a <_ZdlPvj>
      }
 800305c:	3710      	adds	r7, #16
 800305e:	46bd      	mov	sp, r7
 8003060:	bd80      	pop	{r7, pc}

08003062 <_ZNSt7__cxx1110_List_baseIiSaIiEE11_M_get_nodeEv>:
      _M_get_node()
 8003062:	b580      	push	{r7, lr}
 8003064:	b082      	sub	sp, #8
 8003066:	af00      	add	r7, sp, #0
 8003068:	6078      	str	r0, [r7, #4]
      { return _Node_alloc_traits::allocate(_M_impl, 1); }
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2101      	movs	r1, #1
 800306e:	4618      	mov	r0, r3
 8003070:	f000 f84f 	bl	8003112 <_ZNSt16allocator_traitsISaISt10_List_nodeIiEEE8allocateERS2_j>
 8003074:	4603      	mov	r3, r0
 8003076:	4618      	mov	r0, r3
 8003078:	3708      	adds	r7, #8
 800307a:	46bd      	mov	sp, r7
 800307c:	bd80      	pop	{r7, pc}

0800307e <_ZNSt15__allocated_ptrISaISt10_List_nodeIiEEEC1ERS2_PS1_>:
    {
      using pointer = typename allocator_traits<_Alloc>::pointer;
      using value_type = typename allocator_traits<_Alloc>::value_type;

      /// Take ownership of __ptr
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
 800307e:	b580      	push	{r7, lr}
 8003080:	b084      	sub	sp, #16
 8003082:	af00      	add	r7, sp, #0
 8003084:	60f8      	str	r0, [r7, #12]
 8003086:	60b9      	str	r1, [r7, #8]
 8003088:	607a      	str	r2, [r7, #4]
      : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr)
 800308a:	68b8      	ldr	r0, [r7, #8]
 800308c:	f000 f850 	bl	8003130 <_ZSt11__addressofISaISt10_List_nodeIiEEEPT_RS3_>
 8003090:	4602      	mov	r2, r0
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	601a      	str	r2, [r3, #0]
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	687a      	ldr	r2, [r7, #4]
 800309a:	605a      	str	r2, [r3, #4]
      { }
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	4618      	mov	r0, r3
 80030a0:	3710      	adds	r7, #16
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd80      	pop	{r7, pc}

080030a6 <_ZNSt15__allocated_ptrISaISt10_List_nodeIiEEED1Ev>:
      __allocated_ptr(__allocated_ptr&& __gd) noexcept
      : _M_alloc(__gd._M_alloc), _M_ptr(__gd._M_ptr)
      { __gd._M_ptr = nullptr; }

      /// Deallocate the owned pointer
      ~__allocated_ptr()
 80030a6:	b580      	push	{r7, lr}
 80030a8:	b082      	sub	sp, #8
 80030aa:	af00      	add	r7, sp, #0
 80030ac:	6078      	str	r0, [r7, #4]
      {
	if (_M_ptr != nullptr)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d007      	beq.n	80030c6 <_ZNSt15__allocated_ptrISaISt10_List_nodeIiEEED1Ev+0x20>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6818      	ldr	r0, [r3, #0]
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	2201      	movs	r2, #1
 80030c0:	4619      	mov	r1, r3
 80030c2:	f7ff ff29 	bl	8002f18 <_ZNSt16allocator_traitsISaISt10_List_nodeIiEEE10deallocateERS2_PS1_j>
      }
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	4618      	mov	r0, r3
 80030ca:	3708      	adds	r7, #8
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bd80      	pop	{r7, pc}

080030d0 <_ZNSt16allocator_traitsISaISt10_List_nodeIiEEE9constructIiJRKiEEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b084      	sub	sp, #16
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	60f8      	str	r0, [r7, #12]
 80030d8:	60b9      	str	r1, [r7, #8]
 80030da:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 80030dc:	6878      	ldr	r0, [r7, #4]
 80030de:	f7fe fbb5 	bl	800184c <_ZSt7forwardIRKiEOT_RNSt16remove_referenceIS2_E4typeE>
 80030e2:	4603      	mov	r3, r0
 80030e4:	461a      	mov	r2, r3
 80030e6:	68b9      	ldr	r1, [r7, #8]
 80030e8:	68f8      	ldr	r0, [r7, #12]
 80030ea:	f000 f82b 	bl	8003144 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIiEE9constructIiJRKiEEEvPT_DpOT0_>
	}
 80030ee:	bf00      	nop
 80030f0:	3710      	adds	r7, #16
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bd80      	pop	{r7, pc}

080030f6 <_ZNSt15__allocated_ptrISaISt10_List_nodeIiEEEaSEDn>:

      /// Release ownership of the owned pointer
      __allocated_ptr&
      operator=(std::nullptr_t) noexcept
 80030f6:	b480      	push	{r7}
 80030f8:	b083      	sub	sp, #12
 80030fa:	af00      	add	r7, sp, #0
 80030fc:	6078      	str	r0, [r7, #4]
 80030fe:	6039      	str	r1, [r7, #0]
      {
	_M_ptr = nullptr;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2200      	movs	r2, #0
 8003104:	605a      	str	r2, [r3, #4]
	return *this;
 8003106:	687b      	ldr	r3, [r7, #4]
      }
 8003108:	4618      	mov	r0, r3
 800310a:	370c      	adds	r7, #12
 800310c:	46bd      	mov	sp, r7
 800310e:	bc80      	pop	{r7}
 8003110:	4770      	bx	lr

08003112 <_ZNSt16allocator_traitsISaISt10_List_nodeIiEEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 8003112:	b580      	push	{r7, lr}
 8003114:	b082      	sub	sp, #8
 8003116:	af00      	add	r7, sp, #0
 8003118:	6078      	str	r0, [r7, #4]
 800311a:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 800311c:	2200      	movs	r2, #0
 800311e:	6839      	ldr	r1, [r7, #0]
 8003120:	6878      	ldr	r0, [r7, #4]
 8003122:	f000 f825 	bl	8003170 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIiEE8allocateEjPKv>
 8003126:	4603      	mov	r3, r0
 8003128:	4618      	mov	r0, r3
 800312a:	3708      	adds	r7, #8
 800312c:	46bd      	mov	sp, r7
 800312e:	bd80      	pop	{r7, pc}

08003130 <_ZSt11__addressofISaISt10_List_nodeIiEEEPT_RS3_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8003130:	b480      	push	{r7}
 8003132:	b083      	sub	sp, #12
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	4618      	mov	r0, r3
 800313c:	370c      	adds	r7, #12
 800313e:	46bd      	mov	sp, r7
 8003140:	bc80      	pop	{r7}
 8003142:	4770      	bx	lr

08003144 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIiEE9constructIiJRKiEEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8003144:	b590      	push	{r4, r7, lr}
 8003146:	b085      	sub	sp, #20
 8003148:	af00      	add	r7, sp, #0
 800314a:	60f8      	str	r0, [r7, #12]
 800314c:	60b9      	str	r1, [r7, #8]
 800314e:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8003150:	6878      	ldr	r0, [r7, #4]
 8003152:	f7fe fb7b 	bl	800184c <_ZSt7forwardIRKiEOT_RNSt16remove_referenceIS2_E4typeE>
 8003156:	4603      	mov	r3, r0
 8003158:	681c      	ldr	r4, [r3, #0]
 800315a:	68bb      	ldr	r3, [r7, #8]
 800315c:	4619      	mov	r1, r3
 800315e:	2004      	movs	r0, #4
 8003160:	f7fe f90c 	bl	800137c <_ZnwjPv>
 8003164:	4603      	mov	r3, r0
 8003166:	601c      	str	r4, [r3, #0]
 8003168:	bf00      	nop
 800316a:	3714      	adds	r7, #20
 800316c:	46bd      	mov	sp, r7
 800316e:	bd90      	pop	{r4, r7, pc}

08003170 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIiEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8003170:	b580      	push	{r7, lr}
 8003172:	b084      	sub	sp, #16
 8003174:	af00      	add	r7, sp, #0
 8003176:	60f8      	str	r0, [r7, #12]
 8003178:	60b9      	str	r1, [r7, #8]
 800317a:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 800317c:	68f8      	ldr	r0, [r7, #12]
 800317e:	f000 f819 	bl	80031b4 <_ZNK9__gnu_cxx13new_allocatorISt10_List_nodeIiEE11_M_max_sizeEv>
 8003182:	4602      	mov	r2, r0
 8003184:	68bb      	ldr	r3, [r7, #8]
 8003186:	4293      	cmp	r3, r2
 8003188:	bf8c      	ite	hi
 800318a:	2301      	movhi	r3, #1
 800318c:	2300      	movls	r3, #0
 800318e:	b2db      	uxtb	r3, r3
 8003190:	2b00      	cmp	r3, #0
 8003192:	d001      	beq.n	8003198 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIiEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8003194:	f000 faa7 	bl	80036e6 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8003198:	68ba      	ldr	r2, [r7, #8]
 800319a:	4613      	mov	r3, r2
 800319c:	005b      	lsls	r3, r3, #1
 800319e:	4413      	add	r3, r2
 80031a0:	009b      	lsls	r3, r3, #2
 80031a2:	4618      	mov	r0, r3
 80031a4:	f000 f9d3 	bl	800354e <_Znwj>
 80031a8:	4603      	mov	r3, r0
 80031aa:	bf00      	nop
      }
 80031ac:	4618      	mov	r0, r3
 80031ae:	3710      	adds	r7, #16
 80031b0:	46bd      	mov	sp, r7
 80031b2:	bd80      	pop	{r7, pc}

080031b4 <_ZNK9__gnu_cxx13new_allocatorISt10_List_nodeIiEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 80031b4:	b480      	push	{r7}
 80031b6:	b083      	sub	sp, #12
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 80031bc:	4b02      	ldr	r3, [pc, #8]	; (80031c8 <_ZNK9__gnu_cxx13new_allocatorISt10_List_nodeIiEE11_M_max_sizeEv+0x14>)
      }
 80031be:	4618      	mov	r0, r3
 80031c0:	370c      	adds	r7, #12
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bc80      	pop	{r7}
 80031c6:	4770      	bx	lr
 80031c8:	0aaaaaaa 	.word	0x0aaaaaaa

080031cc <_ZNSt3mapIiN5Delay15delay_details_tESt4lessIiESaISt4pairIKiS1_EEED1Ev>:
      ~map() = default;
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b082      	sub	sp, #8
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	4618      	mov	r0, r3
 80031d8:	f000 f874 	bl	80032c4 <_ZNSt8_Rb_treeIiSt4pairIKiN5Delay15delay_details_tEESt10_Select1stIS4_ESt4lessIiESaIS4_EED1Ev>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	4618      	mov	r0, r3
 80031e0:	3708      	adds	r7, #8
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bd80      	pop	{r7, pc}

080031e6 <_ZN5DelayD1Ev>:

#include <map>
#include <vector>
#include <list>

class Delay
 80031e6:	b580      	push	{r7, lr}
 80031e8:	b082      	sub	sp, #8
 80031ea:	af00      	add	r7, sp, #0
 80031ec:	6078      	str	r0, [r7, #4]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	4618      	mov	r0, r3
 80031f2:	f7ff ffeb 	bl	80031cc <_ZNSt3mapIiN5Delay15delay_details_tESt4lessIiESaISt4pairIKiS1_EEED1Ev>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	4618      	mov	r0, r3
 80031fa:	3708      	adds	r7, #8
 80031fc:	46bd      	mov	sp, r7
 80031fe:	bd80      	pop	{r7, pc}

08003200 <_Z41__static_initialization_and_destruction_0ii>:
			}
	}// WHILE ENDS HERE
}// MAIN ENDS HERE
 8003200:	b580      	push	{r7, lr}
 8003202:	b08c      	sub	sp, #48	; 0x30
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
 8003208:	6039      	str	r1, [r7, #0]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2b01      	cmp	r3, #1
 800320e:	d134      	bne.n	800327a <_Z41__static_initialization_and_destruction_0ii+0x7a>
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003216:	4293      	cmp	r3, r2
 8003218:	d12f      	bne.n	800327a <_Z41__static_initialization_and_destruction_0ii+0x7a>
volatile ADC_dump_struct ADC_DATA_DUMP;							// variable creation
 800321a:	481f      	ldr	r0, [pc, #124]	; (8003298 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 800321c:	f7ff fb93 	bl	8002946 <_ZN15ADC_dump_structC1Ev>
Buttons buttons_instance(my_buttons);								// CLASS "Buttons" instance
 8003220:	491e      	ldr	r1, [pc, #120]	; (800329c <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 8003222:	481f      	ldr	r0, [pc, #124]	; (80032a0 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8003224:	f7fd ff34 	bl	8001090 <_ZN7ButtonsC1EP9buttons_t>
Delay	my_delays_set({100,500,1000});								// CLASS "DELAY" instance
 8003228:	4a1e      	ldr	r2, [pc, #120]	; (80032a4 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 800322a:	f107 0320 	add.w	r3, r7, #32
 800322e:	ca07      	ldmia	r2, {r0, r1, r2}
 8003230:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003234:	f107 0320 	add.w	r3, r7, #32
 8003238:	61bb      	str	r3, [r7, #24]
 800323a:	2303      	movs	r3, #3
 800323c:	61fb      	str	r3, [r7, #28]
 800323e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003242:	4618      	mov	r0, r3
 8003244:	f7ff fc76 	bl	8002b34 <_ZNSaIiEC1Ev>
 8003248:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800324c:	f107 000c 	add.w	r0, r7, #12
 8003250:	f107 0218 	add.w	r2, r7, #24
 8003254:	ca06      	ldmia	r2, {r1, r2}
 8003256:	f7ff fc85 	bl	8002b64 <_ZNSt7__cxx114listIiSaIiEEC1ESt16initializer_listIiERKS1_>
 800325a:	f107 030c 	add.w	r3, r7, #12
 800325e:	4619      	mov	r1, r3
 8003260:	4811      	ldr	r0, [pc, #68]	; (80032a8 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 8003262:	f7fe f8d4 	bl	800140e <_ZN5DelayC1ERKNSt7__cxx114listIiSaIiEEE>
 8003266:	f107 030c 	add.w	r3, r7, #12
 800326a:	4618      	mov	r0, r3
 800326c:	f7ff fb7c 	bl	8002968 <_ZNSt7__cxx114listIiSaIiEED1Ev>
 8003270:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003274:	4618      	mov	r0, r3
 8003276:	f7ff fc69 	bl	8002b4c <_ZNSaIiED1Ev>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d107      	bne.n	8003290 <_Z41__static_initialization_and_destruction_0ii+0x90>
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003286:	4293      	cmp	r3, r2
 8003288:	d102      	bne.n	8003290 <_Z41__static_initialization_and_destruction_0ii+0x90>
 800328a:	4807      	ldr	r0, [pc, #28]	; (80032a8 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 800328c:	f7ff ffab 	bl	80031e6 <_ZN5DelayD1Ev>
}// MAIN ENDS HERE
 8003290:	bf00      	nop
 8003292:	3730      	adds	r7, #48	; 0x30
 8003294:	46bd      	mov	sp, r7
 8003296:	bd80      	pop	{r7, pc}
 8003298:	20000468 	.word	0x20000468
 800329c:	20000000 	.word	0x20000000
 80032a0:	20000600 	.word	0x20000600
 80032a4:	0800637c 	.word	0x0800637c
 80032a8:	2000063c 	.word	0x2000063c

080032ac <_ZNSt8_Rb_treeIiSt4pairIKiN5Delay15delay_details_tEESt10_Select1stIS4_ESt4lessIiESaIS4_EE13_Rb_tree_implIS8_Lb1EED1Ev>:
	struct _Rb_tree_impl
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b082      	sub	sp, #8
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
 80032b4:	6878      	ldr	r0, [r7, #4]
 80032b6:	f000 f81a 	bl	80032ee <_ZNSaISt13_Rb_tree_nodeISt4pairIKiN5Delay15delay_details_tEEEED1Ev>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	4618      	mov	r0, r3
 80032be:	3708      	adds	r7, #8
 80032c0:	46bd      	mov	sp, r7
 80032c2:	bd80      	pop	{r7, pc}

080032c4 <_ZNSt8_Rb_treeIiSt4pairIKiN5Delay15delay_details_tEESt10_Select1stIS4_ESt4lessIiESaIS4_EED1Ev>:
      ~_Rb_tree() _GLIBCXX_NOEXCEPT
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b082      	sub	sp, #8
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
      { _M_erase(_M_begin()); }
 80032cc:	6878      	ldr	r0, [r7, #4]
 80032ce:	f7fe fa96 	bl	80017fe <_ZNSt8_Rb_treeIiSt4pairIKiN5Delay15delay_details_tEESt10_Select1stIS4_ESt4lessIiESaIS4_EE8_M_beginEv>
 80032d2:	4603      	mov	r3, r0
 80032d4:	4619      	mov	r1, r3
 80032d6:	6878      	ldr	r0, [r7, #4]
 80032d8:	f000 f815 	bl	8003306 <_ZNSt8_Rb_treeIiSt4pairIKiN5Delay15delay_details_tEESt10_Select1stIS4_ESt4lessIiESaIS4_EE8_M_eraseEPSt13_Rb_tree_nodeIS4_E>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	4618      	mov	r0, r3
 80032e0:	f7ff ffe4 	bl	80032ac <_ZNSt8_Rb_treeIiSt4pairIKiN5Delay15delay_details_tEESt10_Select1stIS4_ESt4lessIiESaIS4_EE13_Rb_tree_implIS8_Lb1EED1Ev>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	4618      	mov	r0, r3
 80032e8:	3708      	adds	r7, #8
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bd80      	pop	{r7, pc}

080032ee <_ZNSaISt13_Rb_tree_nodeISt4pairIKiN5Delay15delay_details_tEEEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 80032ee:	b580      	push	{r7, lr}
 80032f0:	b082      	sub	sp, #8
 80032f2:	af00      	add	r7, sp, #0
 80032f4:	6078      	str	r0, [r7, #4]
 80032f6:	6878      	ldr	r0, [r7, #4]
 80032f8:	f000 f824 	bl	8003344 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKiN5Delay15delay_details_tEEEED1Ev>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	4618      	mov	r0, r3
 8003300:	3708      	adds	r7, #8
 8003302:	46bd      	mov	sp, r7
 8003304:	bd80      	pop	{r7, pc}

08003306 <_ZNSt8_Rb_treeIiSt4pairIKiN5Delay15delay_details_tEESt10_Select1stIS4_ESt4lessIiESaIS4_EE8_M_eraseEPSt13_Rb_tree_nodeIS4_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8003306:	b580      	push	{r7, lr}
 8003308:	b084      	sub	sp, #16
 800330a:	af00      	add	r7, sp, #0
 800330c:	6078      	str	r0, [r7, #4]
 800330e:	6039      	str	r1, [r7, #0]
      while (__x != 0)
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d012      	beq.n	800333c <_ZNSt8_Rb_treeIiSt4pairIKiN5Delay15delay_details_tEESt10_Select1stIS4_ESt4lessIiESaIS4_EE8_M_eraseEPSt13_Rb_tree_nodeIS4_E+0x36>
	  _M_erase(_S_right(__x));
 8003316:	6838      	ldr	r0, [r7, #0]
 8003318:	f7fe fb8e 	bl	8001a38 <_ZNSt8_Rb_treeIiSt4pairIKiN5Delay15delay_details_tEESt10_Select1stIS4_ESt4lessIiESaIS4_EE8_S_rightEPSt18_Rb_tree_node_base>
 800331c:	4603      	mov	r3, r0
 800331e:	4619      	mov	r1, r3
 8003320:	6878      	ldr	r0, [r7, #4]
 8003322:	f7ff fff0 	bl	8003306 <_ZNSt8_Rb_treeIiSt4pairIKiN5Delay15delay_details_tEESt10_Select1stIS4_ESt4lessIiESaIS4_EE8_M_eraseEPSt13_Rb_tree_nodeIS4_E>
	  _Link_type __y = _S_left(__x);
 8003326:	6838      	ldr	r0, [r7, #0]
 8003328:	f7fe fb91 	bl	8001a4e <_ZNSt8_Rb_treeIiSt4pairIKiN5Delay15delay_details_tEESt10_Select1stIS4_ESt4lessIiESaIS4_EE7_S_leftEPSt18_Rb_tree_node_base>
 800332c:	60f8      	str	r0, [r7, #12]
	  _M_drop_node(__x);
 800332e:	6839      	ldr	r1, [r7, #0]
 8003330:	6878      	ldr	r0, [r7, #4]
 8003332:	f7fe fb97 	bl	8001a64 <_ZNSt8_Rb_treeIiSt4pairIKiN5Delay15delay_details_tEESt10_Select1stIS4_ESt4lessIiESaIS4_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS4_E>
	  __x = __y;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 800333a:	e7e9      	b.n	8003310 <_ZNSt8_Rb_treeIiSt4pairIKiN5Delay15delay_details_tEESt10_Select1stIS4_ESt4lessIiESaIS4_EE8_M_eraseEPSt13_Rb_tree_nodeIS4_E+0xa>
    }
 800333c:	bf00      	nop
 800333e:	3710      	adds	r7, #16
 8003340:	46bd      	mov	sp, r7
 8003342:	bd80      	pop	{r7, pc}

08003344 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKiN5Delay15delay_details_tEEEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8003344:	b480      	push	{r7}
 8003346:	b083      	sub	sp, #12
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	4618      	mov	r0, r3
 8003350:	370c      	adds	r7, #12
 8003352:	46bd      	mov	sp, r7
 8003354:	bc80      	pop	{r7}
 8003356:	4770      	bx	lr

08003358 <_GLOBAL__sub_I_global_SysTick_Cnt>:
 8003358:	b580      	push	{r7, lr}
 800335a:	af00      	add	r7, sp, #0
 800335c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003360:	2001      	movs	r0, #1
 8003362:	f7ff ff4d 	bl	8003200 <_Z41__static_initialization_and_destruction_0ii>
 8003366:	bd80      	pop	{r7, pc}

08003368 <_GLOBAL__sub_D_global_SysTick_Cnt>:
 8003368:	b580      	push	{r7, lr}
 800336a:	af00      	add	r7, sp, #0
 800336c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003370:	2000      	movs	r0, #0
 8003372:	f7ff ff45 	bl	8003200 <_Z41__static_initialization_and_destruction_0ii>
 8003376:	bd80      	pop	{r7, pc}

08003378 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003378:	b480      	push	{r7}
 800337a:	af00      	add	r7, sp, #0
	return 1;
 800337c:	2301      	movs	r3, #1
}
 800337e:	4618      	mov	r0, r3
 8003380:	46bd      	mov	sp, r7
 8003382:	bc80      	pop	{r7}
 8003384:	4770      	bx	lr

08003386 <_kill>:

int _kill(int pid, int sig)
{
 8003386:	b580      	push	{r7, lr}
 8003388:	b082      	sub	sp, #8
 800338a:	af00      	add	r7, sp, #0
 800338c:	6078      	str	r0, [r7, #4]
 800338e:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003390:	f000 f9be 	bl	8003710 <__errno>
 8003394:	4603      	mov	r3, r0
 8003396:	2216      	movs	r2, #22
 8003398:	601a      	str	r2, [r3, #0]
	return -1;
 800339a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800339e:	4618      	mov	r0, r3
 80033a0:	3708      	adds	r7, #8
 80033a2:	46bd      	mov	sp, r7
 80033a4:	bd80      	pop	{r7, pc}

080033a6 <_exit>:

void _exit (int status)
{
 80033a6:	b580      	push	{r7, lr}
 80033a8:	b082      	sub	sp, #8
 80033aa:	af00      	add	r7, sp, #0
 80033ac:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80033ae:	f04f 31ff 	mov.w	r1, #4294967295
 80033b2:	6878      	ldr	r0, [r7, #4]
 80033b4:	f7ff ffe7 	bl	8003386 <_kill>
	while (1) {}		/* Make sure we hang here */
 80033b8:	e7fe      	b.n	80033b8 <_exit+0x12>

080033ba <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80033ba:	b580      	push	{r7, lr}
 80033bc:	b086      	sub	sp, #24
 80033be:	af00      	add	r7, sp, #0
 80033c0:	60f8      	str	r0, [r7, #12]
 80033c2:	60b9      	str	r1, [r7, #8]
 80033c4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80033c6:	2300      	movs	r3, #0
 80033c8:	617b      	str	r3, [r7, #20]
 80033ca:	e00a      	b.n	80033e2 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80033cc:	f3af 8000 	nop.w
 80033d0:	4601      	mov	r1, r0
 80033d2:	68bb      	ldr	r3, [r7, #8]
 80033d4:	1c5a      	adds	r2, r3, #1
 80033d6:	60ba      	str	r2, [r7, #8]
 80033d8:	b2ca      	uxtb	r2, r1
 80033da:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80033dc:	697b      	ldr	r3, [r7, #20]
 80033de:	3301      	adds	r3, #1
 80033e0:	617b      	str	r3, [r7, #20]
 80033e2:	697a      	ldr	r2, [r7, #20]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	429a      	cmp	r2, r3
 80033e8:	dbf0      	blt.n	80033cc <_read+0x12>
	}

return len;
 80033ea:	687b      	ldr	r3, [r7, #4]
}
 80033ec:	4618      	mov	r0, r3
 80033ee:	3718      	adds	r7, #24
 80033f0:	46bd      	mov	sp, r7
 80033f2:	bd80      	pop	{r7, pc}

080033f4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b086      	sub	sp, #24
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	60f8      	str	r0, [r7, #12]
 80033fc:	60b9      	str	r1, [r7, #8]
 80033fe:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003400:	2300      	movs	r3, #0
 8003402:	617b      	str	r3, [r7, #20]
 8003404:	e009      	b.n	800341a <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003406:	68bb      	ldr	r3, [r7, #8]
 8003408:	1c5a      	adds	r2, r3, #1
 800340a:	60ba      	str	r2, [r7, #8]
 800340c:	781b      	ldrb	r3, [r3, #0]
 800340e:	4618      	mov	r0, r3
 8003410:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003414:	697b      	ldr	r3, [r7, #20]
 8003416:	3301      	adds	r3, #1
 8003418:	617b      	str	r3, [r7, #20]
 800341a:	697a      	ldr	r2, [r7, #20]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	429a      	cmp	r2, r3
 8003420:	dbf1      	blt.n	8003406 <_write+0x12>
	}
	return len;
 8003422:	687b      	ldr	r3, [r7, #4]
}
 8003424:	4618      	mov	r0, r3
 8003426:	3718      	adds	r7, #24
 8003428:	46bd      	mov	sp, r7
 800342a:	bd80      	pop	{r7, pc}

0800342c <_close>:

int _close(int file)
{
 800342c:	b480      	push	{r7}
 800342e:	b083      	sub	sp, #12
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
	return -1;
 8003434:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003438:	4618      	mov	r0, r3
 800343a:	370c      	adds	r7, #12
 800343c:	46bd      	mov	sp, r7
 800343e:	bc80      	pop	{r7}
 8003440:	4770      	bx	lr

08003442 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003442:	b480      	push	{r7}
 8003444:	b083      	sub	sp, #12
 8003446:	af00      	add	r7, sp, #0
 8003448:	6078      	str	r0, [r7, #4]
 800344a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003452:	605a      	str	r2, [r3, #4]
	return 0;
 8003454:	2300      	movs	r3, #0
}
 8003456:	4618      	mov	r0, r3
 8003458:	370c      	adds	r7, #12
 800345a:	46bd      	mov	sp, r7
 800345c:	bc80      	pop	{r7}
 800345e:	4770      	bx	lr

08003460 <_isatty>:

int _isatty(int file)
{
 8003460:	b480      	push	{r7}
 8003462:	b083      	sub	sp, #12
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
	return 1;
 8003468:	2301      	movs	r3, #1
}
 800346a:	4618      	mov	r0, r3
 800346c:	370c      	adds	r7, #12
 800346e:	46bd      	mov	sp, r7
 8003470:	bc80      	pop	{r7}
 8003472:	4770      	bx	lr

08003474 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003474:	b480      	push	{r7}
 8003476:	b085      	sub	sp, #20
 8003478:	af00      	add	r7, sp, #0
 800347a:	60f8      	str	r0, [r7, #12]
 800347c:	60b9      	str	r1, [r7, #8]
 800347e:	607a      	str	r2, [r7, #4]
	return 0;
 8003480:	2300      	movs	r3, #0
}
 8003482:	4618      	mov	r0, r3
 8003484:	3714      	adds	r7, #20
 8003486:	46bd      	mov	sp, r7
 8003488:	bc80      	pop	{r7}
 800348a:	4770      	bx	lr

0800348c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b086      	sub	sp, #24
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003494:	4a14      	ldr	r2, [pc, #80]	; (80034e8 <_sbrk+0x5c>)
 8003496:	4b15      	ldr	r3, [pc, #84]	; (80034ec <_sbrk+0x60>)
 8003498:	1ad3      	subs	r3, r2, r3
 800349a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800349c:	697b      	ldr	r3, [r7, #20]
 800349e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80034a0:	4b13      	ldr	r3, [pc, #76]	; (80034f0 <_sbrk+0x64>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d102      	bne.n	80034ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80034a8:	4b11      	ldr	r3, [pc, #68]	; (80034f0 <_sbrk+0x64>)
 80034aa:	4a12      	ldr	r2, [pc, #72]	; (80034f4 <_sbrk+0x68>)
 80034ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80034ae:	4b10      	ldr	r3, [pc, #64]	; (80034f0 <_sbrk+0x64>)
 80034b0:	681a      	ldr	r2, [r3, #0]
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	4413      	add	r3, r2
 80034b6:	693a      	ldr	r2, [r7, #16]
 80034b8:	429a      	cmp	r2, r3
 80034ba:	d207      	bcs.n	80034cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80034bc:	f000 f928 	bl	8003710 <__errno>
 80034c0:	4603      	mov	r3, r0
 80034c2:	220c      	movs	r2, #12
 80034c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80034c6:	f04f 33ff 	mov.w	r3, #4294967295
 80034ca:	e009      	b.n	80034e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80034cc:	4b08      	ldr	r3, [pc, #32]	; (80034f0 <_sbrk+0x64>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80034d2:	4b07      	ldr	r3, [pc, #28]	; (80034f0 <_sbrk+0x64>)
 80034d4:	681a      	ldr	r2, [r3, #0]
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	4413      	add	r3, r2
 80034da:	4a05      	ldr	r2, [pc, #20]	; (80034f0 <_sbrk+0x64>)
 80034dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80034de:	68fb      	ldr	r3, [r7, #12]
}
 80034e0:	4618      	mov	r0, r3
 80034e2:	3718      	adds	r7, #24
 80034e4:	46bd      	mov	sp, r7
 80034e6:	bd80      	pop	{r7, pc}
 80034e8:	20005000 	.word	0x20005000
 80034ec:	00000400 	.word	0x00000400
 80034f0:	20000654 	.word	0x20000654
 80034f4:	20000670 	.word	0x20000670

080034f8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80034f8:	480d      	ldr	r0, [pc, #52]	; (8003530 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80034fa:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80034fc:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003500:	480c      	ldr	r0, [pc, #48]	; (8003534 <LoopForever+0x6>)
  ldr r1, =_edata
 8003502:	490d      	ldr	r1, [pc, #52]	; (8003538 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003504:	4a0d      	ldr	r2, [pc, #52]	; (800353c <LoopForever+0xe>)
  movs r3, #0
 8003506:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003508:	e002      	b.n	8003510 <LoopCopyDataInit>

0800350a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800350a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800350c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800350e:	3304      	adds	r3, #4

08003510 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003510:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003512:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003514:	d3f9      	bcc.n	800350a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003516:	4a0a      	ldr	r2, [pc, #40]	; (8003540 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003518:	4c0a      	ldr	r4, [pc, #40]	; (8003544 <LoopForever+0x16>)
  movs r3, #0
 800351a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800351c:	e001      	b.n	8003522 <LoopFillZerobss>

0800351e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800351e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003520:	3204      	adds	r2, #4

08003522 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003522:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003524:	d3fb      	bcc.n	800351e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8003526:	f000 f8f9 	bl	800371c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800352a:	f7ff fac1 	bl	8002ab0 <main>

0800352e <LoopForever>:

LoopForever:
    b LoopForever
 800352e:	e7fe      	b.n	800352e <LoopForever>
  ldr   r0, =_estack
 8003530:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8003534:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003538:	20000448 	.word	0x20000448
  ldr r2, =_sidata
 800353c:	08006774 	.word	0x08006774
  ldr r2, =_sbss
 8003540:	20000448 	.word	0x20000448
  ldr r4, =_ebss
 8003544:	2000066c 	.word	0x2000066c

08003548 <ADC3_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003548:	e7fe      	b.n	8003548 <ADC3_IRQHandler>

0800354a <_ZdlPvj>:
 800354a:	f000 b8cf 	b.w	80036ec <_ZdlPv>

0800354e <_Znwj>:
 800354e:	2801      	cmp	r0, #1
 8003550:	bf38      	it	cc
 8003552:	2001      	movcc	r0, #1
 8003554:	b510      	push	{r4, lr}
 8003556:	4604      	mov	r4, r0
 8003558:	4620      	mov	r0, r4
 800355a:	f000 f903 	bl	8003764 <malloc>
 800355e:	b930      	cbnz	r0, 800356e <_Znwj+0x20>
 8003560:	f000 f8c6 	bl	80036f0 <_ZSt15get_new_handlerv>
 8003564:	b908      	cbnz	r0, 800356a <_Znwj+0x1c>
 8003566:	f000 f8cb 	bl	8003700 <abort>
 800356a:	4780      	blx	r0
 800356c:	e7f4      	b.n	8003558 <_Znwj+0xa>
 800356e:	bd10      	pop	{r4, pc}

08003570 <_ZNSt8__detail15_List_node_base7_M_hookEPS0_>:
 8003570:	684b      	ldr	r3, [r1, #4]
 8003572:	6001      	str	r1, [r0, #0]
 8003574:	6043      	str	r3, [r0, #4]
 8003576:	684b      	ldr	r3, [r1, #4]
 8003578:	6018      	str	r0, [r3, #0]
 800357a:	6048      	str	r0, [r1, #4]
 800357c:	4770      	bx	lr

0800357e <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>:
 800357e:	68c3      	ldr	r3, [r0, #12]
 8003580:	b510      	push	{r4, lr}
 8003582:	689a      	ldr	r2, [r3, #8]
 8003584:	60c2      	str	r2, [r0, #12]
 8003586:	b102      	cbz	r2, 800358a <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0xc>
 8003588:	6050      	str	r0, [r2, #4]
 800358a:	6842      	ldr	r2, [r0, #4]
 800358c:	605a      	str	r2, [r3, #4]
 800358e:	680c      	ldr	r4, [r1, #0]
 8003590:	4284      	cmp	r4, r0
 8003592:	d103      	bne.n	800359c <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0x1e>
 8003594:	600b      	str	r3, [r1, #0]
 8003596:	6098      	str	r0, [r3, #8]
 8003598:	6043      	str	r3, [r0, #4]
 800359a:	bd10      	pop	{r4, pc}
 800359c:	6891      	ldr	r1, [r2, #8]
 800359e:	4281      	cmp	r1, r0
 80035a0:	bf0c      	ite	eq
 80035a2:	6093      	streq	r3, [r2, #8]
 80035a4:	60d3      	strne	r3, [r2, #12]
 80035a6:	e7f6      	b.n	8003596 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0x18>

080035a8 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>:
 80035a8:	6883      	ldr	r3, [r0, #8]
 80035aa:	b510      	push	{r4, lr}
 80035ac:	68da      	ldr	r2, [r3, #12]
 80035ae:	6082      	str	r2, [r0, #8]
 80035b0:	b102      	cbz	r2, 80035b4 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0xc>
 80035b2:	6050      	str	r0, [r2, #4]
 80035b4:	6842      	ldr	r2, [r0, #4]
 80035b6:	605a      	str	r2, [r3, #4]
 80035b8:	680c      	ldr	r4, [r1, #0]
 80035ba:	4284      	cmp	r4, r0
 80035bc:	d103      	bne.n	80035c6 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0x1e>
 80035be:	600b      	str	r3, [r1, #0]
 80035c0:	60d8      	str	r0, [r3, #12]
 80035c2:	6043      	str	r3, [r0, #4]
 80035c4:	bd10      	pop	{r4, pc}
 80035c6:	68d1      	ldr	r1, [r2, #12]
 80035c8:	4281      	cmp	r1, r0
 80035ca:	bf0c      	ite	eq
 80035cc:	60d3      	streq	r3, [r2, #12]
 80035ce:	6093      	strne	r3, [r2, #8]
 80035d0:	e7f6      	b.n	80035c0 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0x18>

080035d2 <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base>:
 80035d2:	68c3      	ldr	r3, [r0, #12]
 80035d4:	b123      	cbz	r3, 80035e0 <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0xe>
 80035d6:	4618      	mov	r0, r3
 80035d8:	689b      	ldr	r3, [r3, #8]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d1fb      	bne.n	80035d6 <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0x4>
 80035de:	4770      	bx	lr
 80035e0:	6843      	ldr	r3, [r0, #4]
 80035e2:	68da      	ldr	r2, [r3, #12]
 80035e4:	4282      	cmp	r2, r0
 80035e6:	d102      	bne.n	80035ee <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0x1c>
 80035e8:	4618      	mov	r0, r3
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	e7f9      	b.n	80035e2 <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0x10>
 80035ee:	68c2      	ldr	r2, [r0, #12]
 80035f0:	4293      	cmp	r3, r2
 80035f2:	bf18      	it	ne
 80035f4:	4618      	movne	r0, r3
 80035f6:	4770      	bx	lr

080035f8 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base>:
 80035f8:	7802      	ldrb	r2, [r0, #0]
 80035fa:	4603      	mov	r3, r0
 80035fc:	b92a      	cbnz	r2, 800360a <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x12>
 80035fe:	6842      	ldr	r2, [r0, #4]
 8003600:	6852      	ldr	r2, [r2, #4]
 8003602:	4282      	cmp	r2, r0
 8003604:	d101      	bne.n	800360a <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x12>
 8003606:	68d0      	ldr	r0, [r2, #12]
 8003608:	4770      	bx	lr
 800360a:	689a      	ldr	r2, [r3, #8]
 800360c:	b122      	cbz	r2, 8003618 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x20>
 800360e:	4610      	mov	r0, r2
 8003610:	68d2      	ldr	r2, [r2, #12]
 8003612:	2a00      	cmp	r2, #0
 8003614:	d1fb      	bne.n	800360e <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x16>
 8003616:	4770      	bx	lr
 8003618:	6858      	ldr	r0, [r3, #4]
 800361a:	6882      	ldr	r2, [r0, #8]
 800361c:	429a      	cmp	r2, r3
 800361e:	d102      	bne.n	8003626 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x2e>
 8003620:	4603      	mov	r3, r0
 8003622:	6840      	ldr	r0, [r0, #4]
 8003624:	e7f9      	b.n	800361a <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x22>
 8003626:	4770      	bx	lr

08003628 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>:
 8003628:	f7ff bfd3 	b.w	80035d2 <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base>

0800362c <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>:
 800362c:	f7ff bfe4 	b.w	80035f8 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base>

08003630 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>:
 8003630:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003634:	461e      	mov	r6, r3
 8003636:	f103 0804 	add.w	r8, r3, #4
 800363a:	2300      	movs	r3, #0
 800363c:	460c      	mov	r4, r1
 800363e:	e9c1 3302 	strd	r3, r3, [r1, #8]
 8003642:	604a      	str	r2, [r1, #4]
 8003644:	700b      	strb	r3, [r1, #0]
 8003646:	b300      	cbz	r0, 800368a <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x5a>
 8003648:	4296      	cmp	r6, r2
 800364a:	6091      	str	r1, [r2, #8]
 800364c:	d118      	bne.n	8003680 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x50>
 800364e:	6071      	str	r1, [r6, #4]
 8003650:	60f4      	str	r4, [r6, #12]
 8003652:	2701      	movs	r7, #1
 8003654:	f04f 0900 	mov.w	r9, #0
 8003658:	6873      	ldr	r3, [r6, #4]
 800365a:	42a3      	cmp	r3, r4
 800365c:	d03f      	beq.n	80036de <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0xae>
 800365e:	6860      	ldr	r0, [r4, #4]
 8003660:	7802      	ldrb	r2, [r0, #0]
 8003662:	2a00      	cmp	r2, #0
 8003664:	d13b      	bne.n	80036de <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0xae>
 8003666:	6845      	ldr	r5, [r0, #4]
 8003668:	68ab      	ldr	r3, [r5, #8]
 800366a:	4298      	cmp	r0, r3
 800366c:	d123      	bne.n	80036b6 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x86>
 800366e:	68eb      	ldr	r3, [r5, #12]
 8003670:	b183      	cbz	r3, 8003694 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x64>
 8003672:	781a      	ldrb	r2, [r3, #0]
 8003674:	b972      	cbnz	r2, 8003694 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x64>
 8003676:	7007      	strb	r7, [r0, #0]
 8003678:	701f      	strb	r7, [r3, #0]
 800367a:	702a      	strb	r2, [r5, #0]
 800367c:	462c      	mov	r4, r5
 800367e:	e7eb      	b.n	8003658 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x28>
 8003680:	68b3      	ldr	r3, [r6, #8]
 8003682:	4293      	cmp	r3, r2
 8003684:	d1e5      	bne.n	8003652 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
 8003686:	60b1      	str	r1, [r6, #8]
 8003688:	e7e3      	b.n	8003652 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
 800368a:	60d1      	str	r1, [r2, #12]
 800368c:	68f3      	ldr	r3, [r6, #12]
 800368e:	4293      	cmp	r3, r2
 8003690:	d1df      	bne.n	8003652 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
 8003692:	e7dd      	b.n	8003650 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x20>
 8003694:	68c3      	ldr	r3, [r0, #12]
 8003696:	42a3      	cmp	r3, r4
 8003698:	d103      	bne.n	80036a2 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x72>
 800369a:	4641      	mov	r1, r8
 800369c:	f7ff ff6f 	bl	800357e <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
 80036a0:	4604      	mov	r4, r0
 80036a2:	6863      	ldr	r3, [r4, #4]
 80036a4:	4641      	mov	r1, r8
 80036a6:	701f      	strb	r7, [r3, #0]
 80036a8:	4628      	mov	r0, r5
 80036aa:	f885 9000 	strb.w	r9, [r5]
 80036ae:	f7ff ff7b 	bl	80035a8 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
 80036b2:	4625      	mov	r5, r4
 80036b4:	e7e2      	b.n	800367c <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x4c>
 80036b6:	b113      	cbz	r3, 80036be <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x8e>
 80036b8:	781a      	ldrb	r2, [r3, #0]
 80036ba:	2a00      	cmp	r2, #0
 80036bc:	d0db      	beq.n	8003676 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x46>
 80036be:	6883      	ldr	r3, [r0, #8]
 80036c0:	42a3      	cmp	r3, r4
 80036c2:	d103      	bne.n	80036cc <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x9c>
 80036c4:	4641      	mov	r1, r8
 80036c6:	f7ff ff6f 	bl	80035a8 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
 80036ca:	4604      	mov	r4, r0
 80036cc:	6863      	ldr	r3, [r4, #4]
 80036ce:	4641      	mov	r1, r8
 80036d0:	701f      	strb	r7, [r3, #0]
 80036d2:	4628      	mov	r0, r5
 80036d4:	f885 9000 	strb.w	r9, [r5]
 80036d8:	f7ff ff51 	bl	800357e <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
 80036dc:	e7e9      	b.n	80036b2 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x82>
 80036de:	2201      	movs	r2, #1
 80036e0:	701a      	strb	r2, [r3, #0]
 80036e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080036e6 <_ZSt17__throw_bad_allocv>:
 80036e6:	b508      	push	{r3, lr}
 80036e8:	f000 f80a 	bl	8003700 <abort>

080036ec <_ZdlPv>:
 80036ec:	f000 b842 	b.w	8003774 <free>

080036f0 <_ZSt15get_new_handlerv>:
 80036f0:	4b02      	ldr	r3, [pc, #8]	; (80036fc <_ZSt15get_new_handlerv+0xc>)
 80036f2:	6818      	ldr	r0, [r3, #0]
 80036f4:	f3bf 8f5b 	dmb	ish
 80036f8:	4770      	bx	lr
 80036fa:	bf00      	nop
 80036fc:	20000658 	.word	0x20000658

08003700 <abort>:
 8003700:	2006      	movs	r0, #6
 8003702:	b508      	push	{r3, lr}
 8003704:	f000 fe3e 	bl	8004384 <raise>
 8003708:	2001      	movs	r0, #1
 800370a:	f7ff fe4c 	bl	80033a6 <_exit>
	...

08003710 <__errno>:
 8003710:	4b01      	ldr	r3, [pc, #4]	; (8003718 <__errno+0x8>)
 8003712:	6818      	ldr	r0, [r3, #0]
 8003714:	4770      	bx	lr
 8003716:	bf00      	nop
 8003718:	20000278 	.word	0x20000278

0800371c <__libc_init_array>:
 800371c:	b570      	push	{r4, r5, r6, lr}
 800371e:	2600      	movs	r6, #0
 8003720:	4d0c      	ldr	r5, [pc, #48]	; (8003754 <__libc_init_array+0x38>)
 8003722:	4c0d      	ldr	r4, [pc, #52]	; (8003758 <__libc_init_array+0x3c>)
 8003724:	1b64      	subs	r4, r4, r5
 8003726:	10a4      	asrs	r4, r4, #2
 8003728:	42a6      	cmp	r6, r4
 800372a:	d109      	bne.n	8003740 <__libc_init_array+0x24>
 800372c:	f002 fda6 	bl	800627c <_init>
 8003730:	2600      	movs	r6, #0
 8003732:	4d0a      	ldr	r5, [pc, #40]	; (800375c <__libc_init_array+0x40>)
 8003734:	4c0a      	ldr	r4, [pc, #40]	; (8003760 <__libc_init_array+0x44>)
 8003736:	1b64      	subs	r4, r4, r5
 8003738:	10a4      	asrs	r4, r4, #2
 800373a:	42a6      	cmp	r6, r4
 800373c:	d105      	bne.n	800374a <__libc_init_array+0x2e>
 800373e:	bd70      	pop	{r4, r5, r6, pc}
 8003740:	f855 3b04 	ldr.w	r3, [r5], #4
 8003744:	4798      	blx	r3
 8003746:	3601      	adds	r6, #1
 8003748:	e7ee      	b.n	8003728 <__libc_init_array+0xc>
 800374a:	f855 3b04 	ldr.w	r3, [r5], #4
 800374e:	4798      	blx	r3
 8003750:	3601      	adds	r6, #1
 8003752:	e7f2      	b.n	800373a <__libc_init_array+0x1e>
 8003754:	08006764 	.word	0x08006764
 8003758:	08006764 	.word	0x08006764
 800375c:	08006764 	.word	0x08006764
 8003760:	0800676c 	.word	0x0800676c

08003764 <malloc>:
 8003764:	4b02      	ldr	r3, [pc, #8]	; (8003770 <malloc+0xc>)
 8003766:	4601      	mov	r1, r0
 8003768:	6818      	ldr	r0, [r3, #0]
 800376a:	f000 b889 	b.w	8003880 <_malloc_r>
 800376e:	bf00      	nop
 8003770:	20000278 	.word	0x20000278

08003774 <free>:
 8003774:	4b02      	ldr	r3, [pc, #8]	; (8003780 <free+0xc>)
 8003776:	4601      	mov	r1, r0
 8003778:	6818      	ldr	r0, [r3, #0]
 800377a:	f000 b819 	b.w	80037b0 <_free_r>
 800377e:	bf00      	nop
 8003780:	20000278 	.word	0x20000278

08003784 <memcpy>:
 8003784:	440a      	add	r2, r1
 8003786:	4291      	cmp	r1, r2
 8003788:	f100 33ff 	add.w	r3, r0, #4294967295
 800378c:	d100      	bne.n	8003790 <memcpy+0xc>
 800378e:	4770      	bx	lr
 8003790:	b510      	push	{r4, lr}
 8003792:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003796:	4291      	cmp	r1, r2
 8003798:	f803 4f01 	strb.w	r4, [r3, #1]!
 800379c:	d1f9      	bne.n	8003792 <memcpy+0xe>
 800379e:	bd10      	pop	{r4, pc}

080037a0 <memset>:
 80037a0:	4603      	mov	r3, r0
 80037a2:	4402      	add	r2, r0
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d100      	bne.n	80037aa <memset+0xa>
 80037a8:	4770      	bx	lr
 80037aa:	f803 1b01 	strb.w	r1, [r3], #1
 80037ae:	e7f9      	b.n	80037a4 <memset+0x4>

080037b0 <_free_r>:
 80037b0:	b538      	push	{r3, r4, r5, lr}
 80037b2:	4605      	mov	r5, r0
 80037b4:	2900      	cmp	r1, #0
 80037b6:	d040      	beq.n	800383a <_free_r+0x8a>
 80037b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80037bc:	1f0c      	subs	r4, r1, #4
 80037be:	2b00      	cmp	r3, #0
 80037c0:	bfb8      	it	lt
 80037c2:	18e4      	addlt	r4, r4, r3
 80037c4:	f001 ff64 	bl	8005690 <__malloc_lock>
 80037c8:	4a1c      	ldr	r2, [pc, #112]	; (800383c <_free_r+0x8c>)
 80037ca:	6813      	ldr	r3, [r2, #0]
 80037cc:	b933      	cbnz	r3, 80037dc <_free_r+0x2c>
 80037ce:	6063      	str	r3, [r4, #4]
 80037d0:	6014      	str	r4, [r2, #0]
 80037d2:	4628      	mov	r0, r5
 80037d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80037d8:	f001 bf60 	b.w	800569c <__malloc_unlock>
 80037dc:	42a3      	cmp	r3, r4
 80037de:	d908      	bls.n	80037f2 <_free_r+0x42>
 80037e0:	6820      	ldr	r0, [r4, #0]
 80037e2:	1821      	adds	r1, r4, r0
 80037e4:	428b      	cmp	r3, r1
 80037e6:	bf01      	itttt	eq
 80037e8:	6819      	ldreq	r1, [r3, #0]
 80037ea:	685b      	ldreq	r3, [r3, #4]
 80037ec:	1809      	addeq	r1, r1, r0
 80037ee:	6021      	streq	r1, [r4, #0]
 80037f0:	e7ed      	b.n	80037ce <_free_r+0x1e>
 80037f2:	461a      	mov	r2, r3
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	b10b      	cbz	r3, 80037fc <_free_r+0x4c>
 80037f8:	42a3      	cmp	r3, r4
 80037fa:	d9fa      	bls.n	80037f2 <_free_r+0x42>
 80037fc:	6811      	ldr	r1, [r2, #0]
 80037fe:	1850      	adds	r0, r2, r1
 8003800:	42a0      	cmp	r0, r4
 8003802:	d10b      	bne.n	800381c <_free_r+0x6c>
 8003804:	6820      	ldr	r0, [r4, #0]
 8003806:	4401      	add	r1, r0
 8003808:	1850      	adds	r0, r2, r1
 800380a:	4283      	cmp	r3, r0
 800380c:	6011      	str	r1, [r2, #0]
 800380e:	d1e0      	bne.n	80037d2 <_free_r+0x22>
 8003810:	6818      	ldr	r0, [r3, #0]
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	4401      	add	r1, r0
 8003816:	6011      	str	r1, [r2, #0]
 8003818:	6053      	str	r3, [r2, #4]
 800381a:	e7da      	b.n	80037d2 <_free_r+0x22>
 800381c:	d902      	bls.n	8003824 <_free_r+0x74>
 800381e:	230c      	movs	r3, #12
 8003820:	602b      	str	r3, [r5, #0]
 8003822:	e7d6      	b.n	80037d2 <_free_r+0x22>
 8003824:	6820      	ldr	r0, [r4, #0]
 8003826:	1821      	adds	r1, r4, r0
 8003828:	428b      	cmp	r3, r1
 800382a:	bf01      	itttt	eq
 800382c:	6819      	ldreq	r1, [r3, #0]
 800382e:	685b      	ldreq	r3, [r3, #4]
 8003830:	1809      	addeq	r1, r1, r0
 8003832:	6021      	streq	r1, [r4, #0]
 8003834:	6063      	str	r3, [r4, #4]
 8003836:	6054      	str	r4, [r2, #4]
 8003838:	e7cb      	b.n	80037d2 <_free_r+0x22>
 800383a:	bd38      	pop	{r3, r4, r5, pc}
 800383c:	2000065c 	.word	0x2000065c

08003840 <sbrk_aligned>:
 8003840:	b570      	push	{r4, r5, r6, lr}
 8003842:	4e0e      	ldr	r6, [pc, #56]	; (800387c <sbrk_aligned+0x3c>)
 8003844:	460c      	mov	r4, r1
 8003846:	6831      	ldr	r1, [r6, #0]
 8003848:	4605      	mov	r5, r0
 800384a:	b911      	cbnz	r1, 8003852 <sbrk_aligned+0x12>
 800384c:	f000 fd62 	bl	8004314 <_sbrk_r>
 8003850:	6030      	str	r0, [r6, #0]
 8003852:	4621      	mov	r1, r4
 8003854:	4628      	mov	r0, r5
 8003856:	f000 fd5d 	bl	8004314 <_sbrk_r>
 800385a:	1c43      	adds	r3, r0, #1
 800385c:	d00a      	beq.n	8003874 <sbrk_aligned+0x34>
 800385e:	1cc4      	adds	r4, r0, #3
 8003860:	f024 0403 	bic.w	r4, r4, #3
 8003864:	42a0      	cmp	r0, r4
 8003866:	d007      	beq.n	8003878 <sbrk_aligned+0x38>
 8003868:	1a21      	subs	r1, r4, r0
 800386a:	4628      	mov	r0, r5
 800386c:	f000 fd52 	bl	8004314 <_sbrk_r>
 8003870:	3001      	adds	r0, #1
 8003872:	d101      	bne.n	8003878 <sbrk_aligned+0x38>
 8003874:	f04f 34ff 	mov.w	r4, #4294967295
 8003878:	4620      	mov	r0, r4
 800387a:	bd70      	pop	{r4, r5, r6, pc}
 800387c:	20000660 	.word	0x20000660

08003880 <_malloc_r>:
 8003880:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003884:	1ccd      	adds	r5, r1, #3
 8003886:	f025 0503 	bic.w	r5, r5, #3
 800388a:	3508      	adds	r5, #8
 800388c:	2d0c      	cmp	r5, #12
 800388e:	bf38      	it	cc
 8003890:	250c      	movcc	r5, #12
 8003892:	2d00      	cmp	r5, #0
 8003894:	4607      	mov	r7, r0
 8003896:	db01      	blt.n	800389c <_malloc_r+0x1c>
 8003898:	42a9      	cmp	r1, r5
 800389a:	d905      	bls.n	80038a8 <_malloc_r+0x28>
 800389c:	230c      	movs	r3, #12
 800389e:	2600      	movs	r6, #0
 80038a0:	603b      	str	r3, [r7, #0]
 80038a2:	4630      	mov	r0, r6
 80038a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80038a8:	4e2e      	ldr	r6, [pc, #184]	; (8003964 <_malloc_r+0xe4>)
 80038aa:	f001 fef1 	bl	8005690 <__malloc_lock>
 80038ae:	6833      	ldr	r3, [r6, #0]
 80038b0:	461c      	mov	r4, r3
 80038b2:	bb34      	cbnz	r4, 8003902 <_malloc_r+0x82>
 80038b4:	4629      	mov	r1, r5
 80038b6:	4638      	mov	r0, r7
 80038b8:	f7ff ffc2 	bl	8003840 <sbrk_aligned>
 80038bc:	1c43      	adds	r3, r0, #1
 80038be:	4604      	mov	r4, r0
 80038c0:	d14d      	bne.n	800395e <_malloc_r+0xde>
 80038c2:	6834      	ldr	r4, [r6, #0]
 80038c4:	4626      	mov	r6, r4
 80038c6:	2e00      	cmp	r6, #0
 80038c8:	d140      	bne.n	800394c <_malloc_r+0xcc>
 80038ca:	6823      	ldr	r3, [r4, #0]
 80038cc:	4631      	mov	r1, r6
 80038ce:	4638      	mov	r0, r7
 80038d0:	eb04 0803 	add.w	r8, r4, r3
 80038d4:	f000 fd1e 	bl	8004314 <_sbrk_r>
 80038d8:	4580      	cmp	r8, r0
 80038da:	d13a      	bne.n	8003952 <_malloc_r+0xd2>
 80038dc:	6821      	ldr	r1, [r4, #0]
 80038de:	3503      	adds	r5, #3
 80038e0:	1a6d      	subs	r5, r5, r1
 80038e2:	f025 0503 	bic.w	r5, r5, #3
 80038e6:	3508      	adds	r5, #8
 80038e8:	2d0c      	cmp	r5, #12
 80038ea:	bf38      	it	cc
 80038ec:	250c      	movcc	r5, #12
 80038ee:	4638      	mov	r0, r7
 80038f0:	4629      	mov	r1, r5
 80038f2:	f7ff ffa5 	bl	8003840 <sbrk_aligned>
 80038f6:	3001      	adds	r0, #1
 80038f8:	d02b      	beq.n	8003952 <_malloc_r+0xd2>
 80038fa:	6823      	ldr	r3, [r4, #0]
 80038fc:	442b      	add	r3, r5
 80038fe:	6023      	str	r3, [r4, #0]
 8003900:	e00e      	b.n	8003920 <_malloc_r+0xa0>
 8003902:	6822      	ldr	r2, [r4, #0]
 8003904:	1b52      	subs	r2, r2, r5
 8003906:	d41e      	bmi.n	8003946 <_malloc_r+0xc6>
 8003908:	2a0b      	cmp	r2, #11
 800390a:	d916      	bls.n	800393a <_malloc_r+0xba>
 800390c:	1961      	adds	r1, r4, r5
 800390e:	42a3      	cmp	r3, r4
 8003910:	6025      	str	r5, [r4, #0]
 8003912:	bf18      	it	ne
 8003914:	6059      	strne	r1, [r3, #4]
 8003916:	6863      	ldr	r3, [r4, #4]
 8003918:	bf08      	it	eq
 800391a:	6031      	streq	r1, [r6, #0]
 800391c:	5162      	str	r2, [r4, r5]
 800391e:	604b      	str	r3, [r1, #4]
 8003920:	4638      	mov	r0, r7
 8003922:	f104 060b 	add.w	r6, r4, #11
 8003926:	f001 feb9 	bl	800569c <__malloc_unlock>
 800392a:	f026 0607 	bic.w	r6, r6, #7
 800392e:	1d23      	adds	r3, r4, #4
 8003930:	1af2      	subs	r2, r6, r3
 8003932:	d0b6      	beq.n	80038a2 <_malloc_r+0x22>
 8003934:	1b9b      	subs	r3, r3, r6
 8003936:	50a3      	str	r3, [r4, r2]
 8003938:	e7b3      	b.n	80038a2 <_malloc_r+0x22>
 800393a:	6862      	ldr	r2, [r4, #4]
 800393c:	42a3      	cmp	r3, r4
 800393e:	bf0c      	ite	eq
 8003940:	6032      	streq	r2, [r6, #0]
 8003942:	605a      	strne	r2, [r3, #4]
 8003944:	e7ec      	b.n	8003920 <_malloc_r+0xa0>
 8003946:	4623      	mov	r3, r4
 8003948:	6864      	ldr	r4, [r4, #4]
 800394a:	e7b2      	b.n	80038b2 <_malloc_r+0x32>
 800394c:	4634      	mov	r4, r6
 800394e:	6876      	ldr	r6, [r6, #4]
 8003950:	e7b9      	b.n	80038c6 <_malloc_r+0x46>
 8003952:	230c      	movs	r3, #12
 8003954:	4638      	mov	r0, r7
 8003956:	603b      	str	r3, [r7, #0]
 8003958:	f001 fea0 	bl	800569c <__malloc_unlock>
 800395c:	e7a1      	b.n	80038a2 <_malloc_r+0x22>
 800395e:	6025      	str	r5, [r4, #0]
 8003960:	e7de      	b.n	8003920 <_malloc_r+0xa0>
 8003962:	bf00      	nop
 8003964:	2000065c 	.word	0x2000065c

08003968 <__cvt>:
 8003968:	2b00      	cmp	r3, #0
 800396a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800396e:	461f      	mov	r7, r3
 8003970:	bfbb      	ittet	lt
 8003972:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8003976:	461f      	movlt	r7, r3
 8003978:	2300      	movge	r3, #0
 800397a:	232d      	movlt	r3, #45	; 0x2d
 800397c:	b088      	sub	sp, #32
 800397e:	4614      	mov	r4, r2
 8003980:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8003982:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8003984:	7013      	strb	r3, [r2, #0]
 8003986:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8003988:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800398c:	f023 0820 	bic.w	r8, r3, #32
 8003990:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003994:	d005      	beq.n	80039a2 <__cvt+0x3a>
 8003996:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800399a:	d100      	bne.n	800399e <__cvt+0x36>
 800399c:	3501      	adds	r5, #1
 800399e:	2302      	movs	r3, #2
 80039a0:	e000      	b.n	80039a4 <__cvt+0x3c>
 80039a2:	2303      	movs	r3, #3
 80039a4:	aa07      	add	r2, sp, #28
 80039a6:	9204      	str	r2, [sp, #16]
 80039a8:	aa06      	add	r2, sp, #24
 80039aa:	e9cd a202 	strd	sl, r2, [sp, #8]
 80039ae:	e9cd 3500 	strd	r3, r5, [sp]
 80039b2:	4622      	mov	r2, r4
 80039b4:	463b      	mov	r3, r7
 80039b6:	f000 fe4f 	bl	8004658 <_dtoa_r>
 80039ba:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80039be:	4606      	mov	r6, r0
 80039c0:	d102      	bne.n	80039c8 <__cvt+0x60>
 80039c2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80039c4:	07db      	lsls	r3, r3, #31
 80039c6:	d522      	bpl.n	8003a0e <__cvt+0xa6>
 80039c8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80039cc:	eb06 0905 	add.w	r9, r6, r5
 80039d0:	d110      	bne.n	80039f4 <__cvt+0x8c>
 80039d2:	7833      	ldrb	r3, [r6, #0]
 80039d4:	2b30      	cmp	r3, #48	; 0x30
 80039d6:	d10a      	bne.n	80039ee <__cvt+0x86>
 80039d8:	2200      	movs	r2, #0
 80039da:	2300      	movs	r3, #0
 80039dc:	4620      	mov	r0, r4
 80039de:	4639      	mov	r1, r7
 80039e0:	f7fd fae6 	bl	8000fb0 <__aeabi_dcmpeq>
 80039e4:	b918      	cbnz	r0, 80039ee <__cvt+0x86>
 80039e6:	f1c5 0501 	rsb	r5, r5, #1
 80039ea:	f8ca 5000 	str.w	r5, [sl]
 80039ee:	f8da 3000 	ldr.w	r3, [sl]
 80039f2:	4499      	add	r9, r3
 80039f4:	2200      	movs	r2, #0
 80039f6:	2300      	movs	r3, #0
 80039f8:	4620      	mov	r0, r4
 80039fa:	4639      	mov	r1, r7
 80039fc:	f7fd fad8 	bl	8000fb0 <__aeabi_dcmpeq>
 8003a00:	b108      	cbz	r0, 8003a06 <__cvt+0x9e>
 8003a02:	f8cd 901c 	str.w	r9, [sp, #28]
 8003a06:	2230      	movs	r2, #48	; 0x30
 8003a08:	9b07      	ldr	r3, [sp, #28]
 8003a0a:	454b      	cmp	r3, r9
 8003a0c:	d307      	bcc.n	8003a1e <__cvt+0xb6>
 8003a0e:	4630      	mov	r0, r6
 8003a10:	9b07      	ldr	r3, [sp, #28]
 8003a12:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8003a14:	1b9b      	subs	r3, r3, r6
 8003a16:	6013      	str	r3, [r2, #0]
 8003a18:	b008      	add	sp, #32
 8003a1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a1e:	1c59      	adds	r1, r3, #1
 8003a20:	9107      	str	r1, [sp, #28]
 8003a22:	701a      	strb	r2, [r3, #0]
 8003a24:	e7f0      	b.n	8003a08 <__cvt+0xa0>

08003a26 <__exponent>:
 8003a26:	4603      	mov	r3, r0
 8003a28:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003a2a:	2900      	cmp	r1, #0
 8003a2c:	f803 2b02 	strb.w	r2, [r3], #2
 8003a30:	bfb6      	itet	lt
 8003a32:	222d      	movlt	r2, #45	; 0x2d
 8003a34:	222b      	movge	r2, #43	; 0x2b
 8003a36:	4249      	neglt	r1, r1
 8003a38:	2909      	cmp	r1, #9
 8003a3a:	7042      	strb	r2, [r0, #1]
 8003a3c:	dd2b      	ble.n	8003a96 <__exponent+0x70>
 8003a3e:	f10d 0407 	add.w	r4, sp, #7
 8003a42:	46a4      	mov	ip, r4
 8003a44:	270a      	movs	r7, #10
 8003a46:	fb91 f6f7 	sdiv	r6, r1, r7
 8003a4a:	460a      	mov	r2, r1
 8003a4c:	46a6      	mov	lr, r4
 8003a4e:	fb07 1516 	mls	r5, r7, r6, r1
 8003a52:	2a63      	cmp	r2, #99	; 0x63
 8003a54:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8003a58:	4631      	mov	r1, r6
 8003a5a:	f104 34ff 	add.w	r4, r4, #4294967295
 8003a5e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8003a62:	dcf0      	bgt.n	8003a46 <__exponent+0x20>
 8003a64:	3130      	adds	r1, #48	; 0x30
 8003a66:	f1ae 0502 	sub.w	r5, lr, #2
 8003a6a:	f804 1c01 	strb.w	r1, [r4, #-1]
 8003a6e:	4629      	mov	r1, r5
 8003a70:	1c44      	adds	r4, r0, #1
 8003a72:	4561      	cmp	r1, ip
 8003a74:	d30a      	bcc.n	8003a8c <__exponent+0x66>
 8003a76:	f10d 0209 	add.w	r2, sp, #9
 8003a7a:	eba2 020e 	sub.w	r2, r2, lr
 8003a7e:	4565      	cmp	r5, ip
 8003a80:	bf88      	it	hi
 8003a82:	2200      	movhi	r2, #0
 8003a84:	4413      	add	r3, r2
 8003a86:	1a18      	subs	r0, r3, r0
 8003a88:	b003      	add	sp, #12
 8003a8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003a8c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003a90:	f804 2f01 	strb.w	r2, [r4, #1]!
 8003a94:	e7ed      	b.n	8003a72 <__exponent+0x4c>
 8003a96:	2330      	movs	r3, #48	; 0x30
 8003a98:	3130      	adds	r1, #48	; 0x30
 8003a9a:	7083      	strb	r3, [r0, #2]
 8003a9c:	70c1      	strb	r1, [r0, #3]
 8003a9e:	1d03      	adds	r3, r0, #4
 8003aa0:	e7f1      	b.n	8003a86 <__exponent+0x60>
	...

08003aa4 <_printf_float>:
 8003aa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003aa8:	b091      	sub	sp, #68	; 0x44
 8003aaa:	460c      	mov	r4, r1
 8003aac:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8003ab0:	4616      	mov	r6, r2
 8003ab2:	461f      	mov	r7, r3
 8003ab4:	4605      	mov	r5, r0
 8003ab6:	f001 fd71 	bl	800559c <_localeconv_r>
 8003aba:	6803      	ldr	r3, [r0, #0]
 8003abc:	4618      	mov	r0, r3
 8003abe:	9309      	str	r3, [sp, #36]	; 0x24
 8003ac0:	f7fd fa18 	bl	8000ef4 <strlen>
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	930e      	str	r3, [sp, #56]	; 0x38
 8003ac8:	f8d8 3000 	ldr.w	r3, [r8]
 8003acc:	900a      	str	r0, [sp, #40]	; 0x28
 8003ace:	3307      	adds	r3, #7
 8003ad0:	f023 0307 	bic.w	r3, r3, #7
 8003ad4:	f103 0208 	add.w	r2, r3, #8
 8003ad8:	f894 9018 	ldrb.w	r9, [r4, #24]
 8003adc:	f8d4 b000 	ldr.w	fp, [r4]
 8003ae0:	f8c8 2000 	str.w	r2, [r8]
 8003ae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ae8:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8003aec:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8003af0:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8003af4:	930b      	str	r3, [sp, #44]	; 0x2c
 8003af6:	f04f 32ff 	mov.w	r2, #4294967295
 8003afa:	4640      	mov	r0, r8
 8003afc:	4b9c      	ldr	r3, [pc, #624]	; (8003d70 <_printf_float+0x2cc>)
 8003afe:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003b00:	f7fd fa88 	bl	8001014 <__aeabi_dcmpun>
 8003b04:	bb70      	cbnz	r0, 8003b64 <_printf_float+0xc0>
 8003b06:	f04f 32ff 	mov.w	r2, #4294967295
 8003b0a:	4640      	mov	r0, r8
 8003b0c:	4b98      	ldr	r3, [pc, #608]	; (8003d70 <_printf_float+0x2cc>)
 8003b0e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003b10:	f7fd fa62 	bl	8000fd8 <__aeabi_dcmple>
 8003b14:	bb30      	cbnz	r0, 8003b64 <_printf_float+0xc0>
 8003b16:	2200      	movs	r2, #0
 8003b18:	2300      	movs	r3, #0
 8003b1a:	4640      	mov	r0, r8
 8003b1c:	4651      	mov	r1, sl
 8003b1e:	f7fd fa51 	bl	8000fc4 <__aeabi_dcmplt>
 8003b22:	b110      	cbz	r0, 8003b2a <_printf_float+0x86>
 8003b24:	232d      	movs	r3, #45	; 0x2d
 8003b26:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003b2a:	4b92      	ldr	r3, [pc, #584]	; (8003d74 <_printf_float+0x2d0>)
 8003b2c:	4892      	ldr	r0, [pc, #584]	; (8003d78 <_printf_float+0x2d4>)
 8003b2e:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8003b32:	bf94      	ite	ls
 8003b34:	4698      	movls	r8, r3
 8003b36:	4680      	movhi	r8, r0
 8003b38:	2303      	movs	r3, #3
 8003b3a:	f04f 0a00 	mov.w	sl, #0
 8003b3e:	6123      	str	r3, [r4, #16]
 8003b40:	f02b 0304 	bic.w	r3, fp, #4
 8003b44:	6023      	str	r3, [r4, #0]
 8003b46:	4633      	mov	r3, r6
 8003b48:	4621      	mov	r1, r4
 8003b4a:	4628      	mov	r0, r5
 8003b4c:	9700      	str	r7, [sp, #0]
 8003b4e:	aa0f      	add	r2, sp, #60	; 0x3c
 8003b50:	f000 f9d4 	bl	8003efc <_printf_common>
 8003b54:	3001      	adds	r0, #1
 8003b56:	f040 8090 	bne.w	8003c7a <_printf_float+0x1d6>
 8003b5a:	f04f 30ff 	mov.w	r0, #4294967295
 8003b5e:	b011      	add	sp, #68	; 0x44
 8003b60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b64:	4642      	mov	r2, r8
 8003b66:	4653      	mov	r3, sl
 8003b68:	4640      	mov	r0, r8
 8003b6a:	4651      	mov	r1, sl
 8003b6c:	f7fd fa52 	bl	8001014 <__aeabi_dcmpun>
 8003b70:	b148      	cbz	r0, 8003b86 <_printf_float+0xe2>
 8003b72:	f1ba 0f00 	cmp.w	sl, #0
 8003b76:	bfb8      	it	lt
 8003b78:	232d      	movlt	r3, #45	; 0x2d
 8003b7a:	4880      	ldr	r0, [pc, #512]	; (8003d7c <_printf_float+0x2d8>)
 8003b7c:	bfb8      	it	lt
 8003b7e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8003b82:	4b7f      	ldr	r3, [pc, #508]	; (8003d80 <_printf_float+0x2dc>)
 8003b84:	e7d3      	b.n	8003b2e <_printf_float+0x8a>
 8003b86:	6863      	ldr	r3, [r4, #4]
 8003b88:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8003b8c:	1c5a      	adds	r2, r3, #1
 8003b8e:	d142      	bne.n	8003c16 <_printf_float+0x172>
 8003b90:	2306      	movs	r3, #6
 8003b92:	6063      	str	r3, [r4, #4]
 8003b94:	2200      	movs	r2, #0
 8003b96:	9206      	str	r2, [sp, #24]
 8003b98:	aa0e      	add	r2, sp, #56	; 0x38
 8003b9a:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8003b9e:	aa0d      	add	r2, sp, #52	; 0x34
 8003ba0:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8003ba4:	9203      	str	r2, [sp, #12]
 8003ba6:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8003baa:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8003bae:	6023      	str	r3, [r4, #0]
 8003bb0:	6863      	ldr	r3, [r4, #4]
 8003bb2:	4642      	mov	r2, r8
 8003bb4:	9300      	str	r3, [sp, #0]
 8003bb6:	4628      	mov	r0, r5
 8003bb8:	4653      	mov	r3, sl
 8003bba:	910b      	str	r1, [sp, #44]	; 0x2c
 8003bbc:	f7ff fed4 	bl	8003968 <__cvt>
 8003bc0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003bc2:	4680      	mov	r8, r0
 8003bc4:	2947      	cmp	r1, #71	; 0x47
 8003bc6:	990d      	ldr	r1, [sp, #52]	; 0x34
 8003bc8:	d108      	bne.n	8003bdc <_printf_float+0x138>
 8003bca:	1cc8      	adds	r0, r1, #3
 8003bcc:	db02      	blt.n	8003bd4 <_printf_float+0x130>
 8003bce:	6863      	ldr	r3, [r4, #4]
 8003bd0:	4299      	cmp	r1, r3
 8003bd2:	dd40      	ble.n	8003c56 <_printf_float+0x1b2>
 8003bd4:	f1a9 0902 	sub.w	r9, r9, #2
 8003bd8:	fa5f f989 	uxtb.w	r9, r9
 8003bdc:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8003be0:	d81f      	bhi.n	8003c22 <_printf_float+0x17e>
 8003be2:	464a      	mov	r2, r9
 8003be4:	3901      	subs	r1, #1
 8003be6:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003bea:	910d      	str	r1, [sp, #52]	; 0x34
 8003bec:	f7ff ff1b 	bl	8003a26 <__exponent>
 8003bf0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003bf2:	4682      	mov	sl, r0
 8003bf4:	1813      	adds	r3, r2, r0
 8003bf6:	2a01      	cmp	r2, #1
 8003bf8:	6123      	str	r3, [r4, #16]
 8003bfa:	dc02      	bgt.n	8003c02 <_printf_float+0x15e>
 8003bfc:	6822      	ldr	r2, [r4, #0]
 8003bfe:	07d2      	lsls	r2, r2, #31
 8003c00:	d501      	bpl.n	8003c06 <_printf_float+0x162>
 8003c02:	3301      	adds	r3, #1
 8003c04:	6123      	str	r3, [r4, #16]
 8003c06:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d09b      	beq.n	8003b46 <_printf_float+0xa2>
 8003c0e:	232d      	movs	r3, #45	; 0x2d
 8003c10:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003c14:	e797      	b.n	8003b46 <_printf_float+0xa2>
 8003c16:	2947      	cmp	r1, #71	; 0x47
 8003c18:	d1bc      	bne.n	8003b94 <_printf_float+0xf0>
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d1ba      	bne.n	8003b94 <_printf_float+0xf0>
 8003c1e:	2301      	movs	r3, #1
 8003c20:	e7b7      	b.n	8003b92 <_printf_float+0xee>
 8003c22:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8003c26:	d118      	bne.n	8003c5a <_printf_float+0x1b6>
 8003c28:	2900      	cmp	r1, #0
 8003c2a:	6863      	ldr	r3, [r4, #4]
 8003c2c:	dd0b      	ble.n	8003c46 <_printf_float+0x1a2>
 8003c2e:	6121      	str	r1, [r4, #16]
 8003c30:	b913      	cbnz	r3, 8003c38 <_printf_float+0x194>
 8003c32:	6822      	ldr	r2, [r4, #0]
 8003c34:	07d0      	lsls	r0, r2, #31
 8003c36:	d502      	bpl.n	8003c3e <_printf_float+0x19a>
 8003c38:	3301      	adds	r3, #1
 8003c3a:	440b      	add	r3, r1
 8003c3c:	6123      	str	r3, [r4, #16]
 8003c3e:	f04f 0a00 	mov.w	sl, #0
 8003c42:	65a1      	str	r1, [r4, #88]	; 0x58
 8003c44:	e7df      	b.n	8003c06 <_printf_float+0x162>
 8003c46:	b913      	cbnz	r3, 8003c4e <_printf_float+0x1aa>
 8003c48:	6822      	ldr	r2, [r4, #0]
 8003c4a:	07d2      	lsls	r2, r2, #31
 8003c4c:	d501      	bpl.n	8003c52 <_printf_float+0x1ae>
 8003c4e:	3302      	adds	r3, #2
 8003c50:	e7f4      	b.n	8003c3c <_printf_float+0x198>
 8003c52:	2301      	movs	r3, #1
 8003c54:	e7f2      	b.n	8003c3c <_printf_float+0x198>
 8003c56:	f04f 0967 	mov.w	r9, #103	; 0x67
 8003c5a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003c5c:	4299      	cmp	r1, r3
 8003c5e:	db05      	blt.n	8003c6c <_printf_float+0x1c8>
 8003c60:	6823      	ldr	r3, [r4, #0]
 8003c62:	6121      	str	r1, [r4, #16]
 8003c64:	07d8      	lsls	r0, r3, #31
 8003c66:	d5ea      	bpl.n	8003c3e <_printf_float+0x19a>
 8003c68:	1c4b      	adds	r3, r1, #1
 8003c6a:	e7e7      	b.n	8003c3c <_printf_float+0x198>
 8003c6c:	2900      	cmp	r1, #0
 8003c6e:	bfcc      	ite	gt
 8003c70:	2201      	movgt	r2, #1
 8003c72:	f1c1 0202 	rsble	r2, r1, #2
 8003c76:	4413      	add	r3, r2
 8003c78:	e7e0      	b.n	8003c3c <_printf_float+0x198>
 8003c7a:	6823      	ldr	r3, [r4, #0]
 8003c7c:	055a      	lsls	r2, r3, #21
 8003c7e:	d407      	bmi.n	8003c90 <_printf_float+0x1ec>
 8003c80:	6923      	ldr	r3, [r4, #16]
 8003c82:	4642      	mov	r2, r8
 8003c84:	4631      	mov	r1, r6
 8003c86:	4628      	mov	r0, r5
 8003c88:	47b8      	blx	r7
 8003c8a:	3001      	adds	r0, #1
 8003c8c:	d12b      	bne.n	8003ce6 <_printf_float+0x242>
 8003c8e:	e764      	b.n	8003b5a <_printf_float+0xb6>
 8003c90:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8003c94:	f240 80dd 	bls.w	8003e52 <_printf_float+0x3ae>
 8003c98:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	f7fd f986 	bl	8000fb0 <__aeabi_dcmpeq>
 8003ca4:	2800      	cmp	r0, #0
 8003ca6:	d033      	beq.n	8003d10 <_printf_float+0x26c>
 8003ca8:	2301      	movs	r3, #1
 8003caa:	4631      	mov	r1, r6
 8003cac:	4628      	mov	r0, r5
 8003cae:	4a35      	ldr	r2, [pc, #212]	; (8003d84 <_printf_float+0x2e0>)
 8003cb0:	47b8      	blx	r7
 8003cb2:	3001      	adds	r0, #1
 8003cb4:	f43f af51 	beq.w	8003b5a <_printf_float+0xb6>
 8003cb8:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003cbc:	429a      	cmp	r2, r3
 8003cbe:	db02      	blt.n	8003cc6 <_printf_float+0x222>
 8003cc0:	6823      	ldr	r3, [r4, #0]
 8003cc2:	07d8      	lsls	r0, r3, #31
 8003cc4:	d50f      	bpl.n	8003ce6 <_printf_float+0x242>
 8003cc6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003cca:	4631      	mov	r1, r6
 8003ccc:	4628      	mov	r0, r5
 8003cce:	47b8      	blx	r7
 8003cd0:	3001      	adds	r0, #1
 8003cd2:	f43f af42 	beq.w	8003b5a <_printf_float+0xb6>
 8003cd6:	f04f 0800 	mov.w	r8, #0
 8003cda:	f104 091a 	add.w	r9, r4, #26
 8003cde:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003ce0:	3b01      	subs	r3, #1
 8003ce2:	4543      	cmp	r3, r8
 8003ce4:	dc09      	bgt.n	8003cfa <_printf_float+0x256>
 8003ce6:	6823      	ldr	r3, [r4, #0]
 8003ce8:	079b      	lsls	r3, r3, #30
 8003cea:	f100 8102 	bmi.w	8003ef2 <_printf_float+0x44e>
 8003cee:	68e0      	ldr	r0, [r4, #12]
 8003cf0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003cf2:	4298      	cmp	r0, r3
 8003cf4:	bfb8      	it	lt
 8003cf6:	4618      	movlt	r0, r3
 8003cf8:	e731      	b.n	8003b5e <_printf_float+0xba>
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	464a      	mov	r2, r9
 8003cfe:	4631      	mov	r1, r6
 8003d00:	4628      	mov	r0, r5
 8003d02:	47b8      	blx	r7
 8003d04:	3001      	adds	r0, #1
 8003d06:	f43f af28 	beq.w	8003b5a <_printf_float+0xb6>
 8003d0a:	f108 0801 	add.w	r8, r8, #1
 8003d0e:	e7e6      	b.n	8003cde <_printf_float+0x23a>
 8003d10:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	dc38      	bgt.n	8003d88 <_printf_float+0x2e4>
 8003d16:	2301      	movs	r3, #1
 8003d18:	4631      	mov	r1, r6
 8003d1a:	4628      	mov	r0, r5
 8003d1c:	4a19      	ldr	r2, [pc, #100]	; (8003d84 <_printf_float+0x2e0>)
 8003d1e:	47b8      	blx	r7
 8003d20:	3001      	adds	r0, #1
 8003d22:	f43f af1a 	beq.w	8003b5a <_printf_float+0xb6>
 8003d26:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003d2a:	4313      	orrs	r3, r2
 8003d2c:	d102      	bne.n	8003d34 <_printf_float+0x290>
 8003d2e:	6823      	ldr	r3, [r4, #0]
 8003d30:	07d9      	lsls	r1, r3, #31
 8003d32:	d5d8      	bpl.n	8003ce6 <_printf_float+0x242>
 8003d34:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003d38:	4631      	mov	r1, r6
 8003d3a:	4628      	mov	r0, r5
 8003d3c:	47b8      	blx	r7
 8003d3e:	3001      	adds	r0, #1
 8003d40:	f43f af0b 	beq.w	8003b5a <_printf_float+0xb6>
 8003d44:	f04f 0900 	mov.w	r9, #0
 8003d48:	f104 0a1a 	add.w	sl, r4, #26
 8003d4c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003d4e:	425b      	negs	r3, r3
 8003d50:	454b      	cmp	r3, r9
 8003d52:	dc01      	bgt.n	8003d58 <_printf_float+0x2b4>
 8003d54:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003d56:	e794      	b.n	8003c82 <_printf_float+0x1de>
 8003d58:	2301      	movs	r3, #1
 8003d5a:	4652      	mov	r2, sl
 8003d5c:	4631      	mov	r1, r6
 8003d5e:	4628      	mov	r0, r5
 8003d60:	47b8      	blx	r7
 8003d62:	3001      	adds	r0, #1
 8003d64:	f43f aef9 	beq.w	8003b5a <_printf_float+0xb6>
 8003d68:	f109 0901 	add.w	r9, r9, #1
 8003d6c:	e7ee      	b.n	8003d4c <_printf_float+0x2a8>
 8003d6e:	bf00      	nop
 8003d70:	7fefffff 	.word	0x7fefffff
 8003d74:	0800638c 	.word	0x0800638c
 8003d78:	08006390 	.word	0x08006390
 8003d7c:	08006398 	.word	0x08006398
 8003d80:	08006394 	.word	0x08006394
 8003d84:	0800639c 	.word	0x0800639c
 8003d88:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003d8a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003d8c:	429a      	cmp	r2, r3
 8003d8e:	bfa8      	it	ge
 8003d90:	461a      	movge	r2, r3
 8003d92:	2a00      	cmp	r2, #0
 8003d94:	4691      	mov	r9, r2
 8003d96:	dc37      	bgt.n	8003e08 <_printf_float+0x364>
 8003d98:	f04f 0b00 	mov.w	fp, #0
 8003d9c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003da0:	f104 021a 	add.w	r2, r4, #26
 8003da4:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8003da8:	ebaa 0309 	sub.w	r3, sl, r9
 8003dac:	455b      	cmp	r3, fp
 8003dae:	dc33      	bgt.n	8003e18 <_printf_float+0x374>
 8003db0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003db4:	429a      	cmp	r2, r3
 8003db6:	db3b      	blt.n	8003e30 <_printf_float+0x38c>
 8003db8:	6823      	ldr	r3, [r4, #0]
 8003dba:	07da      	lsls	r2, r3, #31
 8003dbc:	d438      	bmi.n	8003e30 <_printf_float+0x38c>
 8003dbe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003dc0:	990d      	ldr	r1, [sp, #52]	; 0x34
 8003dc2:	eba3 020a 	sub.w	r2, r3, sl
 8003dc6:	eba3 0901 	sub.w	r9, r3, r1
 8003dca:	4591      	cmp	r9, r2
 8003dcc:	bfa8      	it	ge
 8003dce:	4691      	movge	r9, r2
 8003dd0:	f1b9 0f00 	cmp.w	r9, #0
 8003dd4:	dc34      	bgt.n	8003e40 <_printf_float+0x39c>
 8003dd6:	f04f 0800 	mov.w	r8, #0
 8003dda:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003dde:	f104 0a1a 	add.w	sl, r4, #26
 8003de2:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003de6:	1a9b      	subs	r3, r3, r2
 8003de8:	eba3 0309 	sub.w	r3, r3, r9
 8003dec:	4543      	cmp	r3, r8
 8003dee:	f77f af7a 	ble.w	8003ce6 <_printf_float+0x242>
 8003df2:	2301      	movs	r3, #1
 8003df4:	4652      	mov	r2, sl
 8003df6:	4631      	mov	r1, r6
 8003df8:	4628      	mov	r0, r5
 8003dfa:	47b8      	blx	r7
 8003dfc:	3001      	adds	r0, #1
 8003dfe:	f43f aeac 	beq.w	8003b5a <_printf_float+0xb6>
 8003e02:	f108 0801 	add.w	r8, r8, #1
 8003e06:	e7ec      	b.n	8003de2 <_printf_float+0x33e>
 8003e08:	4613      	mov	r3, r2
 8003e0a:	4631      	mov	r1, r6
 8003e0c:	4642      	mov	r2, r8
 8003e0e:	4628      	mov	r0, r5
 8003e10:	47b8      	blx	r7
 8003e12:	3001      	adds	r0, #1
 8003e14:	d1c0      	bne.n	8003d98 <_printf_float+0x2f4>
 8003e16:	e6a0      	b.n	8003b5a <_printf_float+0xb6>
 8003e18:	2301      	movs	r3, #1
 8003e1a:	4631      	mov	r1, r6
 8003e1c:	4628      	mov	r0, r5
 8003e1e:	920b      	str	r2, [sp, #44]	; 0x2c
 8003e20:	47b8      	blx	r7
 8003e22:	3001      	adds	r0, #1
 8003e24:	f43f ae99 	beq.w	8003b5a <_printf_float+0xb6>
 8003e28:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003e2a:	f10b 0b01 	add.w	fp, fp, #1
 8003e2e:	e7b9      	b.n	8003da4 <_printf_float+0x300>
 8003e30:	4631      	mov	r1, r6
 8003e32:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003e36:	4628      	mov	r0, r5
 8003e38:	47b8      	blx	r7
 8003e3a:	3001      	adds	r0, #1
 8003e3c:	d1bf      	bne.n	8003dbe <_printf_float+0x31a>
 8003e3e:	e68c      	b.n	8003b5a <_printf_float+0xb6>
 8003e40:	464b      	mov	r3, r9
 8003e42:	4631      	mov	r1, r6
 8003e44:	4628      	mov	r0, r5
 8003e46:	eb08 020a 	add.w	r2, r8, sl
 8003e4a:	47b8      	blx	r7
 8003e4c:	3001      	adds	r0, #1
 8003e4e:	d1c2      	bne.n	8003dd6 <_printf_float+0x332>
 8003e50:	e683      	b.n	8003b5a <_printf_float+0xb6>
 8003e52:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003e54:	2a01      	cmp	r2, #1
 8003e56:	dc01      	bgt.n	8003e5c <_printf_float+0x3b8>
 8003e58:	07db      	lsls	r3, r3, #31
 8003e5a:	d537      	bpl.n	8003ecc <_printf_float+0x428>
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	4642      	mov	r2, r8
 8003e60:	4631      	mov	r1, r6
 8003e62:	4628      	mov	r0, r5
 8003e64:	47b8      	blx	r7
 8003e66:	3001      	adds	r0, #1
 8003e68:	f43f ae77 	beq.w	8003b5a <_printf_float+0xb6>
 8003e6c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003e70:	4631      	mov	r1, r6
 8003e72:	4628      	mov	r0, r5
 8003e74:	47b8      	blx	r7
 8003e76:	3001      	adds	r0, #1
 8003e78:	f43f ae6f 	beq.w	8003b5a <_printf_float+0xb6>
 8003e7c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003e80:	2200      	movs	r2, #0
 8003e82:	2300      	movs	r3, #0
 8003e84:	f7fd f894 	bl	8000fb0 <__aeabi_dcmpeq>
 8003e88:	b9d8      	cbnz	r0, 8003ec2 <_printf_float+0x41e>
 8003e8a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003e8c:	f108 0201 	add.w	r2, r8, #1
 8003e90:	3b01      	subs	r3, #1
 8003e92:	4631      	mov	r1, r6
 8003e94:	4628      	mov	r0, r5
 8003e96:	47b8      	blx	r7
 8003e98:	3001      	adds	r0, #1
 8003e9a:	d10e      	bne.n	8003eba <_printf_float+0x416>
 8003e9c:	e65d      	b.n	8003b5a <_printf_float+0xb6>
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	464a      	mov	r2, r9
 8003ea2:	4631      	mov	r1, r6
 8003ea4:	4628      	mov	r0, r5
 8003ea6:	47b8      	blx	r7
 8003ea8:	3001      	adds	r0, #1
 8003eaa:	f43f ae56 	beq.w	8003b5a <_printf_float+0xb6>
 8003eae:	f108 0801 	add.w	r8, r8, #1
 8003eb2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003eb4:	3b01      	subs	r3, #1
 8003eb6:	4543      	cmp	r3, r8
 8003eb8:	dcf1      	bgt.n	8003e9e <_printf_float+0x3fa>
 8003eba:	4653      	mov	r3, sl
 8003ebc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8003ec0:	e6e0      	b.n	8003c84 <_printf_float+0x1e0>
 8003ec2:	f04f 0800 	mov.w	r8, #0
 8003ec6:	f104 091a 	add.w	r9, r4, #26
 8003eca:	e7f2      	b.n	8003eb2 <_printf_float+0x40e>
 8003ecc:	2301      	movs	r3, #1
 8003ece:	4642      	mov	r2, r8
 8003ed0:	e7df      	b.n	8003e92 <_printf_float+0x3ee>
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	464a      	mov	r2, r9
 8003ed6:	4631      	mov	r1, r6
 8003ed8:	4628      	mov	r0, r5
 8003eda:	47b8      	blx	r7
 8003edc:	3001      	adds	r0, #1
 8003ede:	f43f ae3c 	beq.w	8003b5a <_printf_float+0xb6>
 8003ee2:	f108 0801 	add.w	r8, r8, #1
 8003ee6:	68e3      	ldr	r3, [r4, #12]
 8003ee8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8003eea:	1a5b      	subs	r3, r3, r1
 8003eec:	4543      	cmp	r3, r8
 8003eee:	dcf0      	bgt.n	8003ed2 <_printf_float+0x42e>
 8003ef0:	e6fd      	b.n	8003cee <_printf_float+0x24a>
 8003ef2:	f04f 0800 	mov.w	r8, #0
 8003ef6:	f104 0919 	add.w	r9, r4, #25
 8003efa:	e7f4      	b.n	8003ee6 <_printf_float+0x442>

08003efc <_printf_common>:
 8003efc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f00:	4616      	mov	r6, r2
 8003f02:	4699      	mov	r9, r3
 8003f04:	688a      	ldr	r2, [r1, #8]
 8003f06:	690b      	ldr	r3, [r1, #16]
 8003f08:	4607      	mov	r7, r0
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	bfb8      	it	lt
 8003f0e:	4613      	movlt	r3, r2
 8003f10:	6033      	str	r3, [r6, #0]
 8003f12:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003f16:	460c      	mov	r4, r1
 8003f18:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003f1c:	b10a      	cbz	r2, 8003f22 <_printf_common+0x26>
 8003f1e:	3301      	adds	r3, #1
 8003f20:	6033      	str	r3, [r6, #0]
 8003f22:	6823      	ldr	r3, [r4, #0]
 8003f24:	0699      	lsls	r1, r3, #26
 8003f26:	bf42      	ittt	mi
 8003f28:	6833      	ldrmi	r3, [r6, #0]
 8003f2a:	3302      	addmi	r3, #2
 8003f2c:	6033      	strmi	r3, [r6, #0]
 8003f2e:	6825      	ldr	r5, [r4, #0]
 8003f30:	f015 0506 	ands.w	r5, r5, #6
 8003f34:	d106      	bne.n	8003f44 <_printf_common+0x48>
 8003f36:	f104 0a19 	add.w	sl, r4, #25
 8003f3a:	68e3      	ldr	r3, [r4, #12]
 8003f3c:	6832      	ldr	r2, [r6, #0]
 8003f3e:	1a9b      	subs	r3, r3, r2
 8003f40:	42ab      	cmp	r3, r5
 8003f42:	dc28      	bgt.n	8003f96 <_printf_common+0x9a>
 8003f44:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003f48:	1e13      	subs	r3, r2, #0
 8003f4a:	6822      	ldr	r2, [r4, #0]
 8003f4c:	bf18      	it	ne
 8003f4e:	2301      	movne	r3, #1
 8003f50:	0692      	lsls	r2, r2, #26
 8003f52:	d42d      	bmi.n	8003fb0 <_printf_common+0xb4>
 8003f54:	4649      	mov	r1, r9
 8003f56:	4638      	mov	r0, r7
 8003f58:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003f5c:	47c0      	blx	r8
 8003f5e:	3001      	adds	r0, #1
 8003f60:	d020      	beq.n	8003fa4 <_printf_common+0xa8>
 8003f62:	6823      	ldr	r3, [r4, #0]
 8003f64:	68e5      	ldr	r5, [r4, #12]
 8003f66:	f003 0306 	and.w	r3, r3, #6
 8003f6a:	2b04      	cmp	r3, #4
 8003f6c:	bf18      	it	ne
 8003f6e:	2500      	movne	r5, #0
 8003f70:	6832      	ldr	r2, [r6, #0]
 8003f72:	f04f 0600 	mov.w	r6, #0
 8003f76:	68a3      	ldr	r3, [r4, #8]
 8003f78:	bf08      	it	eq
 8003f7a:	1aad      	subeq	r5, r5, r2
 8003f7c:	6922      	ldr	r2, [r4, #16]
 8003f7e:	bf08      	it	eq
 8003f80:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003f84:	4293      	cmp	r3, r2
 8003f86:	bfc4      	itt	gt
 8003f88:	1a9b      	subgt	r3, r3, r2
 8003f8a:	18ed      	addgt	r5, r5, r3
 8003f8c:	341a      	adds	r4, #26
 8003f8e:	42b5      	cmp	r5, r6
 8003f90:	d11a      	bne.n	8003fc8 <_printf_common+0xcc>
 8003f92:	2000      	movs	r0, #0
 8003f94:	e008      	b.n	8003fa8 <_printf_common+0xac>
 8003f96:	2301      	movs	r3, #1
 8003f98:	4652      	mov	r2, sl
 8003f9a:	4649      	mov	r1, r9
 8003f9c:	4638      	mov	r0, r7
 8003f9e:	47c0      	blx	r8
 8003fa0:	3001      	adds	r0, #1
 8003fa2:	d103      	bne.n	8003fac <_printf_common+0xb0>
 8003fa4:	f04f 30ff 	mov.w	r0, #4294967295
 8003fa8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003fac:	3501      	adds	r5, #1
 8003fae:	e7c4      	b.n	8003f3a <_printf_common+0x3e>
 8003fb0:	2030      	movs	r0, #48	; 0x30
 8003fb2:	18e1      	adds	r1, r4, r3
 8003fb4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003fb8:	1c5a      	adds	r2, r3, #1
 8003fba:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003fbe:	4422      	add	r2, r4
 8003fc0:	3302      	adds	r3, #2
 8003fc2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003fc6:	e7c5      	b.n	8003f54 <_printf_common+0x58>
 8003fc8:	2301      	movs	r3, #1
 8003fca:	4622      	mov	r2, r4
 8003fcc:	4649      	mov	r1, r9
 8003fce:	4638      	mov	r0, r7
 8003fd0:	47c0      	blx	r8
 8003fd2:	3001      	adds	r0, #1
 8003fd4:	d0e6      	beq.n	8003fa4 <_printf_common+0xa8>
 8003fd6:	3601      	adds	r6, #1
 8003fd8:	e7d9      	b.n	8003f8e <_printf_common+0x92>
	...

08003fdc <_printf_i>:
 8003fdc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003fe0:	7e0f      	ldrb	r7, [r1, #24]
 8003fe2:	4691      	mov	r9, r2
 8003fe4:	2f78      	cmp	r7, #120	; 0x78
 8003fe6:	4680      	mov	r8, r0
 8003fe8:	460c      	mov	r4, r1
 8003fea:	469a      	mov	sl, r3
 8003fec:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003fee:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003ff2:	d807      	bhi.n	8004004 <_printf_i+0x28>
 8003ff4:	2f62      	cmp	r7, #98	; 0x62
 8003ff6:	d80a      	bhi.n	800400e <_printf_i+0x32>
 8003ff8:	2f00      	cmp	r7, #0
 8003ffa:	f000 80d9 	beq.w	80041b0 <_printf_i+0x1d4>
 8003ffe:	2f58      	cmp	r7, #88	; 0x58
 8004000:	f000 80a4 	beq.w	800414c <_printf_i+0x170>
 8004004:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004008:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800400c:	e03a      	b.n	8004084 <_printf_i+0xa8>
 800400e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004012:	2b15      	cmp	r3, #21
 8004014:	d8f6      	bhi.n	8004004 <_printf_i+0x28>
 8004016:	a101      	add	r1, pc, #4	; (adr r1, 800401c <_printf_i+0x40>)
 8004018:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800401c:	08004075 	.word	0x08004075
 8004020:	08004089 	.word	0x08004089
 8004024:	08004005 	.word	0x08004005
 8004028:	08004005 	.word	0x08004005
 800402c:	08004005 	.word	0x08004005
 8004030:	08004005 	.word	0x08004005
 8004034:	08004089 	.word	0x08004089
 8004038:	08004005 	.word	0x08004005
 800403c:	08004005 	.word	0x08004005
 8004040:	08004005 	.word	0x08004005
 8004044:	08004005 	.word	0x08004005
 8004048:	08004197 	.word	0x08004197
 800404c:	080040b9 	.word	0x080040b9
 8004050:	08004179 	.word	0x08004179
 8004054:	08004005 	.word	0x08004005
 8004058:	08004005 	.word	0x08004005
 800405c:	080041b9 	.word	0x080041b9
 8004060:	08004005 	.word	0x08004005
 8004064:	080040b9 	.word	0x080040b9
 8004068:	08004005 	.word	0x08004005
 800406c:	08004005 	.word	0x08004005
 8004070:	08004181 	.word	0x08004181
 8004074:	682b      	ldr	r3, [r5, #0]
 8004076:	1d1a      	adds	r2, r3, #4
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	602a      	str	r2, [r5, #0]
 800407c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004080:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004084:	2301      	movs	r3, #1
 8004086:	e0a4      	b.n	80041d2 <_printf_i+0x1f6>
 8004088:	6820      	ldr	r0, [r4, #0]
 800408a:	6829      	ldr	r1, [r5, #0]
 800408c:	0606      	lsls	r6, r0, #24
 800408e:	f101 0304 	add.w	r3, r1, #4
 8004092:	d50a      	bpl.n	80040aa <_printf_i+0xce>
 8004094:	680e      	ldr	r6, [r1, #0]
 8004096:	602b      	str	r3, [r5, #0]
 8004098:	2e00      	cmp	r6, #0
 800409a:	da03      	bge.n	80040a4 <_printf_i+0xc8>
 800409c:	232d      	movs	r3, #45	; 0x2d
 800409e:	4276      	negs	r6, r6
 80040a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80040a4:	230a      	movs	r3, #10
 80040a6:	485e      	ldr	r0, [pc, #376]	; (8004220 <_printf_i+0x244>)
 80040a8:	e019      	b.n	80040de <_printf_i+0x102>
 80040aa:	680e      	ldr	r6, [r1, #0]
 80040ac:	f010 0f40 	tst.w	r0, #64	; 0x40
 80040b0:	602b      	str	r3, [r5, #0]
 80040b2:	bf18      	it	ne
 80040b4:	b236      	sxthne	r6, r6
 80040b6:	e7ef      	b.n	8004098 <_printf_i+0xbc>
 80040b8:	682b      	ldr	r3, [r5, #0]
 80040ba:	6820      	ldr	r0, [r4, #0]
 80040bc:	1d19      	adds	r1, r3, #4
 80040be:	6029      	str	r1, [r5, #0]
 80040c0:	0601      	lsls	r1, r0, #24
 80040c2:	d501      	bpl.n	80040c8 <_printf_i+0xec>
 80040c4:	681e      	ldr	r6, [r3, #0]
 80040c6:	e002      	b.n	80040ce <_printf_i+0xf2>
 80040c8:	0646      	lsls	r6, r0, #25
 80040ca:	d5fb      	bpl.n	80040c4 <_printf_i+0xe8>
 80040cc:	881e      	ldrh	r6, [r3, #0]
 80040ce:	2f6f      	cmp	r7, #111	; 0x6f
 80040d0:	bf0c      	ite	eq
 80040d2:	2308      	moveq	r3, #8
 80040d4:	230a      	movne	r3, #10
 80040d6:	4852      	ldr	r0, [pc, #328]	; (8004220 <_printf_i+0x244>)
 80040d8:	2100      	movs	r1, #0
 80040da:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80040de:	6865      	ldr	r5, [r4, #4]
 80040e0:	2d00      	cmp	r5, #0
 80040e2:	bfa8      	it	ge
 80040e4:	6821      	ldrge	r1, [r4, #0]
 80040e6:	60a5      	str	r5, [r4, #8]
 80040e8:	bfa4      	itt	ge
 80040ea:	f021 0104 	bicge.w	r1, r1, #4
 80040ee:	6021      	strge	r1, [r4, #0]
 80040f0:	b90e      	cbnz	r6, 80040f6 <_printf_i+0x11a>
 80040f2:	2d00      	cmp	r5, #0
 80040f4:	d04d      	beq.n	8004192 <_printf_i+0x1b6>
 80040f6:	4615      	mov	r5, r2
 80040f8:	fbb6 f1f3 	udiv	r1, r6, r3
 80040fc:	fb03 6711 	mls	r7, r3, r1, r6
 8004100:	5dc7      	ldrb	r7, [r0, r7]
 8004102:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004106:	4637      	mov	r7, r6
 8004108:	42bb      	cmp	r3, r7
 800410a:	460e      	mov	r6, r1
 800410c:	d9f4      	bls.n	80040f8 <_printf_i+0x11c>
 800410e:	2b08      	cmp	r3, #8
 8004110:	d10b      	bne.n	800412a <_printf_i+0x14e>
 8004112:	6823      	ldr	r3, [r4, #0]
 8004114:	07de      	lsls	r6, r3, #31
 8004116:	d508      	bpl.n	800412a <_printf_i+0x14e>
 8004118:	6923      	ldr	r3, [r4, #16]
 800411a:	6861      	ldr	r1, [r4, #4]
 800411c:	4299      	cmp	r1, r3
 800411e:	bfde      	ittt	le
 8004120:	2330      	movle	r3, #48	; 0x30
 8004122:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004126:	f105 35ff 	addle.w	r5, r5, #4294967295
 800412a:	1b52      	subs	r2, r2, r5
 800412c:	6122      	str	r2, [r4, #16]
 800412e:	464b      	mov	r3, r9
 8004130:	4621      	mov	r1, r4
 8004132:	4640      	mov	r0, r8
 8004134:	f8cd a000 	str.w	sl, [sp]
 8004138:	aa03      	add	r2, sp, #12
 800413a:	f7ff fedf 	bl	8003efc <_printf_common>
 800413e:	3001      	adds	r0, #1
 8004140:	d14c      	bne.n	80041dc <_printf_i+0x200>
 8004142:	f04f 30ff 	mov.w	r0, #4294967295
 8004146:	b004      	add	sp, #16
 8004148:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800414c:	4834      	ldr	r0, [pc, #208]	; (8004220 <_printf_i+0x244>)
 800414e:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004152:	6829      	ldr	r1, [r5, #0]
 8004154:	6823      	ldr	r3, [r4, #0]
 8004156:	f851 6b04 	ldr.w	r6, [r1], #4
 800415a:	6029      	str	r1, [r5, #0]
 800415c:	061d      	lsls	r5, r3, #24
 800415e:	d514      	bpl.n	800418a <_printf_i+0x1ae>
 8004160:	07df      	lsls	r7, r3, #31
 8004162:	bf44      	itt	mi
 8004164:	f043 0320 	orrmi.w	r3, r3, #32
 8004168:	6023      	strmi	r3, [r4, #0]
 800416a:	b91e      	cbnz	r6, 8004174 <_printf_i+0x198>
 800416c:	6823      	ldr	r3, [r4, #0]
 800416e:	f023 0320 	bic.w	r3, r3, #32
 8004172:	6023      	str	r3, [r4, #0]
 8004174:	2310      	movs	r3, #16
 8004176:	e7af      	b.n	80040d8 <_printf_i+0xfc>
 8004178:	6823      	ldr	r3, [r4, #0]
 800417a:	f043 0320 	orr.w	r3, r3, #32
 800417e:	6023      	str	r3, [r4, #0]
 8004180:	2378      	movs	r3, #120	; 0x78
 8004182:	4828      	ldr	r0, [pc, #160]	; (8004224 <_printf_i+0x248>)
 8004184:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004188:	e7e3      	b.n	8004152 <_printf_i+0x176>
 800418a:	0659      	lsls	r1, r3, #25
 800418c:	bf48      	it	mi
 800418e:	b2b6      	uxthmi	r6, r6
 8004190:	e7e6      	b.n	8004160 <_printf_i+0x184>
 8004192:	4615      	mov	r5, r2
 8004194:	e7bb      	b.n	800410e <_printf_i+0x132>
 8004196:	682b      	ldr	r3, [r5, #0]
 8004198:	6826      	ldr	r6, [r4, #0]
 800419a:	1d18      	adds	r0, r3, #4
 800419c:	6961      	ldr	r1, [r4, #20]
 800419e:	6028      	str	r0, [r5, #0]
 80041a0:	0635      	lsls	r5, r6, #24
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	d501      	bpl.n	80041aa <_printf_i+0x1ce>
 80041a6:	6019      	str	r1, [r3, #0]
 80041a8:	e002      	b.n	80041b0 <_printf_i+0x1d4>
 80041aa:	0670      	lsls	r0, r6, #25
 80041ac:	d5fb      	bpl.n	80041a6 <_printf_i+0x1ca>
 80041ae:	8019      	strh	r1, [r3, #0]
 80041b0:	2300      	movs	r3, #0
 80041b2:	4615      	mov	r5, r2
 80041b4:	6123      	str	r3, [r4, #16]
 80041b6:	e7ba      	b.n	800412e <_printf_i+0x152>
 80041b8:	682b      	ldr	r3, [r5, #0]
 80041ba:	2100      	movs	r1, #0
 80041bc:	1d1a      	adds	r2, r3, #4
 80041be:	602a      	str	r2, [r5, #0]
 80041c0:	681d      	ldr	r5, [r3, #0]
 80041c2:	6862      	ldr	r2, [r4, #4]
 80041c4:	4628      	mov	r0, r5
 80041c6:	f001 fa55 	bl	8005674 <memchr>
 80041ca:	b108      	cbz	r0, 80041d0 <_printf_i+0x1f4>
 80041cc:	1b40      	subs	r0, r0, r5
 80041ce:	6060      	str	r0, [r4, #4]
 80041d0:	6863      	ldr	r3, [r4, #4]
 80041d2:	6123      	str	r3, [r4, #16]
 80041d4:	2300      	movs	r3, #0
 80041d6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80041da:	e7a8      	b.n	800412e <_printf_i+0x152>
 80041dc:	462a      	mov	r2, r5
 80041de:	4649      	mov	r1, r9
 80041e0:	4640      	mov	r0, r8
 80041e2:	6923      	ldr	r3, [r4, #16]
 80041e4:	47d0      	blx	sl
 80041e6:	3001      	adds	r0, #1
 80041e8:	d0ab      	beq.n	8004142 <_printf_i+0x166>
 80041ea:	6823      	ldr	r3, [r4, #0]
 80041ec:	079b      	lsls	r3, r3, #30
 80041ee:	d413      	bmi.n	8004218 <_printf_i+0x23c>
 80041f0:	68e0      	ldr	r0, [r4, #12]
 80041f2:	9b03      	ldr	r3, [sp, #12]
 80041f4:	4298      	cmp	r0, r3
 80041f6:	bfb8      	it	lt
 80041f8:	4618      	movlt	r0, r3
 80041fa:	e7a4      	b.n	8004146 <_printf_i+0x16a>
 80041fc:	2301      	movs	r3, #1
 80041fe:	4632      	mov	r2, r6
 8004200:	4649      	mov	r1, r9
 8004202:	4640      	mov	r0, r8
 8004204:	47d0      	blx	sl
 8004206:	3001      	adds	r0, #1
 8004208:	d09b      	beq.n	8004142 <_printf_i+0x166>
 800420a:	3501      	adds	r5, #1
 800420c:	68e3      	ldr	r3, [r4, #12]
 800420e:	9903      	ldr	r1, [sp, #12]
 8004210:	1a5b      	subs	r3, r3, r1
 8004212:	42ab      	cmp	r3, r5
 8004214:	dcf2      	bgt.n	80041fc <_printf_i+0x220>
 8004216:	e7eb      	b.n	80041f0 <_printf_i+0x214>
 8004218:	2500      	movs	r5, #0
 800421a:	f104 0619 	add.w	r6, r4, #25
 800421e:	e7f5      	b.n	800420c <_printf_i+0x230>
 8004220:	0800639e 	.word	0x0800639e
 8004224:	080063af 	.word	0x080063af

08004228 <_puts_r>:
 8004228:	b570      	push	{r4, r5, r6, lr}
 800422a:	460e      	mov	r6, r1
 800422c:	4605      	mov	r5, r0
 800422e:	b118      	cbz	r0, 8004238 <_puts_r+0x10>
 8004230:	6983      	ldr	r3, [r0, #24]
 8004232:	b90b      	cbnz	r3, 8004238 <_puts_r+0x10>
 8004234:	f001 f914 	bl	8005460 <__sinit>
 8004238:	69ab      	ldr	r3, [r5, #24]
 800423a:	68ac      	ldr	r4, [r5, #8]
 800423c:	b913      	cbnz	r3, 8004244 <_puts_r+0x1c>
 800423e:	4628      	mov	r0, r5
 8004240:	f001 f90e 	bl	8005460 <__sinit>
 8004244:	4b2c      	ldr	r3, [pc, #176]	; (80042f8 <_puts_r+0xd0>)
 8004246:	429c      	cmp	r4, r3
 8004248:	d120      	bne.n	800428c <_puts_r+0x64>
 800424a:	686c      	ldr	r4, [r5, #4]
 800424c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800424e:	07db      	lsls	r3, r3, #31
 8004250:	d405      	bmi.n	800425e <_puts_r+0x36>
 8004252:	89a3      	ldrh	r3, [r4, #12]
 8004254:	0598      	lsls	r0, r3, #22
 8004256:	d402      	bmi.n	800425e <_puts_r+0x36>
 8004258:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800425a:	f001 f9a4 	bl	80055a6 <__retarget_lock_acquire_recursive>
 800425e:	89a3      	ldrh	r3, [r4, #12]
 8004260:	0719      	lsls	r1, r3, #28
 8004262:	d51d      	bpl.n	80042a0 <_puts_r+0x78>
 8004264:	6923      	ldr	r3, [r4, #16]
 8004266:	b1db      	cbz	r3, 80042a0 <_puts_r+0x78>
 8004268:	3e01      	subs	r6, #1
 800426a:	68a3      	ldr	r3, [r4, #8]
 800426c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004270:	3b01      	subs	r3, #1
 8004272:	60a3      	str	r3, [r4, #8]
 8004274:	bb39      	cbnz	r1, 80042c6 <_puts_r+0x9e>
 8004276:	2b00      	cmp	r3, #0
 8004278:	da38      	bge.n	80042ec <_puts_r+0xc4>
 800427a:	4622      	mov	r2, r4
 800427c:	210a      	movs	r1, #10
 800427e:	4628      	mov	r0, r5
 8004280:	f000 f89c 	bl	80043bc <__swbuf_r>
 8004284:	3001      	adds	r0, #1
 8004286:	d011      	beq.n	80042ac <_puts_r+0x84>
 8004288:	250a      	movs	r5, #10
 800428a:	e011      	b.n	80042b0 <_puts_r+0x88>
 800428c:	4b1b      	ldr	r3, [pc, #108]	; (80042fc <_puts_r+0xd4>)
 800428e:	429c      	cmp	r4, r3
 8004290:	d101      	bne.n	8004296 <_puts_r+0x6e>
 8004292:	68ac      	ldr	r4, [r5, #8]
 8004294:	e7da      	b.n	800424c <_puts_r+0x24>
 8004296:	4b1a      	ldr	r3, [pc, #104]	; (8004300 <_puts_r+0xd8>)
 8004298:	429c      	cmp	r4, r3
 800429a:	bf08      	it	eq
 800429c:	68ec      	ldreq	r4, [r5, #12]
 800429e:	e7d5      	b.n	800424c <_puts_r+0x24>
 80042a0:	4621      	mov	r1, r4
 80042a2:	4628      	mov	r0, r5
 80042a4:	f000 f8dc 	bl	8004460 <__swsetup_r>
 80042a8:	2800      	cmp	r0, #0
 80042aa:	d0dd      	beq.n	8004268 <_puts_r+0x40>
 80042ac:	f04f 35ff 	mov.w	r5, #4294967295
 80042b0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80042b2:	07da      	lsls	r2, r3, #31
 80042b4:	d405      	bmi.n	80042c2 <_puts_r+0x9a>
 80042b6:	89a3      	ldrh	r3, [r4, #12]
 80042b8:	059b      	lsls	r3, r3, #22
 80042ba:	d402      	bmi.n	80042c2 <_puts_r+0x9a>
 80042bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80042be:	f001 f973 	bl	80055a8 <__retarget_lock_release_recursive>
 80042c2:	4628      	mov	r0, r5
 80042c4:	bd70      	pop	{r4, r5, r6, pc}
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	da04      	bge.n	80042d4 <_puts_r+0xac>
 80042ca:	69a2      	ldr	r2, [r4, #24]
 80042cc:	429a      	cmp	r2, r3
 80042ce:	dc06      	bgt.n	80042de <_puts_r+0xb6>
 80042d0:	290a      	cmp	r1, #10
 80042d2:	d004      	beq.n	80042de <_puts_r+0xb6>
 80042d4:	6823      	ldr	r3, [r4, #0]
 80042d6:	1c5a      	adds	r2, r3, #1
 80042d8:	6022      	str	r2, [r4, #0]
 80042da:	7019      	strb	r1, [r3, #0]
 80042dc:	e7c5      	b.n	800426a <_puts_r+0x42>
 80042de:	4622      	mov	r2, r4
 80042e0:	4628      	mov	r0, r5
 80042e2:	f000 f86b 	bl	80043bc <__swbuf_r>
 80042e6:	3001      	adds	r0, #1
 80042e8:	d1bf      	bne.n	800426a <_puts_r+0x42>
 80042ea:	e7df      	b.n	80042ac <_puts_r+0x84>
 80042ec:	250a      	movs	r5, #10
 80042ee:	6823      	ldr	r3, [r4, #0]
 80042f0:	1c5a      	adds	r2, r3, #1
 80042f2:	6022      	str	r2, [r4, #0]
 80042f4:	701d      	strb	r5, [r3, #0]
 80042f6:	e7db      	b.n	80042b0 <_puts_r+0x88>
 80042f8:	08006470 	.word	0x08006470
 80042fc:	08006490 	.word	0x08006490
 8004300:	08006450 	.word	0x08006450

08004304 <puts>:
 8004304:	4b02      	ldr	r3, [pc, #8]	; (8004310 <puts+0xc>)
 8004306:	4601      	mov	r1, r0
 8004308:	6818      	ldr	r0, [r3, #0]
 800430a:	f7ff bf8d 	b.w	8004228 <_puts_r>
 800430e:	bf00      	nop
 8004310:	20000278 	.word	0x20000278

08004314 <_sbrk_r>:
 8004314:	b538      	push	{r3, r4, r5, lr}
 8004316:	2300      	movs	r3, #0
 8004318:	4d05      	ldr	r5, [pc, #20]	; (8004330 <_sbrk_r+0x1c>)
 800431a:	4604      	mov	r4, r0
 800431c:	4608      	mov	r0, r1
 800431e:	602b      	str	r3, [r5, #0]
 8004320:	f7ff f8b4 	bl	800348c <_sbrk>
 8004324:	1c43      	adds	r3, r0, #1
 8004326:	d102      	bne.n	800432e <_sbrk_r+0x1a>
 8004328:	682b      	ldr	r3, [r5, #0]
 800432a:	b103      	cbz	r3, 800432e <_sbrk_r+0x1a>
 800432c:	6023      	str	r3, [r4, #0]
 800432e:	bd38      	pop	{r3, r4, r5, pc}
 8004330:	20000668 	.word	0x20000668

08004334 <_raise_r>:
 8004334:	291f      	cmp	r1, #31
 8004336:	b538      	push	{r3, r4, r5, lr}
 8004338:	4604      	mov	r4, r0
 800433a:	460d      	mov	r5, r1
 800433c:	d904      	bls.n	8004348 <_raise_r+0x14>
 800433e:	2316      	movs	r3, #22
 8004340:	6003      	str	r3, [r0, #0]
 8004342:	f04f 30ff 	mov.w	r0, #4294967295
 8004346:	bd38      	pop	{r3, r4, r5, pc}
 8004348:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800434a:	b112      	cbz	r2, 8004352 <_raise_r+0x1e>
 800434c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8004350:	b94b      	cbnz	r3, 8004366 <_raise_r+0x32>
 8004352:	4620      	mov	r0, r4
 8004354:	f000 f830 	bl	80043b8 <_getpid_r>
 8004358:	462a      	mov	r2, r5
 800435a:	4601      	mov	r1, r0
 800435c:	4620      	mov	r0, r4
 800435e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004362:	f000 b817 	b.w	8004394 <_kill_r>
 8004366:	2b01      	cmp	r3, #1
 8004368:	d00a      	beq.n	8004380 <_raise_r+0x4c>
 800436a:	1c59      	adds	r1, r3, #1
 800436c:	d103      	bne.n	8004376 <_raise_r+0x42>
 800436e:	2316      	movs	r3, #22
 8004370:	6003      	str	r3, [r0, #0]
 8004372:	2001      	movs	r0, #1
 8004374:	e7e7      	b.n	8004346 <_raise_r+0x12>
 8004376:	2400      	movs	r4, #0
 8004378:	4628      	mov	r0, r5
 800437a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800437e:	4798      	blx	r3
 8004380:	2000      	movs	r0, #0
 8004382:	e7e0      	b.n	8004346 <_raise_r+0x12>

08004384 <raise>:
 8004384:	4b02      	ldr	r3, [pc, #8]	; (8004390 <raise+0xc>)
 8004386:	4601      	mov	r1, r0
 8004388:	6818      	ldr	r0, [r3, #0]
 800438a:	f7ff bfd3 	b.w	8004334 <_raise_r>
 800438e:	bf00      	nop
 8004390:	20000278 	.word	0x20000278

08004394 <_kill_r>:
 8004394:	b538      	push	{r3, r4, r5, lr}
 8004396:	2300      	movs	r3, #0
 8004398:	4d06      	ldr	r5, [pc, #24]	; (80043b4 <_kill_r+0x20>)
 800439a:	4604      	mov	r4, r0
 800439c:	4608      	mov	r0, r1
 800439e:	4611      	mov	r1, r2
 80043a0:	602b      	str	r3, [r5, #0]
 80043a2:	f7fe fff0 	bl	8003386 <_kill>
 80043a6:	1c43      	adds	r3, r0, #1
 80043a8:	d102      	bne.n	80043b0 <_kill_r+0x1c>
 80043aa:	682b      	ldr	r3, [r5, #0]
 80043ac:	b103      	cbz	r3, 80043b0 <_kill_r+0x1c>
 80043ae:	6023      	str	r3, [r4, #0]
 80043b0:	bd38      	pop	{r3, r4, r5, pc}
 80043b2:	bf00      	nop
 80043b4:	20000668 	.word	0x20000668

080043b8 <_getpid_r>:
 80043b8:	f7fe bfde 	b.w	8003378 <_getpid>

080043bc <__swbuf_r>:
 80043bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043be:	460e      	mov	r6, r1
 80043c0:	4614      	mov	r4, r2
 80043c2:	4605      	mov	r5, r0
 80043c4:	b118      	cbz	r0, 80043ce <__swbuf_r+0x12>
 80043c6:	6983      	ldr	r3, [r0, #24]
 80043c8:	b90b      	cbnz	r3, 80043ce <__swbuf_r+0x12>
 80043ca:	f001 f849 	bl	8005460 <__sinit>
 80043ce:	4b21      	ldr	r3, [pc, #132]	; (8004454 <__swbuf_r+0x98>)
 80043d0:	429c      	cmp	r4, r3
 80043d2:	d12b      	bne.n	800442c <__swbuf_r+0x70>
 80043d4:	686c      	ldr	r4, [r5, #4]
 80043d6:	69a3      	ldr	r3, [r4, #24]
 80043d8:	60a3      	str	r3, [r4, #8]
 80043da:	89a3      	ldrh	r3, [r4, #12]
 80043dc:	071a      	lsls	r2, r3, #28
 80043de:	d52f      	bpl.n	8004440 <__swbuf_r+0x84>
 80043e0:	6923      	ldr	r3, [r4, #16]
 80043e2:	b36b      	cbz	r3, 8004440 <__swbuf_r+0x84>
 80043e4:	6923      	ldr	r3, [r4, #16]
 80043e6:	6820      	ldr	r0, [r4, #0]
 80043e8:	b2f6      	uxtb	r6, r6
 80043ea:	1ac0      	subs	r0, r0, r3
 80043ec:	6963      	ldr	r3, [r4, #20]
 80043ee:	4637      	mov	r7, r6
 80043f0:	4283      	cmp	r3, r0
 80043f2:	dc04      	bgt.n	80043fe <__swbuf_r+0x42>
 80043f4:	4621      	mov	r1, r4
 80043f6:	4628      	mov	r0, r5
 80043f8:	f000 ff9e 	bl	8005338 <_fflush_r>
 80043fc:	bb30      	cbnz	r0, 800444c <__swbuf_r+0x90>
 80043fe:	68a3      	ldr	r3, [r4, #8]
 8004400:	3001      	adds	r0, #1
 8004402:	3b01      	subs	r3, #1
 8004404:	60a3      	str	r3, [r4, #8]
 8004406:	6823      	ldr	r3, [r4, #0]
 8004408:	1c5a      	adds	r2, r3, #1
 800440a:	6022      	str	r2, [r4, #0]
 800440c:	701e      	strb	r6, [r3, #0]
 800440e:	6963      	ldr	r3, [r4, #20]
 8004410:	4283      	cmp	r3, r0
 8004412:	d004      	beq.n	800441e <__swbuf_r+0x62>
 8004414:	89a3      	ldrh	r3, [r4, #12]
 8004416:	07db      	lsls	r3, r3, #31
 8004418:	d506      	bpl.n	8004428 <__swbuf_r+0x6c>
 800441a:	2e0a      	cmp	r6, #10
 800441c:	d104      	bne.n	8004428 <__swbuf_r+0x6c>
 800441e:	4621      	mov	r1, r4
 8004420:	4628      	mov	r0, r5
 8004422:	f000 ff89 	bl	8005338 <_fflush_r>
 8004426:	b988      	cbnz	r0, 800444c <__swbuf_r+0x90>
 8004428:	4638      	mov	r0, r7
 800442a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800442c:	4b0a      	ldr	r3, [pc, #40]	; (8004458 <__swbuf_r+0x9c>)
 800442e:	429c      	cmp	r4, r3
 8004430:	d101      	bne.n	8004436 <__swbuf_r+0x7a>
 8004432:	68ac      	ldr	r4, [r5, #8]
 8004434:	e7cf      	b.n	80043d6 <__swbuf_r+0x1a>
 8004436:	4b09      	ldr	r3, [pc, #36]	; (800445c <__swbuf_r+0xa0>)
 8004438:	429c      	cmp	r4, r3
 800443a:	bf08      	it	eq
 800443c:	68ec      	ldreq	r4, [r5, #12]
 800443e:	e7ca      	b.n	80043d6 <__swbuf_r+0x1a>
 8004440:	4621      	mov	r1, r4
 8004442:	4628      	mov	r0, r5
 8004444:	f000 f80c 	bl	8004460 <__swsetup_r>
 8004448:	2800      	cmp	r0, #0
 800444a:	d0cb      	beq.n	80043e4 <__swbuf_r+0x28>
 800444c:	f04f 37ff 	mov.w	r7, #4294967295
 8004450:	e7ea      	b.n	8004428 <__swbuf_r+0x6c>
 8004452:	bf00      	nop
 8004454:	08006470 	.word	0x08006470
 8004458:	08006490 	.word	0x08006490
 800445c:	08006450 	.word	0x08006450

08004460 <__swsetup_r>:
 8004460:	4b32      	ldr	r3, [pc, #200]	; (800452c <__swsetup_r+0xcc>)
 8004462:	b570      	push	{r4, r5, r6, lr}
 8004464:	681d      	ldr	r5, [r3, #0]
 8004466:	4606      	mov	r6, r0
 8004468:	460c      	mov	r4, r1
 800446a:	b125      	cbz	r5, 8004476 <__swsetup_r+0x16>
 800446c:	69ab      	ldr	r3, [r5, #24]
 800446e:	b913      	cbnz	r3, 8004476 <__swsetup_r+0x16>
 8004470:	4628      	mov	r0, r5
 8004472:	f000 fff5 	bl	8005460 <__sinit>
 8004476:	4b2e      	ldr	r3, [pc, #184]	; (8004530 <__swsetup_r+0xd0>)
 8004478:	429c      	cmp	r4, r3
 800447a:	d10f      	bne.n	800449c <__swsetup_r+0x3c>
 800447c:	686c      	ldr	r4, [r5, #4]
 800447e:	89a3      	ldrh	r3, [r4, #12]
 8004480:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004484:	0719      	lsls	r1, r3, #28
 8004486:	d42c      	bmi.n	80044e2 <__swsetup_r+0x82>
 8004488:	06dd      	lsls	r5, r3, #27
 800448a:	d411      	bmi.n	80044b0 <__swsetup_r+0x50>
 800448c:	2309      	movs	r3, #9
 800448e:	6033      	str	r3, [r6, #0]
 8004490:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004494:	f04f 30ff 	mov.w	r0, #4294967295
 8004498:	81a3      	strh	r3, [r4, #12]
 800449a:	e03e      	b.n	800451a <__swsetup_r+0xba>
 800449c:	4b25      	ldr	r3, [pc, #148]	; (8004534 <__swsetup_r+0xd4>)
 800449e:	429c      	cmp	r4, r3
 80044a0:	d101      	bne.n	80044a6 <__swsetup_r+0x46>
 80044a2:	68ac      	ldr	r4, [r5, #8]
 80044a4:	e7eb      	b.n	800447e <__swsetup_r+0x1e>
 80044a6:	4b24      	ldr	r3, [pc, #144]	; (8004538 <__swsetup_r+0xd8>)
 80044a8:	429c      	cmp	r4, r3
 80044aa:	bf08      	it	eq
 80044ac:	68ec      	ldreq	r4, [r5, #12]
 80044ae:	e7e6      	b.n	800447e <__swsetup_r+0x1e>
 80044b0:	0758      	lsls	r0, r3, #29
 80044b2:	d512      	bpl.n	80044da <__swsetup_r+0x7a>
 80044b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80044b6:	b141      	cbz	r1, 80044ca <__swsetup_r+0x6a>
 80044b8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80044bc:	4299      	cmp	r1, r3
 80044be:	d002      	beq.n	80044c6 <__swsetup_r+0x66>
 80044c0:	4630      	mov	r0, r6
 80044c2:	f7ff f975 	bl	80037b0 <_free_r>
 80044c6:	2300      	movs	r3, #0
 80044c8:	6363      	str	r3, [r4, #52]	; 0x34
 80044ca:	89a3      	ldrh	r3, [r4, #12]
 80044cc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80044d0:	81a3      	strh	r3, [r4, #12]
 80044d2:	2300      	movs	r3, #0
 80044d4:	6063      	str	r3, [r4, #4]
 80044d6:	6923      	ldr	r3, [r4, #16]
 80044d8:	6023      	str	r3, [r4, #0]
 80044da:	89a3      	ldrh	r3, [r4, #12]
 80044dc:	f043 0308 	orr.w	r3, r3, #8
 80044e0:	81a3      	strh	r3, [r4, #12]
 80044e2:	6923      	ldr	r3, [r4, #16]
 80044e4:	b94b      	cbnz	r3, 80044fa <__swsetup_r+0x9a>
 80044e6:	89a3      	ldrh	r3, [r4, #12]
 80044e8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80044ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80044f0:	d003      	beq.n	80044fa <__swsetup_r+0x9a>
 80044f2:	4621      	mov	r1, r4
 80044f4:	4630      	mov	r0, r6
 80044f6:	f001 f87d 	bl	80055f4 <__smakebuf_r>
 80044fa:	89a0      	ldrh	r0, [r4, #12]
 80044fc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004500:	f010 0301 	ands.w	r3, r0, #1
 8004504:	d00a      	beq.n	800451c <__swsetup_r+0xbc>
 8004506:	2300      	movs	r3, #0
 8004508:	60a3      	str	r3, [r4, #8]
 800450a:	6963      	ldr	r3, [r4, #20]
 800450c:	425b      	negs	r3, r3
 800450e:	61a3      	str	r3, [r4, #24]
 8004510:	6923      	ldr	r3, [r4, #16]
 8004512:	b943      	cbnz	r3, 8004526 <__swsetup_r+0xc6>
 8004514:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004518:	d1ba      	bne.n	8004490 <__swsetup_r+0x30>
 800451a:	bd70      	pop	{r4, r5, r6, pc}
 800451c:	0781      	lsls	r1, r0, #30
 800451e:	bf58      	it	pl
 8004520:	6963      	ldrpl	r3, [r4, #20]
 8004522:	60a3      	str	r3, [r4, #8]
 8004524:	e7f4      	b.n	8004510 <__swsetup_r+0xb0>
 8004526:	2000      	movs	r0, #0
 8004528:	e7f7      	b.n	800451a <__swsetup_r+0xba>
 800452a:	bf00      	nop
 800452c:	20000278 	.word	0x20000278
 8004530:	08006470 	.word	0x08006470
 8004534:	08006490 	.word	0x08006490
 8004538:	08006450 	.word	0x08006450

0800453c <quorem>:
 800453c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004540:	6903      	ldr	r3, [r0, #16]
 8004542:	690c      	ldr	r4, [r1, #16]
 8004544:	4607      	mov	r7, r0
 8004546:	42a3      	cmp	r3, r4
 8004548:	f2c0 8082 	blt.w	8004650 <quorem+0x114>
 800454c:	3c01      	subs	r4, #1
 800454e:	f100 0514 	add.w	r5, r0, #20
 8004552:	f101 0814 	add.w	r8, r1, #20
 8004556:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800455a:	9301      	str	r3, [sp, #4]
 800455c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004560:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004564:	3301      	adds	r3, #1
 8004566:	429a      	cmp	r2, r3
 8004568:	fbb2 f6f3 	udiv	r6, r2, r3
 800456c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004570:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004574:	d331      	bcc.n	80045da <quorem+0x9e>
 8004576:	f04f 0e00 	mov.w	lr, #0
 800457a:	4640      	mov	r0, r8
 800457c:	46ac      	mov	ip, r5
 800457e:	46f2      	mov	sl, lr
 8004580:	f850 2b04 	ldr.w	r2, [r0], #4
 8004584:	b293      	uxth	r3, r2
 8004586:	fb06 e303 	mla	r3, r6, r3, lr
 800458a:	0c12      	lsrs	r2, r2, #16
 800458c:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8004590:	b29b      	uxth	r3, r3
 8004592:	fb06 e202 	mla	r2, r6, r2, lr
 8004596:	ebaa 0303 	sub.w	r3, sl, r3
 800459a:	f8dc a000 	ldr.w	sl, [ip]
 800459e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80045a2:	fa1f fa8a 	uxth.w	sl, sl
 80045a6:	4453      	add	r3, sl
 80045a8:	f8dc a000 	ldr.w	sl, [ip]
 80045ac:	b292      	uxth	r2, r2
 80045ae:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80045b2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80045b6:	b29b      	uxth	r3, r3
 80045b8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80045bc:	4581      	cmp	r9, r0
 80045be:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80045c2:	f84c 3b04 	str.w	r3, [ip], #4
 80045c6:	d2db      	bcs.n	8004580 <quorem+0x44>
 80045c8:	f855 300b 	ldr.w	r3, [r5, fp]
 80045cc:	b92b      	cbnz	r3, 80045da <quorem+0x9e>
 80045ce:	9b01      	ldr	r3, [sp, #4]
 80045d0:	3b04      	subs	r3, #4
 80045d2:	429d      	cmp	r5, r3
 80045d4:	461a      	mov	r2, r3
 80045d6:	d32f      	bcc.n	8004638 <quorem+0xfc>
 80045d8:	613c      	str	r4, [r7, #16]
 80045da:	4638      	mov	r0, r7
 80045dc:	f001 fae2 	bl	8005ba4 <__mcmp>
 80045e0:	2800      	cmp	r0, #0
 80045e2:	db25      	blt.n	8004630 <quorem+0xf4>
 80045e4:	4628      	mov	r0, r5
 80045e6:	f04f 0c00 	mov.w	ip, #0
 80045ea:	3601      	adds	r6, #1
 80045ec:	f858 1b04 	ldr.w	r1, [r8], #4
 80045f0:	f8d0 e000 	ldr.w	lr, [r0]
 80045f4:	b28b      	uxth	r3, r1
 80045f6:	ebac 0303 	sub.w	r3, ip, r3
 80045fa:	fa1f f28e 	uxth.w	r2, lr
 80045fe:	4413      	add	r3, r2
 8004600:	0c0a      	lsrs	r2, r1, #16
 8004602:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004606:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800460a:	b29b      	uxth	r3, r3
 800460c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004610:	45c1      	cmp	r9, r8
 8004612:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004616:	f840 3b04 	str.w	r3, [r0], #4
 800461a:	d2e7      	bcs.n	80045ec <quorem+0xb0>
 800461c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004620:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004624:	b922      	cbnz	r2, 8004630 <quorem+0xf4>
 8004626:	3b04      	subs	r3, #4
 8004628:	429d      	cmp	r5, r3
 800462a:	461a      	mov	r2, r3
 800462c:	d30a      	bcc.n	8004644 <quorem+0x108>
 800462e:	613c      	str	r4, [r7, #16]
 8004630:	4630      	mov	r0, r6
 8004632:	b003      	add	sp, #12
 8004634:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004638:	6812      	ldr	r2, [r2, #0]
 800463a:	3b04      	subs	r3, #4
 800463c:	2a00      	cmp	r2, #0
 800463e:	d1cb      	bne.n	80045d8 <quorem+0x9c>
 8004640:	3c01      	subs	r4, #1
 8004642:	e7c6      	b.n	80045d2 <quorem+0x96>
 8004644:	6812      	ldr	r2, [r2, #0]
 8004646:	3b04      	subs	r3, #4
 8004648:	2a00      	cmp	r2, #0
 800464a:	d1f0      	bne.n	800462e <quorem+0xf2>
 800464c:	3c01      	subs	r4, #1
 800464e:	e7eb      	b.n	8004628 <quorem+0xec>
 8004650:	2000      	movs	r0, #0
 8004652:	e7ee      	b.n	8004632 <quorem+0xf6>
 8004654:	0000      	movs	r0, r0
	...

08004658 <_dtoa_r>:
 8004658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800465c:	4616      	mov	r6, r2
 800465e:	461f      	mov	r7, r3
 8004660:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8004662:	b099      	sub	sp, #100	; 0x64
 8004664:	4605      	mov	r5, r0
 8004666:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800466a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800466e:	b974      	cbnz	r4, 800468e <_dtoa_r+0x36>
 8004670:	2010      	movs	r0, #16
 8004672:	f7ff f877 	bl	8003764 <malloc>
 8004676:	4602      	mov	r2, r0
 8004678:	6268      	str	r0, [r5, #36]	; 0x24
 800467a:	b920      	cbnz	r0, 8004686 <_dtoa_r+0x2e>
 800467c:	21ea      	movs	r1, #234	; 0xea
 800467e:	4ba8      	ldr	r3, [pc, #672]	; (8004920 <_dtoa_r+0x2c8>)
 8004680:	48a8      	ldr	r0, [pc, #672]	; (8004924 <_dtoa_r+0x2cc>)
 8004682:	f001 fbfd 	bl	8005e80 <__assert_func>
 8004686:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800468a:	6004      	str	r4, [r0, #0]
 800468c:	60c4      	str	r4, [r0, #12]
 800468e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004690:	6819      	ldr	r1, [r3, #0]
 8004692:	b151      	cbz	r1, 80046aa <_dtoa_r+0x52>
 8004694:	685a      	ldr	r2, [r3, #4]
 8004696:	2301      	movs	r3, #1
 8004698:	4093      	lsls	r3, r2
 800469a:	604a      	str	r2, [r1, #4]
 800469c:	608b      	str	r3, [r1, #8]
 800469e:	4628      	mov	r0, r5
 80046a0:	f001 f842 	bl	8005728 <_Bfree>
 80046a4:	2200      	movs	r2, #0
 80046a6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80046a8:	601a      	str	r2, [r3, #0]
 80046aa:	1e3b      	subs	r3, r7, #0
 80046ac:	bfaf      	iteee	ge
 80046ae:	2300      	movge	r3, #0
 80046b0:	2201      	movlt	r2, #1
 80046b2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80046b6:	9305      	strlt	r3, [sp, #20]
 80046b8:	bfa8      	it	ge
 80046ba:	f8c8 3000 	strge.w	r3, [r8]
 80046be:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80046c2:	4b99      	ldr	r3, [pc, #612]	; (8004928 <_dtoa_r+0x2d0>)
 80046c4:	bfb8      	it	lt
 80046c6:	f8c8 2000 	strlt.w	r2, [r8]
 80046ca:	ea33 0309 	bics.w	r3, r3, r9
 80046ce:	d119      	bne.n	8004704 <_dtoa_r+0xac>
 80046d0:	f242 730f 	movw	r3, #9999	; 0x270f
 80046d4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80046d6:	6013      	str	r3, [r2, #0]
 80046d8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80046dc:	4333      	orrs	r3, r6
 80046de:	f000 857f 	beq.w	80051e0 <_dtoa_r+0xb88>
 80046e2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80046e4:	b953      	cbnz	r3, 80046fc <_dtoa_r+0xa4>
 80046e6:	4b91      	ldr	r3, [pc, #580]	; (800492c <_dtoa_r+0x2d4>)
 80046e8:	e022      	b.n	8004730 <_dtoa_r+0xd8>
 80046ea:	4b91      	ldr	r3, [pc, #580]	; (8004930 <_dtoa_r+0x2d8>)
 80046ec:	9303      	str	r3, [sp, #12]
 80046ee:	3308      	adds	r3, #8
 80046f0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80046f2:	6013      	str	r3, [r2, #0]
 80046f4:	9803      	ldr	r0, [sp, #12]
 80046f6:	b019      	add	sp, #100	; 0x64
 80046f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80046fc:	4b8b      	ldr	r3, [pc, #556]	; (800492c <_dtoa_r+0x2d4>)
 80046fe:	9303      	str	r3, [sp, #12]
 8004700:	3303      	adds	r3, #3
 8004702:	e7f5      	b.n	80046f0 <_dtoa_r+0x98>
 8004704:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8004708:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800470c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004710:	2200      	movs	r2, #0
 8004712:	2300      	movs	r3, #0
 8004714:	f7fc fc4c 	bl	8000fb0 <__aeabi_dcmpeq>
 8004718:	4680      	mov	r8, r0
 800471a:	b158      	cbz	r0, 8004734 <_dtoa_r+0xdc>
 800471c:	2301      	movs	r3, #1
 800471e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004720:	6013      	str	r3, [r2, #0]
 8004722:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004724:	2b00      	cmp	r3, #0
 8004726:	f000 8558 	beq.w	80051da <_dtoa_r+0xb82>
 800472a:	4882      	ldr	r0, [pc, #520]	; (8004934 <_dtoa_r+0x2dc>)
 800472c:	6018      	str	r0, [r3, #0]
 800472e:	1e43      	subs	r3, r0, #1
 8004730:	9303      	str	r3, [sp, #12]
 8004732:	e7df      	b.n	80046f4 <_dtoa_r+0x9c>
 8004734:	ab16      	add	r3, sp, #88	; 0x58
 8004736:	9301      	str	r3, [sp, #4]
 8004738:	ab17      	add	r3, sp, #92	; 0x5c
 800473a:	9300      	str	r3, [sp, #0]
 800473c:	4628      	mov	r0, r5
 800473e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8004742:	f001 fad7 	bl	8005cf4 <__d2b>
 8004746:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800474a:	4683      	mov	fp, r0
 800474c:	2c00      	cmp	r4, #0
 800474e:	d07f      	beq.n	8004850 <_dtoa_r+0x1f8>
 8004750:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004754:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004756:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800475a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800475e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8004762:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8004766:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800476a:	2200      	movs	r2, #0
 800476c:	4b72      	ldr	r3, [pc, #456]	; (8004938 <_dtoa_r+0x2e0>)
 800476e:	f7fb fd03 	bl	8000178 <__aeabi_dsub>
 8004772:	a365      	add	r3, pc, #404	; (adr r3, 8004908 <_dtoa_r+0x2b0>)
 8004774:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004778:	f7fb feb6 	bl	80004e8 <__aeabi_dmul>
 800477c:	a364      	add	r3, pc, #400	; (adr r3, 8004910 <_dtoa_r+0x2b8>)
 800477e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004782:	f7fb fcfb 	bl	800017c <__adddf3>
 8004786:	4606      	mov	r6, r0
 8004788:	4620      	mov	r0, r4
 800478a:	460f      	mov	r7, r1
 800478c:	f7fb fe42 	bl	8000414 <__aeabi_i2d>
 8004790:	a361      	add	r3, pc, #388	; (adr r3, 8004918 <_dtoa_r+0x2c0>)
 8004792:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004796:	f7fb fea7 	bl	80004e8 <__aeabi_dmul>
 800479a:	4602      	mov	r2, r0
 800479c:	460b      	mov	r3, r1
 800479e:	4630      	mov	r0, r6
 80047a0:	4639      	mov	r1, r7
 80047a2:	f7fb fceb 	bl	800017c <__adddf3>
 80047a6:	4606      	mov	r6, r0
 80047a8:	460f      	mov	r7, r1
 80047aa:	f7fc fc49 	bl	8001040 <__aeabi_d2iz>
 80047ae:	2200      	movs	r2, #0
 80047b0:	4682      	mov	sl, r0
 80047b2:	2300      	movs	r3, #0
 80047b4:	4630      	mov	r0, r6
 80047b6:	4639      	mov	r1, r7
 80047b8:	f7fc fc04 	bl	8000fc4 <__aeabi_dcmplt>
 80047bc:	b148      	cbz	r0, 80047d2 <_dtoa_r+0x17a>
 80047be:	4650      	mov	r0, sl
 80047c0:	f7fb fe28 	bl	8000414 <__aeabi_i2d>
 80047c4:	4632      	mov	r2, r6
 80047c6:	463b      	mov	r3, r7
 80047c8:	f7fc fbf2 	bl	8000fb0 <__aeabi_dcmpeq>
 80047cc:	b908      	cbnz	r0, 80047d2 <_dtoa_r+0x17a>
 80047ce:	f10a 3aff 	add.w	sl, sl, #4294967295
 80047d2:	f1ba 0f16 	cmp.w	sl, #22
 80047d6:	d858      	bhi.n	800488a <_dtoa_r+0x232>
 80047d8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80047dc:	4b57      	ldr	r3, [pc, #348]	; (800493c <_dtoa_r+0x2e4>)
 80047de:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80047e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047e6:	f7fc fbed 	bl	8000fc4 <__aeabi_dcmplt>
 80047ea:	2800      	cmp	r0, #0
 80047ec:	d04f      	beq.n	800488e <_dtoa_r+0x236>
 80047ee:	2300      	movs	r3, #0
 80047f0:	f10a 3aff 	add.w	sl, sl, #4294967295
 80047f4:	930f      	str	r3, [sp, #60]	; 0x3c
 80047f6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80047f8:	1b1c      	subs	r4, r3, r4
 80047fa:	1e63      	subs	r3, r4, #1
 80047fc:	9309      	str	r3, [sp, #36]	; 0x24
 80047fe:	bf49      	itett	mi
 8004800:	f1c4 0301 	rsbmi	r3, r4, #1
 8004804:	2300      	movpl	r3, #0
 8004806:	9306      	strmi	r3, [sp, #24]
 8004808:	2300      	movmi	r3, #0
 800480a:	bf54      	ite	pl
 800480c:	9306      	strpl	r3, [sp, #24]
 800480e:	9309      	strmi	r3, [sp, #36]	; 0x24
 8004810:	f1ba 0f00 	cmp.w	sl, #0
 8004814:	db3d      	blt.n	8004892 <_dtoa_r+0x23a>
 8004816:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004818:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800481c:	4453      	add	r3, sl
 800481e:	9309      	str	r3, [sp, #36]	; 0x24
 8004820:	2300      	movs	r3, #0
 8004822:	930a      	str	r3, [sp, #40]	; 0x28
 8004824:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004826:	2b09      	cmp	r3, #9
 8004828:	f200 808c 	bhi.w	8004944 <_dtoa_r+0x2ec>
 800482c:	2b05      	cmp	r3, #5
 800482e:	bfc4      	itt	gt
 8004830:	3b04      	subgt	r3, #4
 8004832:	9322      	strgt	r3, [sp, #136]	; 0x88
 8004834:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004836:	bfc8      	it	gt
 8004838:	2400      	movgt	r4, #0
 800483a:	f1a3 0302 	sub.w	r3, r3, #2
 800483e:	bfd8      	it	le
 8004840:	2401      	movle	r4, #1
 8004842:	2b03      	cmp	r3, #3
 8004844:	f200 808a 	bhi.w	800495c <_dtoa_r+0x304>
 8004848:	e8df f003 	tbb	[pc, r3]
 800484c:	5b4d4f2d 	.word	0x5b4d4f2d
 8004850:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8004854:	441c      	add	r4, r3
 8004856:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800485a:	2b20      	cmp	r3, #32
 800485c:	bfc3      	ittte	gt
 800485e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8004862:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8004866:	fa09 f303 	lslgt.w	r3, r9, r3
 800486a:	f1c3 0320 	rsble	r3, r3, #32
 800486e:	bfc6      	itte	gt
 8004870:	fa26 f000 	lsrgt.w	r0, r6, r0
 8004874:	4318      	orrgt	r0, r3
 8004876:	fa06 f003 	lslle.w	r0, r6, r3
 800487a:	f7fb fdbb 	bl	80003f4 <__aeabi_ui2d>
 800487e:	2301      	movs	r3, #1
 8004880:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8004884:	3c01      	subs	r4, #1
 8004886:	9313      	str	r3, [sp, #76]	; 0x4c
 8004888:	e76f      	b.n	800476a <_dtoa_r+0x112>
 800488a:	2301      	movs	r3, #1
 800488c:	e7b2      	b.n	80047f4 <_dtoa_r+0x19c>
 800488e:	900f      	str	r0, [sp, #60]	; 0x3c
 8004890:	e7b1      	b.n	80047f6 <_dtoa_r+0x19e>
 8004892:	9b06      	ldr	r3, [sp, #24]
 8004894:	eba3 030a 	sub.w	r3, r3, sl
 8004898:	9306      	str	r3, [sp, #24]
 800489a:	f1ca 0300 	rsb	r3, sl, #0
 800489e:	930a      	str	r3, [sp, #40]	; 0x28
 80048a0:	2300      	movs	r3, #0
 80048a2:	930e      	str	r3, [sp, #56]	; 0x38
 80048a4:	e7be      	b.n	8004824 <_dtoa_r+0x1cc>
 80048a6:	2300      	movs	r3, #0
 80048a8:	930b      	str	r3, [sp, #44]	; 0x2c
 80048aa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	dc58      	bgt.n	8004962 <_dtoa_r+0x30a>
 80048b0:	f04f 0901 	mov.w	r9, #1
 80048b4:	464b      	mov	r3, r9
 80048b6:	f8cd 9020 	str.w	r9, [sp, #32]
 80048ba:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 80048be:	2200      	movs	r2, #0
 80048c0:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80048c2:	6042      	str	r2, [r0, #4]
 80048c4:	2204      	movs	r2, #4
 80048c6:	f102 0614 	add.w	r6, r2, #20
 80048ca:	429e      	cmp	r6, r3
 80048cc:	6841      	ldr	r1, [r0, #4]
 80048ce:	d94e      	bls.n	800496e <_dtoa_r+0x316>
 80048d0:	4628      	mov	r0, r5
 80048d2:	f000 fee9 	bl	80056a8 <_Balloc>
 80048d6:	9003      	str	r0, [sp, #12]
 80048d8:	2800      	cmp	r0, #0
 80048da:	d14c      	bne.n	8004976 <_dtoa_r+0x31e>
 80048dc:	4602      	mov	r2, r0
 80048de:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80048e2:	4b17      	ldr	r3, [pc, #92]	; (8004940 <_dtoa_r+0x2e8>)
 80048e4:	e6cc      	b.n	8004680 <_dtoa_r+0x28>
 80048e6:	2301      	movs	r3, #1
 80048e8:	e7de      	b.n	80048a8 <_dtoa_r+0x250>
 80048ea:	2300      	movs	r3, #0
 80048ec:	930b      	str	r3, [sp, #44]	; 0x2c
 80048ee:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80048f0:	eb0a 0903 	add.w	r9, sl, r3
 80048f4:	f109 0301 	add.w	r3, r9, #1
 80048f8:	2b01      	cmp	r3, #1
 80048fa:	9308      	str	r3, [sp, #32]
 80048fc:	bfb8      	it	lt
 80048fe:	2301      	movlt	r3, #1
 8004900:	e7dd      	b.n	80048be <_dtoa_r+0x266>
 8004902:	2301      	movs	r3, #1
 8004904:	e7f2      	b.n	80048ec <_dtoa_r+0x294>
 8004906:	bf00      	nop
 8004908:	636f4361 	.word	0x636f4361
 800490c:	3fd287a7 	.word	0x3fd287a7
 8004910:	8b60c8b3 	.word	0x8b60c8b3
 8004914:	3fc68a28 	.word	0x3fc68a28
 8004918:	509f79fb 	.word	0x509f79fb
 800491c:	3fd34413 	.word	0x3fd34413
 8004920:	080063cd 	.word	0x080063cd
 8004924:	080063e4 	.word	0x080063e4
 8004928:	7ff00000 	.word	0x7ff00000
 800492c:	080063c9 	.word	0x080063c9
 8004930:	080063c0 	.word	0x080063c0
 8004934:	0800639d 	.word	0x0800639d
 8004938:	3ff80000 	.word	0x3ff80000
 800493c:	08006538 	.word	0x08006538
 8004940:	0800643f 	.word	0x0800643f
 8004944:	2401      	movs	r4, #1
 8004946:	2300      	movs	r3, #0
 8004948:	940b      	str	r4, [sp, #44]	; 0x2c
 800494a:	9322      	str	r3, [sp, #136]	; 0x88
 800494c:	f04f 39ff 	mov.w	r9, #4294967295
 8004950:	2200      	movs	r2, #0
 8004952:	2312      	movs	r3, #18
 8004954:	f8cd 9020 	str.w	r9, [sp, #32]
 8004958:	9223      	str	r2, [sp, #140]	; 0x8c
 800495a:	e7b0      	b.n	80048be <_dtoa_r+0x266>
 800495c:	2301      	movs	r3, #1
 800495e:	930b      	str	r3, [sp, #44]	; 0x2c
 8004960:	e7f4      	b.n	800494c <_dtoa_r+0x2f4>
 8004962:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8004966:	464b      	mov	r3, r9
 8004968:	f8cd 9020 	str.w	r9, [sp, #32]
 800496c:	e7a7      	b.n	80048be <_dtoa_r+0x266>
 800496e:	3101      	adds	r1, #1
 8004970:	6041      	str	r1, [r0, #4]
 8004972:	0052      	lsls	r2, r2, #1
 8004974:	e7a7      	b.n	80048c6 <_dtoa_r+0x26e>
 8004976:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004978:	9a03      	ldr	r2, [sp, #12]
 800497a:	601a      	str	r2, [r3, #0]
 800497c:	9b08      	ldr	r3, [sp, #32]
 800497e:	2b0e      	cmp	r3, #14
 8004980:	f200 80a8 	bhi.w	8004ad4 <_dtoa_r+0x47c>
 8004984:	2c00      	cmp	r4, #0
 8004986:	f000 80a5 	beq.w	8004ad4 <_dtoa_r+0x47c>
 800498a:	f1ba 0f00 	cmp.w	sl, #0
 800498e:	dd34      	ble.n	80049fa <_dtoa_r+0x3a2>
 8004990:	4a9a      	ldr	r2, [pc, #616]	; (8004bfc <_dtoa_r+0x5a4>)
 8004992:	f00a 030f 	and.w	r3, sl, #15
 8004996:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800499a:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800499e:	e9d3 3400 	ldrd	r3, r4, [r3]
 80049a2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80049a6:	ea4f 142a 	mov.w	r4, sl, asr #4
 80049aa:	d016      	beq.n	80049da <_dtoa_r+0x382>
 80049ac:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80049b0:	4b93      	ldr	r3, [pc, #588]	; (8004c00 <_dtoa_r+0x5a8>)
 80049b2:	2703      	movs	r7, #3
 80049b4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80049b8:	f7fb fec0 	bl	800073c <__aeabi_ddiv>
 80049bc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80049c0:	f004 040f 	and.w	r4, r4, #15
 80049c4:	4e8e      	ldr	r6, [pc, #568]	; (8004c00 <_dtoa_r+0x5a8>)
 80049c6:	b954      	cbnz	r4, 80049de <_dtoa_r+0x386>
 80049c8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80049cc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80049d0:	f7fb feb4 	bl	800073c <__aeabi_ddiv>
 80049d4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80049d8:	e029      	b.n	8004a2e <_dtoa_r+0x3d6>
 80049da:	2702      	movs	r7, #2
 80049dc:	e7f2      	b.n	80049c4 <_dtoa_r+0x36c>
 80049de:	07e1      	lsls	r1, r4, #31
 80049e0:	d508      	bpl.n	80049f4 <_dtoa_r+0x39c>
 80049e2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80049e6:	e9d6 2300 	ldrd	r2, r3, [r6]
 80049ea:	f7fb fd7d 	bl	80004e8 <__aeabi_dmul>
 80049ee:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80049f2:	3701      	adds	r7, #1
 80049f4:	1064      	asrs	r4, r4, #1
 80049f6:	3608      	adds	r6, #8
 80049f8:	e7e5      	b.n	80049c6 <_dtoa_r+0x36e>
 80049fa:	f000 80a5 	beq.w	8004b48 <_dtoa_r+0x4f0>
 80049fe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004a02:	f1ca 0400 	rsb	r4, sl, #0
 8004a06:	4b7d      	ldr	r3, [pc, #500]	; (8004bfc <_dtoa_r+0x5a4>)
 8004a08:	f004 020f 	and.w	r2, r4, #15
 8004a0c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004a10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a14:	f7fb fd68 	bl	80004e8 <__aeabi_dmul>
 8004a18:	2702      	movs	r7, #2
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004a20:	4e77      	ldr	r6, [pc, #476]	; (8004c00 <_dtoa_r+0x5a8>)
 8004a22:	1124      	asrs	r4, r4, #4
 8004a24:	2c00      	cmp	r4, #0
 8004a26:	f040 8084 	bne.w	8004b32 <_dtoa_r+0x4da>
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d1d2      	bne.n	80049d4 <_dtoa_r+0x37c>
 8004a2e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	f000 808b 	beq.w	8004b4c <_dtoa_r+0x4f4>
 8004a36:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8004a3a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8004a3e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004a42:	2200      	movs	r2, #0
 8004a44:	4b6f      	ldr	r3, [pc, #444]	; (8004c04 <_dtoa_r+0x5ac>)
 8004a46:	f7fc fabd 	bl	8000fc4 <__aeabi_dcmplt>
 8004a4a:	2800      	cmp	r0, #0
 8004a4c:	d07e      	beq.n	8004b4c <_dtoa_r+0x4f4>
 8004a4e:	9b08      	ldr	r3, [sp, #32]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d07b      	beq.n	8004b4c <_dtoa_r+0x4f4>
 8004a54:	f1b9 0f00 	cmp.w	r9, #0
 8004a58:	dd38      	ble.n	8004acc <_dtoa_r+0x474>
 8004a5a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004a5e:	2200      	movs	r2, #0
 8004a60:	4b69      	ldr	r3, [pc, #420]	; (8004c08 <_dtoa_r+0x5b0>)
 8004a62:	f7fb fd41 	bl	80004e8 <__aeabi_dmul>
 8004a66:	464c      	mov	r4, r9
 8004a68:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004a6c:	f10a 38ff 	add.w	r8, sl, #4294967295
 8004a70:	3701      	adds	r7, #1
 8004a72:	4638      	mov	r0, r7
 8004a74:	f7fb fcce 	bl	8000414 <__aeabi_i2d>
 8004a78:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004a7c:	f7fb fd34 	bl	80004e8 <__aeabi_dmul>
 8004a80:	2200      	movs	r2, #0
 8004a82:	4b62      	ldr	r3, [pc, #392]	; (8004c0c <_dtoa_r+0x5b4>)
 8004a84:	f7fb fb7a 	bl	800017c <__adddf3>
 8004a88:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8004a8c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004a90:	9611      	str	r6, [sp, #68]	; 0x44
 8004a92:	2c00      	cmp	r4, #0
 8004a94:	d15d      	bne.n	8004b52 <_dtoa_r+0x4fa>
 8004a96:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	4b5c      	ldr	r3, [pc, #368]	; (8004c10 <_dtoa_r+0x5b8>)
 8004a9e:	f7fb fb6b 	bl	8000178 <__aeabi_dsub>
 8004aa2:	4602      	mov	r2, r0
 8004aa4:	460b      	mov	r3, r1
 8004aa6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004aaa:	4633      	mov	r3, r6
 8004aac:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004aae:	f7fc faa7 	bl	8001000 <__aeabi_dcmpgt>
 8004ab2:	2800      	cmp	r0, #0
 8004ab4:	f040 829c 	bne.w	8004ff0 <_dtoa_r+0x998>
 8004ab8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004abc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004abe:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8004ac2:	f7fc fa7f 	bl	8000fc4 <__aeabi_dcmplt>
 8004ac6:	2800      	cmp	r0, #0
 8004ac8:	f040 8290 	bne.w	8004fec <_dtoa_r+0x994>
 8004acc:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8004ad0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8004ad4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	f2c0 8152 	blt.w	8004d80 <_dtoa_r+0x728>
 8004adc:	f1ba 0f0e 	cmp.w	sl, #14
 8004ae0:	f300 814e 	bgt.w	8004d80 <_dtoa_r+0x728>
 8004ae4:	4b45      	ldr	r3, [pc, #276]	; (8004bfc <_dtoa_r+0x5a4>)
 8004ae6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8004aea:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004aee:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8004af2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	f280 80db 	bge.w	8004cb0 <_dtoa_r+0x658>
 8004afa:	9b08      	ldr	r3, [sp, #32]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	f300 80d7 	bgt.w	8004cb0 <_dtoa_r+0x658>
 8004b02:	f040 8272 	bne.w	8004fea <_dtoa_r+0x992>
 8004b06:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	4b40      	ldr	r3, [pc, #256]	; (8004c10 <_dtoa_r+0x5b8>)
 8004b0e:	f7fb fceb 	bl	80004e8 <__aeabi_dmul>
 8004b12:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004b16:	f7fc fa69 	bl	8000fec <__aeabi_dcmpge>
 8004b1a:	9c08      	ldr	r4, [sp, #32]
 8004b1c:	4626      	mov	r6, r4
 8004b1e:	2800      	cmp	r0, #0
 8004b20:	f040 8248 	bne.w	8004fb4 <_dtoa_r+0x95c>
 8004b24:	2331      	movs	r3, #49	; 0x31
 8004b26:	9f03      	ldr	r7, [sp, #12]
 8004b28:	f10a 0a01 	add.w	sl, sl, #1
 8004b2c:	f807 3b01 	strb.w	r3, [r7], #1
 8004b30:	e244      	b.n	8004fbc <_dtoa_r+0x964>
 8004b32:	07e2      	lsls	r2, r4, #31
 8004b34:	d505      	bpl.n	8004b42 <_dtoa_r+0x4ea>
 8004b36:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004b3a:	f7fb fcd5 	bl	80004e8 <__aeabi_dmul>
 8004b3e:	2301      	movs	r3, #1
 8004b40:	3701      	adds	r7, #1
 8004b42:	1064      	asrs	r4, r4, #1
 8004b44:	3608      	adds	r6, #8
 8004b46:	e76d      	b.n	8004a24 <_dtoa_r+0x3cc>
 8004b48:	2702      	movs	r7, #2
 8004b4a:	e770      	b.n	8004a2e <_dtoa_r+0x3d6>
 8004b4c:	46d0      	mov	r8, sl
 8004b4e:	9c08      	ldr	r4, [sp, #32]
 8004b50:	e78f      	b.n	8004a72 <_dtoa_r+0x41a>
 8004b52:	9903      	ldr	r1, [sp, #12]
 8004b54:	4b29      	ldr	r3, [pc, #164]	; (8004bfc <_dtoa_r+0x5a4>)
 8004b56:	4421      	add	r1, r4
 8004b58:	9112      	str	r1, [sp, #72]	; 0x48
 8004b5a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004b5c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004b60:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8004b64:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004b68:	2900      	cmp	r1, #0
 8004b6a:	d055      	beq.n	8004c18 <_dtoa_r+0x5c0>
 8004b6c:	2000      	movs	r0, #0
 8004b6e:	4929      	ldr	r1, [pc, #164]	; (8004c14 <_dtoa_r+0x5bc>)
 8004b70:	f7fb fde4 	bl	800073c <__aeabi_ddiv>
 8004b74:	463b      	mov	r3, r7
 8004b76:	4632      	mov	r2, r6
 8004b78:	f7fb fafe 	bl	8000178 <__aeabi_dsub>
 8004b7c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004b80:	9f03      	ldr	r7, [sp, #12]
 8004b82:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004b86:	f7fc fa5b 	bl	8001040 <__aeabi_d2iz>
 8004b8a:	4604      	mov	r4, r0
 8004b8c:	f7fb fc42 	bl	8000414 <__aeabi_i2d>
 8004b90:	4602      	mov	r2, r0
 8004b92:	460b      	mov	r3, r1
 8004b94:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004b98:	f7fb faee 	bl	8000178 <__aeabi_dsub>
 8004b9c:	4602      	mov	r2, r0
 8004b9e:	460b      	mov	r3, r1
 8004ba0:	3430      	adds	r4, #48	; 0x30
 8004ba2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004ba6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004baa:	f807 4b01 	strb.w	r4, [r7], #1
 8004bae:	f7fc fa09 	bl	8000fc4 <__aeabi_dcmplt>
 8004bb2:	2800      	cmp	r0, #0
 8004bb4:	d174      	bne.n	8004ca0 <_dtoa_r+0x648>
 8004bb6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004bba:	2000      	movs	r0, #0
 8004bbc:	4911      	ldr	r1, [pc, #68]	; (8004c04 <_dtoa_r+0x5ac>)
 8004bbe:	f7fb fadb 	bl	8000178 <__aeabi_dsub>
 8004bc2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004bc6:	f7fc f9fd 	bl	8000fc4 <__aeabi_dcmplt>
 8004bca:	2800      	cmp	r0, #0
 8004bcc:	f040 80b7 	bne.w	8004d3e <_dtoa_r+0x6e6>
 8004bd0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004bd2:	429f      	cmp	r7, r3
 8004bd4:	f43f af7a 	beq.w	8004acc <_dtoa_r+0x474>
 8004bd8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004bdc:	2200      	movs	r2, #0
 8004bde:	4b0a      	ldr	r3, [pc, #40]	; (8004c08 <_dtoa_r+0x5b0>)
 8004be0:	f7fb fc82 	bl	80004e8 <__aeabi_dmul>
 8004be4:	2200      	movs	r2, #0
 8004be6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004bea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004bee:	4b06      	ldr	r3, [pc, #24]	; (8004c08 <_dtoa_r+0x5b0>)
 8004bf0:	f7fb fc7a 	bl	80004e8 <__aeabi_dmul>
 8004bf4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004bf8:	e7c3      	b.n	8004b82 <_dtoa_r+0x52a>
 8004bfa:	bf00      	nop
 8004bfc:	08006538 	.word	0x08006538
 8004c00:	08006510 	.word	0x08006510
 8004c04:	3ff00000 	.word	0x3ff00000
 8004c08:	40240000 	.word	0x40240000
 8004c0c:	401c0000 	.word	0x401c0000
 8004c10:	40140000 	.word	0x40140000
 8004c14:	3fe00000 	.word	0x3fe00000
 8004c18:	4630      	mov	r0, r6
 8004c1a:	4639      	mov	r1, r7
 8004c1c:	f7fb fc64 	bl	80004e8 <__aeabi_dmul>
 8004c20:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004c22:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004c26:	9c03      	ldr	r4, [sp, #12]
 8004c28:	9314      	str	r3, [sp, #80]	; 0x50
 8004c2a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004c2e:	f7fc fa07 	bl	8001040 <__aeabi_d2iz>
 8004c32:	9015      	str	r0, [sp, #84]	; 0x54
 8004c34:	f7fb fbee 	bl	8000414 <__aeabi_i2d>
 8004c38:	4602      	mov	r2, r0
 8004c3a:	460b      	mov	r3, r1
 8004c3c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004c40:	f7fb fa9a 	bl	8000178 <__aeabi_dsub>
 8004c44:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004c46:	4606      	mov	r6, r0
 8004c48:	3330      	adds	r3, #48	; 0x30
 8004c4a:	f804 3b01 	strb.w	r3, [r4], #1
 8004c4e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004c50:	460f      	mov	r7, r1
 8004c52:	429c      	cmp	r4, r3
 8004c54:	f04f 0200 	mov.w	r2, #0
 8004c58:	d124      	bne.n	8004ca4 <_dtoa_r+0x64c>
 8004c5a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004c5e:	4bb0      	ldr	r3, [pc, #704]	; (8004f20 <_dtoa_r+0x8c8>)
 8004c60:	f7fb fa8c 	bl	800017c <__adddf3>
 8004c64:	4602      	mov	r2, r0
 8004c66:	460b      	mov	r3, r1
 8004c68:	4630      	mov	r0, r6
 8004c6a:	4639      	mov	r1, r7
 8004c6c:	f7fc f9c8 	bl	8001000 <__aeabi_dcmpgt>
 8004c70:	2800      	cmp	r0, #0
 8004c72:	d163      	bne.n	8004d3c <_dtoa_r+0x6e4>
 8004c74:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004c78:	2000      	movs	r0, #0
 8004c7a:	49a9      	ldr	r1, [pc, #676]	; (8004f20 <_dtoa_r+0x8c8>)
 8004c7c:	f7fb fa7c 	bl	8000178 <__aeabi_dsub>
 8004c80:	4602      	mov	r2, r0
 8004c82:	460b      	mov	r3, r1
 8004c84:	4630      	mov	r0, r6
 8004c86:	4639      	mov	r1, r7
 8004c88:	f7fc f99c 	bl	8000fc4 <__aeabi_dcmplt>
 8004c8c:	2800      	cmp	r0, #0
 8004c8e:	f43f af1d 	beq.w	8004acc <_dtoa_r+0x474>
 8004c92:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8004c94:	1e7b      	subs	r3, r7, #1
 8004c96:	9314      	str	r3, [sp, #80]	; 0x50
 8004c98:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8004c9c:	2b30      	cmp	r3, #48	; 0x30
 8004c9e:	d0f8      	beq.n	8004c92 <_dtoa_r+0x63a>
 8004ca0:	46c2      	mov	sl, r8
 8004ca2:	e03b      	b.n	8004d1c <_dtoa_r+0x6c4>
 8004ca4:	4b9f      	ldr	r3, [pc, #636]	; (8004f24 <_dtoa_r+0x8cc>)
 8004ca6:	f7fb fc1f 	bl	80004e8 <__aeabi_dmul>
 8004caa:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004cae:	e7bc      	b.n	8004c2a <_dtoa_r+0x5d2>
 8004cb0:	9f03      	ldr	r7, [sp, #12]
 8004cb2:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8004cb6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004cba:	4640      	mov	r0, r8
 8004cbc:	4649      	mov	r1, r9
 8004cbe:	f7fb fd3d 	bl	800073c <__aeabi_ddiv>
 8004cc2:	f7fc f9bd 	bl	8001040 <__aeabi_d2iz>
 8004cc6:	4604      	mov	r4, r0
 8004cc8:	f7fb fba4 	bl	8000414 <__aeabi_i2d>
 8004ccc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004cd0:	f7fb fc0a 	bl	80004e8 <__aeabi_dmul>
 8004cd4:	4602      	mov	r2, r0
 8004cd6:	460b      	mov	r3, r1
 8004cd8:	4640      	mov	r0, r8
 8004cda:	4649      	mov	r1, r9
 8004cdc:	f7fb fa4c 	bl	8000178 <__aeabi_dsub>
 8004ce0:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8004ce4:	f807 6b01 	strb.w	r6, [r7], #1
 8004ce8:	9e03      	ldr	r6, [sp, #12]
 8004cea:	f8dd c020 	ldr.w	ip, [sp, #32]
 8004cee:	1bbe      	subs	r6, r7, r6
 8004cf0:	45b4      	cmp	ip, r6
 8004cf2:	4602      	mov	r2, r0
 8004cf4:	460b      	mov	r3, r1
 8004cf6:	d136      	bne.n	8004d66 <_dtoa_r+0x70e>
 8004cf8:	f7fb fa40 	bl	800017c <__adddf3>
 8004cfc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004d00:	4680      	mov	r8, r0
 8004d02:	4689      	mov	r9, r1
 8004d04:	f7fc f97c 	bl	8001000 <__aeabi_dcmpgt>
 8004d08:	bb58      	cbnz	r0, 8004d62 <_dtoa_r+0x70a>
 8004d0a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004d0e:	4640      	mov	r0, r8
 8004d10:	4649      	mov	r1, r9
 8004d12:	f7fc f94d 	bl	8000fb0 <__aeabi_dcmpeq>
 8004d16:	b108      	cbz	r0, 8004d1c <_dtoa_r+0x6c4>
 8004d18:	07e1      	lsls	r1, r4, #31
 8004d1a:	d422      	bmi.n	8004d62 <_dtoa_r+0x70a>
 8004d1c:	4628      	mov	r0, r5
 8004d1e:	4659      	mov	r1, fp
 8004d20:	f000 fd02 	bl	8005728 <_Bfree>
 8004d24:	2300      	movs	r3, #0
 8004d26:	703b      	strb	r3, [r7, #0]
 8004d28:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8004d2a:	f10a 0001 	add.w	r0, sl, #1
 8004d2e:	6018      	str	r0, [r3, #0]
 8004d30:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	f43f acde 	beq.w	80046f4 <_dtoa_r+0x9c>
 8004d38:	601f      	str	r7, [r3, #0]
 8004d3a:	e4db      	b.n	80046f4 <_dtoa_r+0x9c>
 8004d3c:	4627      	mov	r7, r4
 8004d3e:	463b      	mov	r3, r7
 8004d40:	461f      	mov	r7, r3
 8004d42:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004d46:	2a39      	cmp	r2, #57	; 0x39
 8004d48:	d107      	bne.n	8004d5a <_dtoa_r+0x702>
 8004d4a:	9a03      	ldr	r2, [sp, #12]
 8004d4c:	429a      	cmp	r2, r3
 8004d4e:	d1f7      	bne.n	8004d40 <_dtoa_r+0x6e8>
 8004d50:	2230      	movs	r2, #48	; 0x30
 8004d52:	9903      	ldr	r1, [sp, #12]
 8004d54:	f108 0801 	add.w	r8, r8, #1
 8004d58:	700a      	strb	r2, [r1, #0]
 8004d5a:	781a      	ldrb	r2, [r3, #0]
 8004d5c:	3201      	adds	r2, #1
 8004d5e:	701a      	strb	r2, [r3, #0]
 8004d60:	e79e      	b.n	8004ca0 <_dtoa_r+0x648>
 8004d62:	46d0      	mov	r8, sl
 8004d64:	e7eb      	b.n	8004d3e <_dtoa_r+0x6e6>
 8004d66:	2200      	movs	r2, #0
 8004d68:	4b6e      	ldr	r3, [pc, #440]	; (8004f24 <_dtoa_r+0x8cc>)
 8004d6a:	f7fb fbbd 	bl	80004e8 <__aeabi_dmul>
 8004d6e:	2200      	movs	r2, #0
 8004d70:	2300      	movs	r3, #0
 8004d72:	4680      	mov	r8, r0
 8004d74:	4689      	mov	r9, r1
 8004d76:	f7fc f91b 	bl	8000fb0 <__aeabi_dcmpeq>
 8004d7a:	2800      	cmp	r0, #0
 8004d7c:	d09b      	beq.n	8004cb6 <_dtoa_r+0x65e>
 8004d7e:	e7cd      	b.n	8004d1c <_dtoa_r+0x6c4>
 8004d80:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004d82:	2a00      	cmp	r2, #0
 8004d84:	f000 80d0 	beq.w	8004f28 <_dtoa_r+0x8d0>
 8004d88:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8004d8a:	2a01      	cmp	r2, #1
 8004d8c:	f300 80ae 	bgt.w	8004eec <_dtoa_r+0x894>
 8004d90:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8004d92:	2a00      	cmp	r2, #0
 8004d94:	f000 80a6 	beq.w	8004ee4 <_dtoa_r+0x88c>
 8004d98:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8004d9c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8004d9e:	9f06      	ldr	r7, [sp, #24]
 8004da0:	9a06      	ldr	r2, [sp, #24]
 8004da2:	2101      	movs	r1, #1
 8004da4:	441a      	add	r2, r3
 8004da6:	9206      	str	r2, [sp, #24]
 8004da8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004daa:	4628      	mov	r0, r5
 8004dac:	441a      	add	r2, r3
 8004dae:	9209      	str	r2, [sp, #36]	; 0x24
 8004db0:	f000 fd70 	bl	8005894 <__i2b>
 8004db4:	4606      	mov	r6, r0
 8004db6:	2f00      	cmp	r7, #0
 8004db8:	dd0c      	ble.n	8004dd4 <_dtoa_r+0x77c>
 8004dba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	dd09      	ble.n	8004dd4 <_dtoa_r+0x77c>
 8004dc0:	42bb      	cmp	r3, r7
 8004dc2:	bfa8      	it	ge
 8004dc4:	463b      	movge	r3, r7
 8004dc6:	9a06      	ldr	r2, [sp, #24]
 8004dc8:	1aff      	subs	r7, r7, r3
 8004dca:	1ad2      	subs	r2, r2, r3
 8004dcc:	9206      	str	r2, [sp, #24]
 8004dce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004dd0:	1ad3      	subs	r3, r2, r3
 8004dd2:	9309      	str	r3, [sp, #36]	; 0x24
 8004dd4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004dd6:	b1f3      	cbz	r3, 8004e16 <_dtoa_r+0x7be>
 8004dd8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	f000 80a8 	beq.w	8004f30 <_dtoa_r+0x8d8>
 8004de0:	2c00      	cmp	r4, #0
 8004de2:	dd10      	ble.n	8004e06 <_dtoa_r+0x7ae>
 8004de4:	4631      	mov	r1, r6
 8004de6:	4622      	mov	r2, r4
 8004de8:	4628      	mov	r0, r5
 8004dea:	f000 fe11 	bl	8005a10 <__pow5mult>
 8004dee:	465a      	mov	r2, fp
 8004df0:	4601      	mov	r1, r0
 8004df2:	4606      	mov	r6, r0
 8004df4:	4628      	mov	r0, r5
 8004df6:	f000 fd63 	bl	80058c0 <__multiply>
 8004dfa:	4680      	mov	r8, r0
 8004dfc:	4659      	mov	r1, fp
 8004dfe:	4628      	mov	r0, r5
 8004e00:	f000 fc92 	bl	8005728 <_Bfree>
 8004e04:	46c3      	mov	fp, r8
 8004e06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004e08:	1b1a      	subs	r2, r3, r4
 8004e0a:	d004      	beq.n	8004e16 <_dtoa_r+0x7be>
 8004e0c:	4659      	mov	r1, fp
 8004e0e:	4628      	mov	r0, r5
 8004e10:	f000 fdfe 	bl	8005a10 <__pow5mult>
 8004e14:	4683      	mov	fp, r0
 8004e16:	2101      	movs	r1, #1
 8004e18:	4628      	mov	r0, r5
 8004e1a:	f000 fd3b 	bl	8005894 <__i2b>
 8004e1e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004e20:	4604      	mov	r4, r0
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	f340 8086 	ble.w	8004f34 <_dtoa_r+0x8dc>
 8004e28:	461a      	mov	r2, r3
 8004e2a:	4601      	mov	r1, r0
 8004e2c:	4628      	mov	r0, r5
 8004e2e:	f000 fdef 	bl	8005a10 <__pow5mult>
 8004e32:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004e34:	4604      	mov	r4, r0
 8004e36:	2b01      	cmp	r3, #1
 8004e38:	dd7f      	ble.n	8004f3a <_dtoa_r+0x8e2>
 8004e3a:	f04f 0800 	mov.w	r8, #0
 8004e3e:	6923      	ldr	r3, [r4, #16]
 8004e40:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004e44:	6918      	ldr	r0, [r3, #16]
 8004e46:	f000 fcd7 	bl	80057f8 <__hi0bits>
 8004e4a:	f1c0 0020 	rsb	r0, r0, #32
 8004e4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e50:	4418      	add	r0, r3
 8004e52:	f010 001f 	ands.w	r0, r0, #31
 8004e56:	f000 8092 	beq.w	8004f7e <_dtoa_r+0x926>
 8004e5a:	f1c0 0320 	rsb	r3, r0, #32
 8004e5e:	2b04      	cmp	r3, #4
 8004e60:	f340 808a 	ble.w	8004f78 <_dtoa_r+0x920>
 8004e64:	f1c0 001c 	rsb	r0, r0, #28
 8004e68:	9b06      	ldr	r3, [sp, #24]
 8004e6a:	4407      	add	r7, r0
 8004e6c:	4403      	add	r3, r0
 8004e6e:	9306      	str	r3, [sp, #24]
 8004e70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e72:	4403      	add	r3, r0
 8004e74:	9309      	str	r3, [sp, #36]	; 0x24
 8004e76:	9b06      	ldr	r3, [sp, #24]
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	dd05      	ble.n	8004e88 <_dtoa_r+0x830>
 8004e7c:	4659      	mov	r1, fp
 8004e7e:	461a      	mov	r2, r3
 8004e80:	4628      	mov	r0, r5
 8004e82:	f000 fe1f 	bl	8005ac4 <__lshift>
 8004e86:	4683      	mov	fp, r0
 8004e88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	dd05      	ble.n	8004e9a <_dtoa_r+0x842>
 8004e8e:	4621      	mov	r1, r4
 8004e90:	461a      	mov	r2, r3
 8004e92:	4628      	mov	r0, r5
 8004e94:	f000 fe16 	bl	8005ac4 <__lshift>
 8004e98:	4604      	mov	r4, r0
 8004e9a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d070      	beq.n	8004f82 <_dtoa_r+0x92a>
 8004ea0:	4621      	mov	r1, r4
 8004ea2:	4658      	mov	r0, fp
 8004ea4:	f000 fe7e 	bl	8005ba4 <__mcmp>
 8004ea8:	2800      	cmp	r0, #0
 8004eaa:	da6a      	bge.n	8004f82 <_dtoa_r+0x92a>
 8004eac:	2300      	movs	r3, #0
 8004eae:	4659      	mov	r1, fp
 8004eb0:	220a      	movs	r2, #10
 8004eb2:	4628      	mov	r0, r5
 8004eb4:	f000 fc5a 	bl	800576c <__multadd>
 8004eb8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004eba:	4683      	mov	fp, r0
 8004ebc:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	f000 8194 	beq.w	80051ee <_dtoa_r+0xb96>
 8004ec6:	4631      	mov	r1, r6
 8004ec8:	2300      	movs	r3, #0
 8004eca:	220a      	movs	r2, #10
 8004ecc:	4628      	mov	r0, r5
 8004ece:	f000 fc4d 	bl	800576c <__multadd>
 8004ed2:	f1b9 0f00 	cmp.w	r9, #0
 8004ed6:	4606      	mov	r6, r0
 8004ed8:	f300 8093 	bgt.w	8005002 <_dtoa_r+0x9aa>
 8004edc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004ede:	2b02      	cmp	r3, #2
 8004ee0:	dc57      	bgt.n	8004f92 <_dtoa_r+0x93a>
 8004ee2:	e08e      	b.n	8005002 <_dtoa_r+0x9aa>
 8004ee4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8004ee6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8004eea:	e757      	b.n	8004d9c <_dtoa_r+0x744>
 8004eec:	9b08      	ldr	r3, [sp, #32]
 8004eee:	1e5c      	subs	r4, r3, #1
 8004ef0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004ef2:	42a3      	cmp	r3, r4
 8004ef4:	bfb7      	itett	lt
 8004ef6:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8004ef8:	1b1c      	subge	r4, r3, r4
 8004efa:	1ae2      	sublt	r2, r4, r3
 8004efc:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8004efe:	bfbe      	ittt	lt
 8004f00:	940a      	strlt	r4, [sp, #40]	; 0x28
 8004f02:	189b      	addlt	r3, r3, r2
 8004f04:	930e      	strlt	r3, [sp, #56]	; 0x38
 8004f06:	9b08      	ldr	r3, [sp, #32]
 8004f08:	bfb8      	it	lt
 8004f0a:	2400      	movlt	r4, #0
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	bfbb      	ittet	lt
 8004f10:	9b06      	ldrlt	r3, [sp, #24]
 8004f12:	9a08      	ldrlt	r2, [sp, #32]
 8004f14:	9f06      	ldrge	r7, [sp, #24]
 8004f16:	1a9f      	sublt	r7, r3, r2
 8004f18:	bfac      	ite	ge
 8004f1a:	9b08      	ldrge	r3, [sp, #32]
 8004f1c:	2300      	movlt	r3, #0
 8004f1e:	e73f      	b.n	8004da0 <_dtoa_r+0x748>
 8004f20:	3fe00000 	.word	0x3fe00000
 8004f24:	40240000 	.word	0x40240000
 8004f28:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8004f2a:	9f06      	ldr	r7, [sp, #24]
 8004f2c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8004f2e:	e742      	b.n	8004db6 <_dtoa_r+0x75e>
 8004f30:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004f32:	e76b      	b.n	8004e0c <_dtoa_r+0x7b4>
 8004f34:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004f36:	2b01      	cmp	r3, #1
 8004f38:	dc19      	bgt.n	8004f6e <_dtoa_r+0x916>
 8004f3a:	9b04      	ldr	r3, [sp, #16]
 8004f3c:	b9bb      	cbnz	r3, 8004f6e <_dtoa_r+0x916>
 8004f3e:	9b05      	ldr	r3, [sp, #20]
 8004f40:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004f44:	b99b      	cbnz	r3, 8004f6e <_dtoa_r+0x916>
 8004f46:	9b05      	ldr	r3, [sp, #20]
 8004f48:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004f4c:	0d1b      	lsrs	r3, r3, #20
 8004f4e:	051b      	lsls	r3, r3, #20
 8004f50:	b183      	cbz	r3, 8004f74 <_dtoa_r+0x91c>
 8004f52:	f04f 0801 	mov.w	r8, #1
 8004f56:	9b06      	ldr	r3, [sp, #24]
 8004f58:	3301      	adds	r3, #1
 8004f5a:	9306      	str	r3, [sp, #24]
 8004f5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f5e:	3301      	adds	r3, #1
 8004f60:	9309      	str	r3, [sp, #36]	; 0x24
 8004f62:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	f47f af6a 	bne.w	8004e3e <_dtoa_r+0x7e6>
 8004f6a:	2001      	movs	r0, #1
 8004f6c:	e76f      	b.n	8004e4e <_dtoa_r+0x7f6>
 8004f6e:	f04f 0800 	mov.w	r8, #0
 8004f72:	e7f6      	b.n	8004f62 <_dtoa_r+0x90a>
 8004f74:	4698      	mov	r8, r3
 8004f76:	e7f4      	b.n	8004f62 <_dtoa_r+0x90a>
 8004f78:	f43f af7d 	beq.w	8004e76 <_dtoa_r+0x81e>
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	301c      	adds	r0, #28
 8004f80:	e772      	b.n	8004e68 <_dtoa_r+0x810>
 8004f82:	9b08      	ldr	r3, [sp, #32]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	dc36      	bgt.n	8004ff6 <_dtoa_r+0x99e>
 8004f88:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004f8a:	2b02      	cmp	r3, #2
 8004f8c:	dd33      	ble.n	8004ff6 <_dtoa_r+0x99e>
 8004f8e:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004f92:	f1b9 0f00 	cmp.w	r9, #0
 8004f96:	d10d      	bne.n	8004fb4 <_dtoa_r+0x95c>
 8004f98:	4621      	mov	r1, r4
 8004f9a:	464b      	mov	r3, r9
 8004f9c:	2205      	movs	r2, #5
 8004f9e:	4628      	mov	r0, r5
 8004fa0:	f000 fbe4 	bl	800576c <__multadd>
 8004fa4:	4601      	mov	r1, r0
 8004fa6:	4604      	mov	r4, r0
 8004fa8:	4658      	mov	r0, fp
 8004faa:	f000 fdfb 	bl	8005ba4 <__mcmp>
 8004fae:	2800      	cmp	r0, #0
 8004fb0:	f73f adb8 	bgt.w	8004b24 <_dtoa_r+0x4cc>
 8004fb4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004fb6:	9f03      	ldr	r7, [sp, #12]
 8004fb8:	ea6f 0a03 	mvn.w	sl, r3
 8004fbc:	f04f 0800 	mov.w	r8, #0
 8004fc0:	4621      	mov	r1, r4
 8004fc2:	4628      	mov	r0, r5
 8004fc4:	f000 fbb0 	bl	8005728 <_Bfree>
 8004fc8:	2e00      	cmp	r6, #0
 8004fca:	f43f aea7 	beq.w	8004d1c <_dtoa_r+0x6c4>
 8004fce:	f1b8 0f00 	cmp.w	r8, #0
 8004fd2:	d005      	beq.n	8004fe0 <_dtoa_r+0x988>
 8004fd4:	45b0      	cmp	r8, r6
 8004fd6:	d003      	beq.n	8004fe0 <_dtoa_r+0x988>
 8004fd8:	4641      	mov	r1, r8
 8004fda:	4628      	mov	r0, r5
 8004fdc:	f000 fba4 	bl	8005728 <_Bfree>
 8004fe0:	4631      	mov	r1, r6
 8004fe2:	4628      	mov	r0, r5
 8004fe4:	f000 fba0 	bl	8005728 <_Bfree>
 8004fe8:	e698      	b.n	8004d1c <_dtoa_r+0x6c4>
 8004fea:	2400      	movs	r4, #0
 8004fec:	4626      	mov	r6, r4
 8004fee:	e7e1      	b.n	8004fb4 <_dtoa_r+0x95c>
 8004ff0:	46c2      	mov	sl, r8
 8004ff2:	4626      	mov	r6, r4
 8004ff4:	e596      	b.n	8004b24 <_dtoa_r+0x4cc>
 8004ff6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004ff8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	f000 80fd 	beq.w	80051fc <_dtoa_r+0xba4>
 8005002:	2f00      	cmp	r7, #0
 8005004:	dd05      	ble.n	8005012 <_dtoa_r+0x9ba>
 8005006:	4631      	mov	r1, r6
 8005008:	463a      	mov	r2, r7
 800500a:	4628      	mov	r0, r5
 800500c:	f000 fd5a 	bl	8005ac4 <__lshift>
 8005010:	4606      	mov	r6, r0
 8005012:	f1b8 0f00 	cmp.w	r8, #0
 8005016:	d05c      	beq.n	80050d2 <_dtoa_r+0xa7a>
 8005018:	4628      	mov	r0, r5
 800501a:	6871      	ldr	r1, [r6, #4]
 800501c:	f000 fb44 	bl	80056a8 <_Balloc>
 8005020:	4607      	mov	r7, r0
 8005022:	b928      	cbnz	r0, 8005030 <_dtoa_r+0x9d8>
 8005024:	4602      	mov	r2, r0
 8005026:	f240 21ea 	movw	r1, #746	; 0x2ea
 800502a:	4b7f      	ldr	r3, [pc, #508]	; (8005228 <_dtoa_r+0xbd0>)
 800502c:	f7ff bb28 	b.w	8004680 <_dtoa_r+0x28>
 8005030:	6932      	ldr	r2, [r6, #16]
 8005032:	f106 010c 	add.w	r1, r6, #12
 8005036:	3202      	adds	r2, #2
 8005038:	0092      	lsls	r2, r2, #2
 800503a:	300c      	adds	r0, #12
 800503c:	f7fe fba2 	bl	8003784 <memcpy>
 8005040:	2201      	movs	r2, #1
 8005042:	4639      	mov	r1, r7
 8005044:	4628      	mov	r0, r5
 8005046:	f000 fd3d 	bl	8005ac4 <__lshift>
 800504a:	46b0      	mov	r8, r6
 800504c:	4606      	mov	r6, r0
 800504e:	9b03      	ldr	r3, [sp, #12]
 8005050:	3301      	adds	r3, #1
 8005052:	9308      	str	r3, [sp, #32]
 8005054:	9b03      	ldr	r3, [sp, #12]
 8005056:	444b      	add	r3, r9
 8005058:	930a      	str	r3, [sp, #40]	; 0x28
 800505a:	9b04      	ldr	r3, [sp, #16]
 800505c:	f003 0301 	and.w	r3, r3, #1
 8005060:	9309      	str	r3, [sp, #36]	; 0x24
 8005062:	9b08      	ldr	r3, [sp, #32]
 8005064:	4621      	mov	r1, r4
 8005066:	3b01      	subs	r3, #1
 8005068:	4658      	mov	r0, fp
 800506a:	9304      	str	r3, [sp, #16]
 800506c:	f7ff fa66 	bl	800453c <quorem>
 8005070:	4603      	mov	r3, r0
 8005072:	4641      	mov	r1, r8
 8005074:	3330      	adds	r3, #48	; 0x30
 8005076:	9006      	str	r0, [sp, #24]
 8005078:	4658      	mov	r0, fp
 800507a:	930b      	str	r3, [sp, #44]	; 0x2c
 800507c:	f000 fd92 	bl	8005ba4 <__mcmp>
 8005080:	4632      	mov	r2, r6
 8005082:	4681      	mov	r9, r0
 8005084:	4621      	mov	r1, r4
 8005086:	4628      	mov	r0, r5
 8005088:	f000 fda8 	bl	8005bdc <__mdiff>
 800508c:	68c2      	ldr	r2, [r0, #12]
 800508e:	4607      	mov	r7, r0
 8005090:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005092:	bb02      	cbnz	r2, 80050d6 <_dtoa_r+0xa7e>
 8005094:	4601      	mov	r1, r0
 8005096:	4658      	mov	r0, fp
 8005098:	f000 fd84 	bl	8005ba4 <__mcmp>
 800509c:	4602      	mov	r2, r0
 800509e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80050a0:	4639      	mov	r1, r7
 80050a2:	4628      	mov	r0, r5
 80050a4:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 80050a8:	f000 fb3e 	bl	8005728 <_Bfree>
 80050ac:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80050ae:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80050b0:	9f08      	ldr	r7, [sp, #32]
 80050b2:	ea43 0102 	orr.w	r1, r3, r2
 80050b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80050b8:	430b      	orrs	r3, r1
 80050ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80050bc:	d10d      	bne.n	80050da <_dtoa_r+0xa82>
 80050be:	2b39      	cmp	r3, #57	; 0x39
 80050c0:	d029      	beq.n	8005116 <_dtoa_r+0xabe>
 80050c2:	f1b9 0f00 	cmp.w	r9, #0
 80050c6:	dd01      	ble.n	80050cc <_dtoa_r+0xa74>
 80050c8:	9b06      	ldr	r3, [sp, #24]
 80050ca:	3331      	adds	r3, #49	; 0x31
 80050cc:	9a04      	ldr	r2, [sp, #16]
 80050ce:	7013      	strb	r3, [r2, #0]
 80050d0:	e776      	b.n	8004fc0 <_dtoa_r+0x968>
 80050d2:	4630      	mov	r0, r6
 80050d4:	e7b9      	b.n	800504a <_dtoa_r+0x9f2>
 80050d6:	2201      	movs	r2, #1
 80050d8:	e7e2      	b.n	80050a0 <_dtoa_r+0xa48>
 80050da:	f1b9 0f00 	cmp.w	r9, #0
 80050de:	db06      	blt.n	80050ee <_dtoa_r+0xa96>
 80050e0:	9922      	ldr	r1, [sp, #136]	; 0x88
 80050e2:	ea41 0909 	orr.w	r9, r1, r9
 80050e6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80050e8:	ea59 0101 	orrs.w	r1, r9, r1
 80050ec:	d120      	bne.n	8005130 <_dtoa_r+0xad8>
 80050ee:	2a00      	cmp	r2, #0
 80050f0:	ddec      	ble.n	80050cc <_dtoa_r+0xa74>
 80050f2:	4659      	mov	r1, fp
 80050f4:	2201      	movs	r2, #1
 80050f6:	4628      	mov	r0, r5
 80050f8:	9308      	str	r3, [sp, #32]
 80050fa:	f000 fce3 	bl	8005ac4 <__lshift>
 80050fe:	4621      	mov	r1, r4
 8005100:	4683      	mov	fp, r0
 8005102:	f000 fd4f 	bl	8005ba4 <__mcmp>
 8005106:	2800      	cmp	r0, #0
 8005108:	9b08      	ldr	r3, [sp, #32]
 800510a:	dc02      	bgt.n	8005112 <_dtoa_r+0xaba>
 800510c:	d1de      	bne.n	80050cc <_dtoa_r+0xa74>
 800510e:	07da      	lsls	r2, r3, #31
 8005110:	d5dc      	bpl.n	80050cc <_dtoa_r+0xa74>
 8005112:	2b39      	cmp	r3, #57	; 0x39
 8005114:	d1d8      	bne.n	80050c8 <_dtoa_r+0xa70>
 8005116:	2339      	movs	r3, #57	; 0x39
 8005118:	9a04      	ldr	r2, [sp, #16]
 800511a:	7013      	strb	r3, [r2, #0]
 800511c:	463b      	mov	r3, r7
 800511e:	461f      	mov	r7, r3
 8005120:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8005124:	3b01      	subs	r3, #1
 8005126:	2a39      	cmp	r2, #57	; 0x39
 8005128:	d050      	beq.n	80051cc <_dtoa_r+0xb74>
 800512a:	3201      	adds	r2, #1
 800512c:	701a      	strb	r2, [r3, #0]
 800512e:	e747      	b.n	8004fc0 <_dtoa_r+0x968>
 8005130:	2a00      	cmp	r2, #0
 8005132:	dd03      	ble.n	800513c <_dtoa_r+0xae4>
 8005134:	2b39      	cmp	r3, #57	; 0x39
 8005136:	d0ee      	beq.n	8005116 <_dtoa_r+0xabe>
 8005138:	3301      	adds	r3, #1
 800513a:	e7c7      	b.n	80050cc <_dtoa_r+0xa74>
 800513c:	9a08      	ldr	r2, [sp, #32]
 800513e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005140:	f802 3c01 	strb.w	r3, [r2, #-1]
 8005144:	428a      	cmp	r2, r1
 8005146:	d02a      	beq.n	800519e <_dtoa_r+0xb46>
 8005148:	4659      	mov	r1, fp
 800514a:	2300      	movs	r3, #0
 800514c:	220a      	movs	r2, #10
 800514e:	4628      	mov	r0, r5
 8005150:	f000 fb0c 	bl	800576c <__multadd>
 8005154:	45b0      	cmp	r8, r6
 8005156:	4683      	mov	fp, r0
 8005158:	f04f 0300 	mov.w	r3, #0
 800515c:	f04f 020a 	mov.w	r2, #10
 8005160:	4641      	mov	r1, r8
 8005162:	4628      	mov	r0, r5
 8005164:	d107      	bne.n	8005176 <_dtoa_r+0xb1e>
 8005166:	f000 fb01 	bl	800576c <__multadd>
 800516a:	4680      	mov	r8, r0
 800516c:	4606      	mov	r6, r0
 800516e:	9b08      	ldr	r3, [sp, #32]
 8005170:	3301      	adds	r3, #1
 8005172:	9308      	str	r3, [sp, #32]
 8005174:	e775      	b.n	8005062 <_dtoa_r+0xa0a>
 8005176:	f000 faf9 	bl	800576c <__multadd>
 800517a:	4631      	mov	r1, r6
 800517c:	4680      	mov	r8, r0
 800517e:	2300      	movs	r3, #0
 8005180:	220a      	movs	r2, #10
 8005182:	4628      	mov	r0, r5
 8005184:	f000 faf2 	bl	800576c <__multadd>
 8005188:	4606      	mov	r6, r0
 800518a:	e7f0      	b.n	800516e <_dtoa_r+0xb16>
 800518c:	f1b9 0f00 	cmp.w	r9, #0
 8005190:	bfcc      	ite	gt
 8005192:	464f      	movgt	r7, r9
 8005194:	2701      	movle	r7, #1
 8005196:	f04f 0800 	mov.w	r8, #0
 800519a:	9a03      	ldr	r2, [sp, #12]
 800519c:	4417      	add	r7, r2
 800519e:	4659      	mov	r1, fp
 80051a0:	2201      	movs	r2, #1
 80051a2:	4628      	mov	r0, r5
 80051a4:	9308      	str	r3, [sp, #32]
 80051a6:	f000 fc8d 	bl	8005ac4 <__lshift>
 80051aa:	4621      	mov	r1, r4
 80051ac:	4683      	mov	fp, r0
 80051ae:	f000 fcf9 	bl	8005ba4 <__mcmp>
 80051b2:	2800      	cmp	r0, #0
 80051b4:	dcb2      	bgt.n	800511c <_dtoa_r+0xac4>
 80051b6:	d102      	bne.n	80051be <_dtoa_r+0xb66>
 80051b8:	9b08      	ldr	r3, [sp, #32]
 80051ba:	07db      	lsls	r3, r3, #31
 80051bc:	d4ae      	bmi.n	800511c <_dtoa_r+0xac4>
 80051be:	463b      	mov	r3, r7
 80051c0:	461f      	mov	r7, r3
 80051c2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80051c6:	2a30      	cmp	r2, #48	; 0x30
 80051c8:	d0fa      	beq.n	80051c0 <_dtoa_r+0xb68>
 80051ca:	e6f9      	b.n	8004fc0 <_dtoa_r+0x968>
 80051cc:	9a03      	ldr	r2, [sp, #12]
 80051ce:	429a      	cmp	r2, r3
 80051d0:	d1a5      	bne.n	800511e <_dtoa_r+0xac6>
 80051d2:	2331      	movs	r3, #49	; 0x31
 80051d4:	f10a 0a01 	add.w	sl, sl, #1
 80051d8:	e779      	b.n	80050ce <_dtoa_r+0xa76>
 80051da:	4b14      	ldr	r3, [pc, #80]	; (800522c <_dtoa_r+0xbd4>)
 80051dc:	f7ff baa8 	b.w	8004730 <_dtoa_r+0xd8>
 80051e0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	f47f aa81 	bne.w	80046ea <_dtoa_r+0x92>
 80051e8:	4b11      	ldr	r3, [pc, #68]	; (8005230 <_dtoa_r+0xbd8>)
 80051ea:	f7ff baa1 	b.w	8004730 <_dtoa_r+0xd8>
 80051ee:	f1b9 0f00 	cmp.w	r9, #0
 80051f2:	dc03      	bgt.n	80051fc <_dtoa_r+0xba4>
 80051f4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80051f6:	2b02      	cmp	r3, #2
 80051f8:	f73f aecb 	bgt.w	8004f92 <_dtoa_r+0x93a>
 80051fc:	9f03      	ldr	r7, [sp, #12]
 80051fe:	4621      	mov	r1, r4
 8005200:	4658      	mov	r0, fp
 8005202:	f7ff f99b 	bl	800453c <quorem>
 8005206:	9a03      	ldr	r2, [sp, #12]
 8005208:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800520c:	f807 3b01 	strb.w	r3, [r7], #1
 8005210:	1aba      	subs	r2, r7, r2
 8005212:	4591      	cmp	r9, r2
 8005214:	ddba      	ble.n	800518c <_dtoa_r+0xb34>
 8005216:	4659      	mov	r1, fp
 8005218:	2300      	movs	r3, #0
 800521a:	220a      	movs	r2, #10
 800521c:	4628      	mov	r0, r5
 800521e:	f000 faa5 	bl	800576c <__multadd>
 8005222:	4683      	mov	fp, r0
 8005224:	e7eb      	b.n	80051fe <_dtoa_r+0xba6>
 8005226:	bf00      	nop
 8005228:	0800643f 	.word	0x0800643f
 800522c:	0800639c 	.word	0x0800639c
 8005230:	080063c0 	.word	0x080063c0

08005234 <__sflush_r>:
 8005234:	898a      	ldrh	r2, [r1, #12]
 8005236:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005238:	4605      	mov	r5, r0
 800523a:	0710      	lsls	r0, r2, #28
 800523c:	460c      	mov	r4, r1
 800523e:	d457      	bmi.n	80052f0 <__sflush_r+0xbc>
 8005240:	684b      	ldr	r3, [r1, #4]
 8005242:	2b00      	cmp	r3, #0
 8005244:	dc04      	bgt.n	8005250 <__sflush_r+0x1c>
 8005246:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005248:	2b00      	cmp	r3, #0
 800524a:	dc01      	bgt.n	8005250 <__sflush_r+0x1c>
 800524c:	2000      	movs	r0, #0
 800524e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005250:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005252:	2e00      	cmp	r6, #0
 8005254:	d0fa      	beq.n	800524c <__sflush_r+0x18>
 8005256:	2300      	movs	r3, #0
 8005258:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800525c:	682f      	ldr	r7, [r5, #0]
 800525e:	602b      	str	r3, [r5, #0]
 8005260:	d032      	beq.n	80052c8 <__sflush_r+0x94>
 8005262:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005264:	89a3      	ldrh	r3, [r4, #12]
 8005266:	075a      	lsls	r2, r3, #29
 8005268:	d505      	bpl.n	8005276 <__sflush_r+0x42>
 800526a:	6863      	ldr	r3, [r4, #4]
 800526c:	1ac0      	subs	r0, r0, r3
 800526e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005270:	b10b      	cbz	r3, 8005276 <__sflush_r+0x42>
 8005272:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005274:	1ac0      	subs	r0, r0, r3
 8005276:	2300      	movs	r3, #0
 8005278:	4602      	mov	r2, r0
 800527a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800527c:	4628      	mov	r0, r5
 800527e:	6a21      	ldr	r1, [r4, #32]
 8005280:	47b0      	blx	r6
 8005282:	1c43      	adds	r3, r0, #1
 8005284:	89a3      	ldrh	r3, [r4, #12]
 8005286:	d106      	bne.n	8005296 <__sflush_r+0x62>
 8005288:	6829      	ldr	r1, [r5, #0]
 800528a:	291d      	cmp	r1, #29
 800528c:	d82c      	bhi.n	80052e8 <__sflush_r+0xb4>
 800528e:	4a29      	ldr	r2, [pc, #164]	; (8005334 <__sflush_r+0x100>)
 8005290:	40ca      	lsrs	r2, r1
 8005292:	07d6      	lsls	r6, r2, #31
 8005294:	d528      	bpl.n	80052e8 <__sflush_r+0xb4>
 8005296:	2200      	movs	r2, #0
 8005298:	6062      	str	r2, [r4, #4]
 800529a:	6922      	ldr	r2, [r4, #16]
 800529c:	04d9      	lsls	r1, r3, #19
 800529e:	6022      	str	r2, [r4, #0]
 80052a0:	d504      	bpl.n	80052ac <__sflush_r+0x78>
 80052a2:	1c42      	adds	r2, r0, #1
 80052a4:	d101      	bne.n	80052aa <__sflush_r+0x76>
 80052a6:	682b      	ldr	r3, [r5, #0]
 80052a8:	b903      	cbnz	r3, 80052ac <__sflush_r+0x78>
 80052aa:	6560      	str	r0, [r4, #84]	; 0x54
 80052ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80052ae:	602f      	str	r7, [r5, #0]
 80052b0:	2900      	cmp	r1, #0
 80052b2:	d0cb      	beq.n	800524c <__sflush_r+0x18>
 80052b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80052b8:	4299      	cmp	r1, r3
 80052ba:	d002      	beq.n	80052c2 <__sflush_r+0x8e>
 80052bc:	4628      	mov	r0, r5
 80052be:	f7fe fa77 	bl	80037b0 <_free_r>
 80052c2:	2000      	movs	r0, #0
 80052c4:	6360      	str	r0, [r4, #52]	; 0x34
 80052c6:	e7c2      	b.n	800524e <__sflush_r+0x1a>
 80052c8:	6a21      	ldr	r1, [r4, #32]
 80052ca:	2301      	movs	r3, #1
 80052cc:	4628      	mov	r0, r5
 80052ce:	47b0      	blx	r6
 80052d0:	1c41      	adds	r1, r0, #1
 80052d2:	d1c7      	bne.n	8005264 <__sflush_r+0x30>
 80052d4:	682b      	ldr	r3, [r5, #0]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d0c4      	beq.n	8005264 <__sflush_r+0x30>
 80052da:	2b1d      	cmp	r3, #29
 80052dc:	d001      	beq.n	80052e2 <__sflush_r+0xae>
 80052de:	2b16      	cmp	r3, #22
 80052e0:	d101      	bne.n	80052e6 <__sflush_r+0xb2>
 80052e2:	602f      	str	r7, [r5, #0]
 80052e4:	e7b2      	b.n	800524c <__sflush_r+0x18>
 80052e6:	89a3      	ldrh	r3, [r4, #12]
 80052e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80052ec:	81a3      	strh	r3, [r4, #12]
 80052ee:	e7ae      	b.n	800524e <__sflush_r+0x1a>
 80052f0:	690f      	ldr	r7, [r1, #16]
 80052f2:	2f00      	cmp	r7, #0
 80052f4:	d0aa      	beq.n	800524c <__sflush_r+0x18>
 80052f6:	0793      	lsls	r3, r2, #30
 80052f8:	bf18      	it	ne
 80052fa:	2300      	movne	r3, #0
 80052fc:	680e      	ldr	r6, [r1, #0]
 80052fe:	bf08      	it	eq
 8005300:	694b      	ldreq	r3, [r1, #20]
 8005302:	1bf6      	subs	r6, r6, r7
 8005304:	600f      	str	r7, [r1, #0]
 8005306:	608b      	str	r3, [r1, #8]
 8005308:	2e00      	cmp	r6, #0
 800530a:	dd9f      	ble.n	800524c <__sflush_r+0x18>
 800530c:	4633      	mov	r3, r6
 800530e:	463a      	mov	r2, r7
 8005310:	4628      	mov	r0, r5
 8005312:	6a21      	ldr	r1, [r4, #32]
 8005314:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8005318:	47e0      	blx	ip
 800531a:	2800      	cmp	r0, #0
 800531c:	dc06      	bgt.n	800532c <__sflush_r+0xf8>
 800531e:	89a3      	ldrh	r3, [r4, #12]
 8005320:	f04f 30ff 	mov.w	r0, #4294967295
 8005324:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005328:	81a3      	strh	r3, [r4, #12]
 800532a:	e790      	b.n	800524e <__sflush_r+0x1a>
 800532c:	4407      	add	r7, r0
 800532e:	1a36      	subs	r6, r6, r0
 8005330:	e7ea      	b.n	8005308 <__sflush_r+0xd4>
 8005332:	bf00      	nop
 8005334:	20400001 	.word	0x20400001

08005338 <_fflush_r>:
 8005338:	b538      	push	{r3, r4, r5, lr}
 800533a:	690b      	ldr	r3, [r1, #16]
 800533c:	4605      	mov	r5, r0
 800533e:	460c      	mov	r4, r1
 8005340:	b913      	cbnz	r3, 8005348 <_fflush_r+0x10>
 8005342:	2500      	movs	r5, #0
 8005344:	4628      	mov	r0, r5
 8005346:	bd38      	pop	{r3, r4, r5, pc}
 8005348:	b118      	cbz	r0, 8005352 <_fflush_r+0x1a>
 800534a:	6983      	ldr	r3, [r0, #24]
 800534c:	b90b      	cbnz	r3, 8005352 <_fflush_r+0x1a>
 800534e:	f000 f887 	bl	8005460 <__sinit>
 8005352:	4b14      	ldr	r3, [pc, #80]	; (80053a4 <_fflush_r+0x6c>)
 8005354:	429c      	cmp	r4, r3
 8005356:	d11b      	bne.n	8005390 <_fflush_r+0x58>
 8005358:	686c      	ldr	r4, [r5, #4]
 800535a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d0ef      	beq.n	8005342 <_fflush_r+0xa>
 8005362:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005364:	07d0      	lsls	r0, r2, #31
 8005366:	d404      	bmi.n	8005372 <_fflush_r+0x3a>
 8005368:	0599      	lsls	r1, r3, #22
 800536a:	d402      	bmi.n	8005372 <_fflush_r+0x3a>
 800536c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800536e:	f000 f91a 	bl	80055a6 <__retarget_lock_acquire_recursive>
 8005372:	4628      	mov	r0, r5
 8005374:	4621      	mov	r1, r4
 8005376:	f7ff ff5d 	bl	8005234 <__sflush_r>
 800537a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800537c:	4605      	mov	r5, r0
 800537e:	07da      	lsls	r2, r3, #31
 8005380:	d4e0      	bmi.n	8005344 <_fflush_r+0xc>
 8005382:	89a3      	ldrh	r3, [r4, #12]
 8005384:	059b      	lsls	r3, r3, #22
 8005386:	d4dd      	bmi.n	8005344 <_fflush_r+0xc>
 8005388:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800538a:	f000 f90d 	bl	80055a8 <__retarget_lock_release_recursive>
 800538e:	e7d9      	b.n	8005344 <_fflush_r+0xc>
 8005390:	4b05      	ldr	r3, [pc, #20]	; (80053a8 <_fflush_r+0x70>)
 8005392:	429c      	cmp	r4, r3
 8005394:	d101      	bne.n	800539a <_fflush_r+0x62>
 8005396:	68ac      	ldr	r4, [r5, #8]
 8005398:	e7df      	b.n	800535a <_fflush_r+0x22>
 800539a:	4b04      	ldr	r3, [pc, #16]	; (80053ac <_fflush_r+0x74>)
 800539c:	429c      	cmp	r4, r3
 800539e:	bf08      	it	eq
 80053a0:	68ec      	ldreq	r4, [r5, #12]
 80053a2:	e7da      	b.n	800535a <_fflush_r+0x22>
 80053a4:	08006470 	.word	0x08006470
 80053a8:	08006490 	.word	0x08006490
 80053ac:	08006450 	.word	0x08006450

080053b0 <std>:
 80053b0:	2300      	movs	r3, #0
 80053b2:	b510      	push	{r4, lr}
 80053b4:	4604      	mov	r4, r0
 80053b6:	e9c0 3300 	strd	r3, r3, [r0]
 80053ba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80053be:	6083      	str	r3, [r0, #8]
 80053c0:	8181      	strh	r1, [r0, #12]
 80053c2:	6643      	str	r3, [r0, #100]	; 0x64
 80053c4:	81c2      	strh	r2, [r0, #14]
 80053c6:	6183      	str	r3, [r0, #24]
 80053c8:	4619      	mov	r1, r3
 80053ca:	2208      	movs	r2, #8
 80053cc:	305c      	adds	r0, #92	; 0x5c
 80053ce:	f7fe f9e7 	bl	80037a0 <memset>
 80053d2:	4b05      	ldr	r3, [pc, #20]	; (80053e8 <std+0x38>)
 80053d4:	6224      	str	r4, [r4, #32]
 80053d6:	6263      	str	r3, [r4, #36]	; 0x24
 80053d8:	4b04      	ldr	r3, [pc, #16]	; (80053ec <std+0x3c>)
 80053da:	62a3      	str	r3, [r4, #40]	; 0x28
 80053dc:	4b04      	ldr	r3, [pc, #16]	; (80053f0 <std+0x40>)
 80053de:	62e3      	str	r3, [r4, #44]	; 0x2c
 80053e0:	4b04      	ldr	r3, [pc, #16]	; (80053f4 <std+0x44>)
 80053e2:	6323      	str	r3, [r4, #48]	; 0x30
 80053e4:	bd10      	pop	{r4, pc}
 80053e6:	bf00      	nop
 80053e8:	08005dd5 	.word	0x08005dd5
 80053ec:	08005df7 	.word	0x08005df7
 80053f0:	08005e2f 	.word	0x08005e2f
 80053f4:	08005e53 	.word	0x08005e53

080053f8 <_cleanup_r>:
 80053f8:	4901      	ldr	r1, [pc, #4]	; (8005400 <_cleanup_r+0x8>)
 80053fa:	f000 b8af 	b.w	800555c <_fwalk_reent>
 80053fe:	bf00      	nop
 8005400:	08005339 	.word	0x08005339

08005404 <__sfmoreglue>:
 8005404:	2268      	movs	r2, #104	; 0x68
 8005406:	b570      	push	{r4, r5, r6, lr}
 8005408:	1e4d      	subs	r5, r1, #1
 800540a:	4355      	muls	r5, r2
 800540c:	460e      	mov	r6, r1
 800540e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005412:	f7fe fa35 	bl	8003880 <_malloc_r>
 8005416:	4604      	mov	r4, r0
 8005418:	b140      	cbz	r0, 800542c <__sfmoreglue+0x28>
 800541a:	2100      	movs	r1, #0
 800541c:	e9c0 1600 	strd	r1, r6, [r0]
 8005420:	300c      	adds	r0, #12
 8005422:	60a0      	str	r0, [r4, #8]
 8005424:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005428:	f7fe f9ba 	bl	80037a0 <memset>
 800542c:	4620      	mov	r0, r4
 800542e:	bd70      	pop	{r4, r5, r6, pc}

08005430 <__sfp_lock_acquire>:
 8005430:	4801      	ldr	r0, [pc, #4]	; (8005438 <__sfp_lock_acquire+0x8>)
 8005432:	f000 b8b8 	b.w	80055a6 <__retarget_lock_acquire_recursive>
 8005436:	bf00      	nop
 8005438:	20000665 	.word	0x20000665

0800543c <__sfp_lock_release>:
 800543c:	4801      	ldr	r0, [pc, #4]	; (8005444 <__sfp_lock_release+0x8>)
 800543e:	f000 b8b3 	b.w	80055a8 <__retarget_lock_release_recursive>
 8005442:	bf00      	nop
 8005444:	20000665 	.word	0x20000665

08005448 <__sinit_lock_acquire>:
 8005448:	4801      	ldr	r0, [pc, #4]	; (8005450 <__sinit_lock_acquire+0x8>)
 800544a:	f000 b8ac 	b.w	80055a6 <__retarget_lock_acquire_recursive>
 800544e:	bf00      	nop
 8005450:	20000666 	.word	0x20000666

08005454 <__sinit_lock_release>:
 8005454:	4801      	ldr	r0, [pc, #4]	; (800545c <__sinit_lock_release+0x8>)
 8005456:	f000 b8a7 	b.w	80055a8 <__retarget_lock_release_recursive>
 800545a:	bf00      	nop
 800545c:	20000666 	.word	0x20000666

08005460 <__sinit>:
 8005460:	b510      	push	{r4, lr}
 8005462:	4604      	mov	r4, r0
 8005464:	f7ff fff0 	bl	8005448 <__sinit_lock_acquire>
 8005468:	69a3      	ldr	r3, [r4, #24]
 800546a:	b11b      	cbz	r3, 8005474 <__sinit+0x14>
 800546c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005470:	f7ff bff0 	b.w	8005454 <__sinit_lock_release>
 8005474:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005478:	6523      	str	r3, [r4, #80]	; 0x50
 800547a:	4b13      	ldr	r3, [pc, #76]	; (80054c8 <__sinit+0x68>)
 800547c:	4a13      	ldr	r2, [pc, #76]	; (80054cc <__sinit+0x6c>)
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	62a2      	str	r2, [r4, #40]	; 0x28
 8005482:	42a3      	cmp	r3, r4
 8005484:	bf08      	it	eq
 8005486:	2301      	moveq	r3, #1
 8005488:	4620      	mov	r0, r4
 800548a:	bf08      	it	eq
 800548c:	61a3      	streq	r3, [r4, #24]
 800548e:	f000 f81f 	bl	80054d0 <__sfp>
 8005492:	6060      	str	r0, [r4, #4]
 8005494:	4620      	mov	r0, r4
 8005496:	f000 f81b 	bl	80054d0 <__sfp>
 800549a:	60a0      	str	r0, [r4, #8]
 800549c:	4620      	mov	r0, r4
 800549e:	f000 f817 	bl	80054d0 <__sfp>
 80054a2:	2200      	movs	r2, #0
 80054a4:	2104      	movs	r1, #4
 80054a6:	60e0      	str	r0, [r4, #12]
 80054a8:	6860      	ldr	r0, [r4, #4]
 80054aa:	f7ff ff81 	bl	80053b0 <std>
 80054ae:	2201      	movs	r2, #1
 80054b0:	2109      	movs	r1, #9
 80054b2:	68a0      	ldr	r0, [r4, #8]
 80054b4:	f7ff ff7c 	bl	80053b0 <std>
 80054b8:	2202      	movs	r2, #2
 80054ba:	2112      	movs	r1, #18
 80054bc:	68e0      	ldr	r0, [r4, #12]
 80054be:	f7ff ff77 	bl	80053b0 <std>
 80054c2:	2301      	movs	r3, #1
 80054c4:	61a3      	str	r3, [r4, #24]
 80054c6:	e7d1      	b.n	800546c <__sinit+0xc>
 80054c8:	08006388 	.word	0x08006388
 80054cc:	080053f9 	.word	0x080053f9

080054d0 <__sfp>:
 80054d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054d2:	4607      	mov	r7, r0
 80054d4:	f7ff ffac 	bl	8005430 <__sfp_lock_acquire>
 80054d8:	4b1e      	ldr	r3, [pc, #120]	; (8005554 <__sfp+0x84>)
 80054da:	681e      	ldr	r6, [r3, #0]
 80054dc:	69b3      	ldr	r3, [r6, #24]
 80054de:	b913      	cbnz	r3, 80054e6 <__sfp+0x16>
 80054e0:	4630      	mov	r0, r6
 80054e2:	f7ff ffbd 	bl	8005460 <__sinit>
 80054e6:	3648      	adds	r6, #72	; 0x48
 80054e8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80054ec:	3b01      	subs	r3, #1
 80054ee:	d503      	bpl.n	80054f8 <__sfp+0x28>
 80054f0:	6833      	ldr	r3, [r6, #0]
 80054f2:	b30b      	cbz	r3, 8005538 <__sfp+0x68>
 80054f4:	6836      	ldr	r6, [r6, #0]
 80054f6:	e7f7      	b.n	80054e8 <__sfp+0x18>
 80054f8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80054fc:	b9d5      	cbnz	r5, 8005534 <__sfp+0x64>
 80054fe:	4b16      	ldr	r3, [pc, #88]	; (8005558 <__sfp+0x88>)
 8005500:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005504:	60e3      	str	r3, [r4, #12]
 8005506:	6665      	str	r5, [r4, #100]	; 0x64
 8005508:	f000 f84c 	bl	80055a4 <__retarget_lock_init_recursive>
 800550c:	f7ff ff96 	bl	800543c <__sfp_lock_release>
 8005510:	2208      	movs	r2, #8
 8005512:	4629      	mov	r1, r5
 8005514:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005518:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800551c:	6025      	str	r5, [r4, #0]
 800551e:	61a5      	str	r5, [r4, #24]
 8005520:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005524:	f7fe f93c 	bl	80037a0 <memset>
 8005528:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800552c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005530:	4620      	mov	r0, r4
 8005532:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005534:	3468      	adds	r4, #104	; 0x68
 8005536:	e7d9      	b.n	80054ec <__sfp+0x1c>
 8005538:	2104      	movs	r1, #4
 800553a:	4638      	mov	r0, r7
 800553c:	f7ff ff62 	bl	8005404 <__sfmoreglue>
 8005540:	4604      	mov	r4, r0
 8005542:	6030      	str	r0, [r6, #0]
 8005544:	2800      	cmp	r0, #0
 8005546:	d1d5      	bne.n	80054f4 <__sfp+0x24>
 8005548:	f7ff ff78 	bl	800543c <__sfp_lock_release>
 800554c:	230c      	movs	r3, #12
 800554e:	603b      	str	r3, [r7, #0]
 8005550:	e7ee      	b.n	8005530 <__sfp+0x60>
 8005552:	bf00      	nop
 8005554:	08006388 	.word	0x08006388
 8005558:	ffff0001 	.word	0xffff0001

0800555c <_fwalk_reent>:
 800555c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005560:	4606      	mov	r6, r0
 8005562:	4688      	mov	r8, r1
 8005564:	2700      	movs	r7, #0
 8005566:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800556a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800556e:	f1b9 0901 	subs.w	r9, r9, #1
 8005572:	d505      	bpl.n	8005580 <_fwalk_reent+0x24>
 8005574:	6824      	ldr	r4, [r4, #0]
 8005576:	2c00      	cmp	r4, #0
 8005578:	d1f7      	bne.n	800556a <_fwalk_reent+0xe>
 800557a:	4638      	mov	r0, r7
 800557c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005580:	89ab      	ldrh	r3, [r5, #12]
 8005582:	2b01      	cmp	r3, #1
 8005584:	d907      	bls.n	8005596 <_fwalk_reent+0x3a>
 8005586:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800558a:	3301      	adds	r3, #1
 800558c:	d003      	beq.n	8005596 <_fwalk_reent+0x3a>
 800558e:	4629      	mov	r1, r5
 8005590:	4630      	mov	r0, r6
 8005592:	47c0      	blx	r8
 8005594:	4307      	orrs	r7, r0
 8005596:	3568      	adds	r5, #104	; 0x68
 8005598:	e7e9      	b.n	800556e <_fwalk_reent+0x12>
	...

0800559c <_localeconv_r>:
 800559c:	4800      	ldr	r0, [pc, #0]	; (80055a0 <_localeconv_r+0x4>)
 800559e:	4770      	bx	lr
 80055a0:	200003cc 	.word	0x200003cc

080055a4 <__retarget_lock_init_recursive>:
 80055a4:	4770      	bx	lr

080055a6 <__retarget_lock_acquire_recursive>:
 80055a6:	4770      	bx	lr

080055a8 <__retarget_lock_release_recursive>:
 80055a8:	4770      	bx	lr

080055aa <__swhatbuf_r>:
 80055aa:	b570      	push	{r4, r5, r6, lr}
 80055ac:	460e      	mov	r6, r1
 80055ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80055b2:	4614      	mov	r4, r2
 80055b4:	2900      	cmp	r1, #0
 80055b6:	461d      	mov	r5, r3
 80055b8:	b096      	sub	sp, #88	; 0x58
 80055ba:	da08      	bge.n	80055ce <__swhatbuf_r+0x24>
 80055bc:	2200      	movs	r2, #0
 80055be:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80055c2:	602a      	str	r2, [r5, #0]
 80055c4:	061a      	lsls	r2, r3, #24
 80055c6:	d410      	bmi.n	80055ea <__swhatbuf_r+0x40>
 80055c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80055cc:	e00e      	b.n	80055ec <__swhatbuf_r+0x42>
 80055ce:	466a      	mov	r2, sp
 80055d0:	f000 fc96 	bl	8005f00 <_fstat_r>
 80055d4:	2800      	cmp	r0, #0
 80055d6:	dbf1      	blt.n	80055bc <__swhatbuf_r+0x12>
 80055d8:	9a01      	ldr	r2, [sp, #4]
 80055da:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80055de:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80055e2:	425a      	negs	r2, r3
 80055e4:	415a      	adcs	r2, r3
 80055e6:	602a      	str	r2, [r5, #0]
 80055e8:	e7ee      	b.n	80055c8 <__swhatbuf_r+0x1e>
 80055ea:	2340      	movs	r3, #64	; 0x40
 80055ec:	2000      	movs	r0, #0
 80055ee:	6023      	str	r3, [r4, #0]
 80055f0:	b016      	add	sp, #88	; 0x58
 80055f2:	bd70      	pop	{r4, r5, r6, pc}

080055f4 <__smakebuf_r>:
 80055f4:	898b      	ldrh	r3, [r1, #12]
 80055f6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80055f8:	079d      	lsls	r5, r3, #30
 80055fa:	4606      	mov	r6, r0
 80055fc:	460c      	mov	r4, r1
 80055fe:	d507      	bpl.n	8005610 <__smakebuf_r+0x1c>
 8005600:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005604:	6023      	str	r3, [r4, #0]
 8005606:	6123      	str	r3, [r4, #16]
 8005608:	2301      	movs	r3, #1
 800560a:	6163      	str	r3, [r4, #20]
 800560c:	b002      	add	sp, #8
 800560e:	bd70      	pop	{r4, r5, r6, pc}
 8005610:	466a      	mov	r2, sp
 8005612:	ab01      	add	r3, sp, #4
 8005614:	f7ff ffc9 	bl	80055aa <__swhatbuf_r>
 8005618:	9900      	ldr	r1, [sp, #0]
 800561a:	4605      	mov	r5, r0
 800561c:	4630      	mov	r0, r6
 800561e:	f7fe f92f 	bl	8003880 <_malloc_r>
 8005622:	b948      	cbnz	r0, 8005638 <__smakebuf_r+0x44>
 8005624:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005628:	059a      	lsls	r2, r3, #22
 800562a:	d4ef      	bmi.n	800560c <__smakebuf_r+0x18>
 800562c:	f023 0303 	bic.w	r3, r3, #3
 8005630:	f043 0302 	orr.w	r3, r3, #2
 8005634:	81a3      	strh	r3, [r4, #12]
 8005636:	e7e3      	b.n	8005600 <__smakebuf_r+0xc>
 8005638:	4b0d      	ldr	r3, [pc, #52]	; (8005670 <__smakebuf_r+0x7c>)
 800563a:	62b3      	str	r3, [r6, #40]	; 0x28
 800563c:	89a3      	ldrh	r3, [r4, #12]
 800563e:	6020      	str	r0, [r4, #0]
 8005640:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005644:	81a3      	strh	r3, [r4, #12]
 8005646:	9b00      	ldr	r3, [sp, #0]
 8005648:	6120      	str	r0, [r4, #16]
 800564a:	6163      	str	r3, [r4, #20]
 800564c:	9b01      	ldr	r3, [sp, #4]
 800564e:	b15b      	cbz	r3, 8005668 <__smakebuf_r+0x74>
 8005650:	4630      	mov	r0, r6
 8005652:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005656:	f000 fc65 	bl	8005f24 <_isatty_r>
 800565a:	b128      	cbz	r0, 8005668 <__smakebuf_r+0x74>
 800565c:	89a3      	ldrh	r3, [r4, #12]
 800565e:	f023 0303 	bic.w	r3, r3, #3
 8005662:	f043 0301 	orr.w	r3, r3, #1
 8005666:	81a3      	strh	r3, [r4, #12]
 8005668:	89a0      	ldrh	r0, [r4, #12]
 800566a:	4305      	orrs	r5, r0
 800566c:	81a5      	strh	r5, [r4, #12]
 800566e:	e7cd      	b.n	800560c <__smakebuf_r+0x18>
 8005670:	080053f9 	.word	0x080053f9

08005674 <memchr>:
 8005674:	4603      	mov	r3, r0
 8005676:	b510      	push	{r4, lr}
 8005678:	b2c9      	uxtb	r1, r1
 800567a:	4402      	add	r2, r0
 800567c:	4293      	cmp	r3, r2
 800567e:	4618      	mov	r0, r3
 8005680:	d101      	bne.n	8005686 <memchr+0x12>
 8005682:	2000      	movs	r0, #0
 8005684:	e003      	b.n	800568e <memchr+0x1a>
 8005686:	7804      	ldrb	r4, [r0, #0]
 8005688:	3301      	adds	r3, #1
 800568a:	428c      	cmp	r4, r1
 800568c:	d1f6      	bne.n	800567c <memchr+0x8>
 800568e:	bd10      	pop	{r4, pc}

08005690 <__malloc_lock>:
 8005690:	4801      	ldr	r0, [pc, #4]	; (8005698 <__malloc_lock+0x8>)
 8005692:	f7ff bf88 	b.w	80055a6 <__retarget_lock_acquire_recursive>
 8005696:	bf00      	nop
 8005698:	20000664 	.word	0x20000664

0800569c <__malloc_unlock>:
 800569c:	4801      	ldr	r0, [pc, #4]	; (80056a4 <__malloc_unlock+0x8>)
 800569e:	f7ff bf83 	b.w	80055a8 <__retarget_lock_release_recursive>
 80056a2:	bf00      	nop
 80056a4:	20000664 	.word	0x20000664

080056a8 <_Balloc>:
 80056a8:	b570      	push	{r4, r5, r6, lr}
 80056aa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80056ac:	4604      	mov	r4, r0
 80056ae:	460d      	mov	r5, r1
 80056b0:	b976      	cbnz	r6, 80056d0 <_Balloc+0x28>
 80056b2:	2010      	movs	r0, #16
 80056b4:	f7fe f856 	bl	8003764 <malloc>
 80056b8:	4602      	mov	r2, r0
 80056ba:	6260      	str	r0, [r4, #36]	; 0x24
 80056bc:	b920      	cbnz	r0, 80056c8 <_Balloc+0x20>
 80056be:	2166      	movs	r1, #102	; 0x66
 80056c0:	4b17      	ldr	r3, [pc, #92]	; (8005720 <_Balloc+0x78>)
 80056c2:	4818      	ldr	r0, [pc, #96]	; (8005724 <_Balloc+0x7c>)
 80056c4:	f000 fbdc 	bl	8005e80 <__assert_func>
 80056c8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80056cc:	6006      	str	r6, [r0, #0]
 80056ce:	60c6      	str	r6, [r0, #12]
 80056d0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80056d2:	68f3      	ldr	r3, [r6, #12]
 80056d4:	b183      	cbz	r3, 80056f8 <_Balloc+0x50>
 80056d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80056d8:	68db      	ldr	r3, [r3, #12]
 80056da:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80056de:	b9b8      	cbnz	r0, 8005710 <_Balloc+0x68>
 80056e0:	2101      	movs	r1, #1
 80056e2:	fa01 f605 	lsl.w	r6, r1, r5
 80056e6:	1d72      	adds	r2, r6, #5
 80056e8:	4620      	mov	r0, r4
 80056ea:	0092      	lsls	r2, r2, #2
 80056ec:	f000 fb5e 	bl	8005dac <_calloc_r>
 80056f0:	b160      	cbz	r0, 800570c <_Balloc+0x64>
 80056f2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80056f6:	e00e      	b.n	8005716 <_Balloc+0x6e>
 80056f8:	2221      	movs	r2, #33	; 0x21
 80056fa:	2104      	movs	r1, #4
 80056fc:	4620      	mov	r0, r4
 80056fe:	f000 fb55 	bl	8005dac <_calloc_r>
 8005702:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005704:	60f0      	str	r0, [r6, #12]
 8005706:	68db      	ldr	r3, [r3, #12]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d1e4      	bne.n	80056d6 <_Balloc+0x2e>
 800570c:	2000      	movs	r0, #0
 800570e:	bd70      	pop	{r4, r5, r6, pc}
 8005710:	6802      	ldr	r2, [r0, #0]
 8005712:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005716:	2300      	movs	r3, #0
 8005718:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800571c:	e7f7      	b.n	800570e <_Balloc+0x66>
 800571e:	bf00      	nop
 8005720:	080063cd 	.word	0x080063cd
 8005724:	080064b0 	.word	0x080064b0

08005728 <_Bfree>:
 8005728:	b570      	push	{r4, r5, r6, lr}
 800572a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800572c:	4605      	mov	r5, r0
 800572e:	460c      	mov	r4, r1
 8005730:	b976      	cbnz	r6, 8005750 <_Bfree+0x28>
 8005732:	2010      	movs	r0, #16
 8005734:	f7fe f816 	bl	8003764 <malloc>
 8005738:	4602      	mov	r2, r0
 800573a:	6268      	str	r0, [r5, #36]	; 0x24
 800573c:	b920      	cbnz	r0, 8005748 <_Bfree+0x20>
 800573e:	218a      	movs	r1, #138	; 0x8a
 8005740:	4b08      	ldr	r3, [pc, #32]	; (8005764 <_Bfree+0x3c>)
 8005742:	4809      	ldr	r0, [pc, #36]	; (8005768 <_Bfree+0x40>)
 8005744:	f000 fb9c 	bl	8005e80 <__assert_func>
 8005748:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800574c:	6006      	str	r6, [r0, #0]
 800574e:	60c6      	str	r6, [r0, #12]
 8005750:	b13c      	cbz	r4, 8005762 <_Bfree+0x3a>
 8005752:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005754:	6862      	ldr	r2, [r4, #4]
 8005756:	68db      	ldr	r3, [r3, #12]
 8005758:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800575c:	6021      	str	r1, [r4, #0]
 800575e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005762:	bd70      	pop	{r4, r5, r6, pc}
 8005764:	080063cd 	.word	0x080063cd
 8005768:	080064b0 	.word	0x080064b0

0800576c <__multadd>:
 800576c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005770:	4607      	mov	r7, r0
 8005772:	460c      	mov	r4, r1
 8005774:	461e      	mov	r6, r3
 8005776:	2000      	movs	r0, #0
 8005778:	690d      	ldr	r5, [r1, #16]
 800577a:	f101 0c14 	add.w	ip, r1, #20
 800577e:	f8dc 3000 	ldr.w	r3, [ip]
 8005782:	3001      	adds	r0, #1
 8005784:	b299      	uxth	r1, r3
 8005786:	fb02 6101 	mla	r1, r2, r1, r6
 800578a:	0c1e      	lsrs	r6, r3, #16
 800578c:	0c0b      	lsrs	r3, r1, #16
 800578e:	fb02 3306 	mla	r3, r2, r6, r3
 8005792:	b289      	uxth	r1, r1
 8005794:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005798:	4285      	cmp	r5, r0
 800579a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800579e:	f84c 1b04 	str.w	r1, [ip], #4
 80057a2:	dcec      	bgt.n	800577e <__multadd+0x12>
 80057a4:	b30e      	cbz	r6, 80057ea <__multadd+0x7e>
 80057a6:	68a3      	ldr	r3, [r4, #8]
 80057a8:	42ab      	cmp	r3, r5
 80057aa:	dc19      	bgt.n	80057e0 <__multadd+0x74>
 80057ac:	6861      	ldr	r1, [r4, #4]
 80057ae:	4638      	mov	r0, r7
 80057b0:	3101      	adds	r1, #1
 80057b2:	f7ff ff79 	bl	80056a8 <_Balloc>
 80057b6:	4680      	mov	r8, r0
 80057b8:	b928      	cbnz	r0, 80057c6 <__multadd+0x5a>
 80057ba:	4602      	mov	r2, r0
 80057bc:	21b5      	movs	r1, #181	; 0xb5
 80057be:	4b0c      	ldr	r3, [pc, #48]	; (80057f0 <__multadd+0x84>)
 80057c0:	480c      	ldr	r0, [pc, #48]	; (80057f4 <__multadd+0x88>)
 80057c2:	f000 fb5d 	bl	8005e80 <__assert_func>
 80057c6:	6922      	ldr	r2, [r4, #16]
 80057c8:	f104 010c 	add.w	r1, r4, #12
 80057cc:	3202      	adds	r2, #2
 80057ce:	0092      	lsls	r2, r2, #2
 80057d0:	300c      	adds	r0, #12
 80057d2:	f7fd ffd7 	bl	8003784 <memcpy>
 80057d6:	4621      	mov	r1, r4
 80057d8:	4638      	mov	r0, r7
 80057da:	f7ff ffa5 	bl	8005728 <_Bfree>
 80057de:	4644      	mov	r4, r8
 80057e0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80057e4:	3501      	adds	r5, #1
 80057e6:	615e      	str	r6, [r3, #20]
 80057e8:	6125      	str	r5, [r4, #16]
 80057ea:	4620      	mov	r0, r4
 80057ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80057f0:	0800643f 	.word	0x0800643f
 80057f4:	080064b0 	.word	0x080064b0

080057f8 <__hi0bits>:
 80057f8:	0c02      	lsrs	r2, r0, #16
 80057fa:	0412      	lsls	r2, r2, #16
 80057fc:	4603      	mov	r3, r0
 80057fe:	b9ca      	cbnz	r2, 8005834 <__hi0bits+0x3c>
 8005800:	0403      	lsls	r3, r0, #16
 8005802:	2010      	movs	r0, #16
 8005804:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8005808:	bf04      	itt	eq
 800580a:	021b      	lsleq	r3, r3, #8
 800580c:	3008      	addeq	r0, #8
 800580e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8005812:	bf04      	itt	eq
 8005814:	011b      	lsleq	r3, r3, #4
 8005816:	3004      	addeq	r0, #4
 8005818:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800581c:	bf04      	itt	eq
 800581e:	009b      	lsleq	r3, r3, #2
 8005820:	3002      	addeq	r0, #2
 8005822:	2b00      	cmp	r3, #0
 8005824:	db05      	blt.n	8005832 <__hi0bits+0x3a>
 8005826:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800582a:	f100 0001 	add.w	r0, r0, #1
 800582e:	bf08      	it	eq
 8005830:	2020      	moveq	r0, #32
 8005832:	4770      	bx	lr
 8005834:	2000      	movs	r0, #0
 8005836:	e7e5      	b.n	8005804 <__hi0bits+0xc>

08005838 <__lo0bits>:
 8005838:	6803      	ldr	r3, [r0, #0]
 800583a:	4602      	mov	r2, r0
 800583c:	f013 0007 	ands.w	r0, r3, #7
 8005840:	d00b      	beq.n	800585a <__lo0bits+0x22>
 8005842:	07d9      	lsls	r1, r3, #31
 8005844:	d421      	bmi.n	800588a <__lo0bits+0x52>
 8005846:	0798      	lsls	r0, r3, #30
 8005848:	bf49      	itett	mi
 800584a:	085b      	lsrmi	r3, r3, #1
 800584c:	089b      	lsrpl	r3, r3, #2
 800584e:	2001      	movmi	r0, #1
 8005850:	6013      	strmi	r3, [r2, #0]
 8005852:	bf5c      	itt	pl
 8005854:	2002      	movpl	r0, #2
 8005856:	6013      	strpl	r3, [r2, #0]
 8005858:	4770      	bx	lr
 800585a:	b299      	uxth	r1, r3
 800585c:	b909      	cbnz	r1, 8005862 <__lo0bits+0x2a>
 800585e:	2010      	movs	r0, #16
 8005860:	0c1b      	lsrs	r3, r3, #16
 8005862:	b2d9      	uxtb	r1, r3
 8005864:	b909      	cbnz	r1, 800586a <__lo0bits+0x32>
 8005866:	3008      	adds	r0, #8
 8005868:	0a1b      	lsrs	r3, r3, #8
 800586a:	0719      	lsls	r1, r3, #28
 800586c:	bf04      	itt	eq
 800586e:	091b      	lsreq	r3, r3, #4
 8005870:	3004      	addeq	r0, #4
 8005872:	0799      	lsls	r1, r3, #30
 8005874:	bf04      	itt	eq
 8005876:	089b      	lsreq	r3, r3, #2
 8005878:	3002      	addeq	r0, #2
 800587a:	07d9      	lsls	r1, r3, #31
 800587c:	d403      	bmi.n	8005886 <__lo0bits+0x4e>
 800587e:	085b      	lsrs	r3, r3, #1
 8005880:	f100 0001 	add.w	r0, r0, #1
 8005884:	d003      	beq.n	800588e <__lo0bits+0x56>
 8005886:	6013      	str	r3, [r2, #0]
 8005888:	4770      	bx	lr
 800588a:	2000      	movs	r0, #0
 800588c:	4770      	bx	lr
 800588e:	2020      	movs	r0, #32
 8005890:	4770      	bx	lr
	...

08005894 <__i2b>:
 8005894:	b510      	push	{r4, lr}
 8005896:	460c      	mov	r4, r1
 8005898:	2101      	movs	r1, #1
 800589a:	f7ff ff05 	bl	80056a8 <_Balloc>
 800589e:	4602      	mov	r2, r0
 80058a0:	b928      	cbnz	r0, 80058ae <__i2b+0x1a>
 80058a2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80058a6:	4b04      	ldr	r3, [pc, #16]	; (80058b8 <__i2b+0x24>)
 80058a8:	4804      	ldr	r0, [pc, #16]	; (80058bc <__i2b+0x28>)
 80058aa:	f000 fae9 	bl	8005e80 <__assert_func>
 80058ae:	2301      	movs	r3, #1
 80058b0:	6144      	str	r4, [r0, #20]
 80058b2:	6103      	str	r3, [r0, #16]
 80058b4:	bd10      	pop	{r4, pc}
 80058b6:	bf00      	nop
 80058b8:	0800643f 	.word	0x0800643f
 80058bc:	080064b0 	.word	0x080064b0

080058c0 <__multiply>:
 80058c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058c4:	4691      	mov	r9, r2
 80058c6:	690a      	ldr	r2, [r1, #16]
 80058c8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80058cc:	460c      	mov	r4, r1
 80058ce:	429a      	cmp	r2, r3
 80058d0:	bfbe      	ittt	lt
 80058d2:	460b      	movlt	r3, r1
 80058d4:	464c      	movlt	r4, r9
 80058d6:	4699      	movlt	r9, r3
 80058d8:	6927      	ldr	r7, [r4, #16]
 80058da:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80058de:	68a3      	ldr	r3, [r4, #8]
 80058e0:	6861      	ldr	r1, [r4, #4]
 80058e2:	eb07 060a 	add.w	r6, r7, sl
 80058e6:	42b3      	cmp	r3, r6
 80058e8:	b085      	sub	sp, #20
 80058ea:	bfb8      	it	lt
 80058ec:	3101      	addlt	r1, #1
 80058ee:	f7ff fedb 	bl	80056a8 <_Balloc>
 80058f2:	b930      	cbnz	r0, 8005902 <__multiply+0x42>
 80058f4:	4602      	mov	r2, r0
 80058f6:	f240 115d 	movw	r1, #349	; 0x15d
 80058fa:	4b43      	ldr	r3, [pc, #268]	; (8005a08 <__multiply+0x148>)
 80058fc:	4843      	ldr	r0, [pc, #268]	; (8005a0c <__multiply+0x14c>)
 80058fe:	f000 fabf 	bl	8005e80 <__assert_func>
 8005902:	f100 0514 	add.w	r5, r0, #20
 8005906:	462b      	mov	r3, r5
 8005908:	2200      	movs	r2, #0
 800590a:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800590e:	4543      	cmp	r3, r8
 8005910:	d321      	bcc.n	8005956 <__multiply+0x96>
 8005912:	f104 0314 	add.w	r3, r4, #20
 8005916:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800591a:	f109 0314 	add.w	r3, r9, #20
 800591e:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8005922:	9202      	str	r2, [sp, #8]
 8005924:	1b3a      	subs	r2, r7, r4
 8005926:	3a15      	subs	r2, #21
 8005928:	f022 0203 	bic.w	r2, r2, #3
 800592c:	3204      	adds	r2, #4
 800592e:	f104 0115 	add.w	r1, r4, #21
 8005932:	428f      	cmp	r7, r1
 8005934:	bf38      	it	cc
 8005936:	2204      	movcc	r2, #4
 8005938:	9201      	str	r2, [sp, #4]
 800593a:	9a02      	ldr	r2, [sp, #8]
 800593c:	9303      	str	r3, [sp, #12]
 800593e:	429a      	cmp	r2, r3
 8005940:	d80c      	bhi.n	800595c <__multiply+0x9c>
 8005942:	2e00      	cmp	r6, #0
 8005944:	dd03      	ble.n	800594e <__multiply+0x8e>
 8005946:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800594a:	2b00      	cmp	r3, #0
 800594c:	d059      	beq.n	8005a02 <__multiply+0x142>
 800594e:	6106      	str	r6, [r0, #16]
 8005950:	b005      	add	sp, #20
 8005952:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005956:	f843 2b04 	str.w	r2, [r3], #4
 800595a:	e7d8      	b.n	800590e <__multiply+0x4e>
 800595c:	f8b3 a000 	ldrh.w	sl, [r3]
 8005960:	f1ba 0f00 	cmp.w	sl, #0
 8005964:	d023      	beq.n	80059ae <__multiply+0xee>
 8005966:	46a9      	mov	r9, r5
 8005968:	f04f 0c00 	mov.w	ip, #0
 800596c:	f104 0e14 	add.w	lr, r4, #20
 8005970:	f85e 2b04 	ldr.w	r2, [lr], #4
 8005974:	f8d9 1000 	ldr.w	r1, [r9]
 8005978:	fa1f fb82 	uxth.w	fp, r2
 800597c:	b289      	uxth	r1, r1
 800597e:	fb0a 110b 	mla	r1, sl, fp, r1
 8005982:	4461      	add	r1, ip
 8005984:	f8d9 c000 	ldr.w	ip, [r9]
 8005988:	0c12      	lsrs	r2, r2, #16
 800598a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800598e:	fb0a c202 	mla	r2, sl, r2, ip
 8005992:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8005996:	b289      	uxth	r1, r1
 8005998:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800599c:	4577      	cmp	r7, lr
 800599e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80059a2:	f849 1b04 	str.w	r1, [r9], #4
 80059a6:	d8e3      	bhi.n	8005970 <__multiply+0xb0>
 80059a8:	9a01      	ldr	r2, [sp, #4]
 80059aa:	f845 c002 	str.w	ip, [r5, r2]
 80059ae:	9a03      	ldr	r2, [sp, #12]
 80059b0:	3304      	adds	r3, #4
 80059b2:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80059b6:	f1b9 0f00 	cmp.w	r9, #0
 80059ba:	d020      	beq.n	80059fe <__multiply+0x13e>
 80059bc:	46ae      	mov	lr, r5
 80059be:	f04f 0a00 	mov.w	sl, #0
 80059c2:	6829      	ldr	r1, [r5, #0]
 80059c4:	f104 0c14 	add.w	ip, r4, #20
 80059c8:	f8bc b000 	ldrh.w	fp, [ip]
 80059cc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80059d0:	b289      	uxth	r1, r1
 80059d2:	fb09 220b 	mla	r2, r9, fp, r2
 80059d6:	4492      	add	sl, r2
 80059d8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80059dc:	f84e 1b04 	str.w	r1, [lr], #4
 80059e0:	f85c 2b04 	ldr.w	r2, [ip], #4
 80059e4:	f8be 1000 	ldrh.w	r1, [lr]
 80059e8:	0c12      	lsrs	r2, r2, #16
 80059ea:	fb09 1102 	mla	r1, r9, r2, r1
 80059ee:	4567      	cmp	r7, ip
 80059f0:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80059f4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80059f8:	d8e6      	bhi.n	80059c8 <__multiply+0x108>
 80059fa:	9a01      	ldr	r2, [sp, #4]
 80059fc:	50a9      	str	r1, [r5, r2]
 80059fe:	3504      	adds	r5, #4
 8005a00:	e79b      	b.n	800593a <__multiply+0x7a>
 8005a02:	3e01      	subs	r6, #1
 8005a04:	e79d      	b.n	8005942 <__multiply+0x82>
 8005a06:	bf00      	nop
 8005a08:	0800643f 	.word	0x0800643f
 8005a0c:	080064b0 	.word	0x080064b0

08005a10 <__pow5mult>:
 8005a10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005a14:	4615      	mov	r5, r2
 8005a16:	f012 0203 	ands.w	r2, r2, #3
 8005a1a:	4606      	mov	r6, r0
 8005a1c:	460f      	mov	r7, r1
 8005a1e:	d007      	beq.n	8005a30 <__pow5mult+0x20>
 8005a20:	4c25      	ldr	r4, [pc, #148]	; (8005ab8 <__pow5mult+0xa8>)
 8005a22:	3a01      	subs	r2, #1
 8005a24:	2300      	movs	r3, #0
 8005a26:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005a2a:	f7ff fe9f 	bl	800576c <__multadd>
 8005a2e:	4607      	mov	r7, r0
 8005a30:	10ad      	asrs	r5, r5, #2
 8005a32:	d03d      	beq.n	8005ab0 <__pow5mult+0xa0>
 8005a34:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005a36:	b97c      	cbnz	r4, 8005a58 <__pow5mult+0x48>
 8005a38:	2010      	movs	r0, #16
 8005a3a:	f7fd fe93 	bl	8003764 <malloc>
 8005a3e:	4602      	mov	r2, r0
 8005a40:	6270      	str	r0, [r6, #36]	; 0x24
 8005a42:	b928      	cbnz	r0, 8005a50 <__pow5mult+0x40>
 8005a44:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8005a48:	4b1c      	ldr	r3, [pc, #112]	; (8005abc <__pow5mult+0xac>)
 8005a4a:	481d      	ldr	r0, [pc, #116]	; (8005ac0 <__pow5mult+0xb0>)
 8005a4c:	f000 fa18 	bl	8005e80 <__assert_func>
 8005a50:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005a54:	6004      	str	r4, [r0, #0]
 8005a56:	60c4      	str	r4, [r0, #12]
 8005a58:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005a5c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005a60:	b94c      	cbnz	r4, 8005a76 <__pow5mult+0x66>
 8005a62:	f240 2171 	movw	r1, #625	; 0x271
 8005a66:	4630      	mov	r0, r6
 8005a68:	f7ff ff14 	bl	8005894 <__i2b>
 8005a6c:	2300      	movs	r3, #0
 8005a6e:	4604      	mov	r4, r0
 8005a70:	f8c8 0008 	str.w	r0, [r8, #8]
 8005a74:	6003      	str	r3, [r0, #0]
 8005a76:	f04f 0900 	mov.w	r9, #0
 8005a7a:	07eb      	lsls	r3, r5, #31
 8005a7c:	d50a      	bpl.n	8005a94 <__pow5mult+0x84>
 8005a7e:	4639      	mov	r1, r7
 8005a80:	4622      	mov	r2, r4
 8005a82:	4630      	mov	r0, r6
 8005a84:	f7ff ff1c 	bl	80058c0 <__multiply>
 8005a88:	4680      	mov	r8, r0
 8005a8a:	4639      	mov	r1, r7
 8005a8c:	4630      	mov	r0, r6
 8005a8e:	f7ff fe4b 	bl	8005728 <_Bfree>
 8005a92:	4647      	mov	r7, r8
 8005a94:	106d      	asrs	r5, r5, #1
 8005a96:	d00b      	beq.n	8005ab0 <__pow5mult+0xa0>
 8005a98:	6820      	ldr	r0, [r4, #0]
 8005a9a:	b938      	cbnz	r0, 8005aac <__pow5mult+0x9c>
 8005a9c:	4622      	mov	r2, r4
 8005a9e:	4621      	mov	r1, r4
 8005aa0:	4630      	mov	r0, r6
 8005aa2:	f7ff ff0d 	bl	80058c0 <__multiply>
 8005aa6:	6020      	str	r0, [r4, #0]
 8005aa8:	f8c0 9000 	str.w	r9, [r0]
 8005aac:	4604      	mov	r4, r0
 8005aae:	e7e4      	b.n	8005a7a <__pow5mult+0x6a>
 8005ab0:	4638      	mov	r0, r7
 8005ab2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005ab6:	bf00      	nop
 8005ab8:	08006600 	.word	0x08006600
 8005abc:	080063cd 	.word	0x080063cd
 8005ac0:	080064b0 	.word	0x080064b0

08005ac4 <__lshift>:
 8005ac4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ac8:	460c      	mov	r4, r1
 8005aca:	4607      	mov	r7, r0
 8005acc:	4691      	mov	r9, r2
 8005ace:	6923      	ldr	r3, [r4, #16]
 8005ad0:	6849      	ldr	r1, [r1, #4]
 8005ad2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005ad6:	68a3      	ldr	r3, [r4, #8]
 8005ad8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005adc:	f108 0601 	add.w	r6, r8, #1
 8005ae0:	42b3      	cmp	r3, r6
 8005ae2:	db0b      	blt.n	8005afc <__lshift+0x38>
 8005ae4:	4638      	mov	r0, r7
 8005ae6:	f7ff fddf 	bl	80056a8 <_Balloc>
 8005aea:	4605      	mov	r5, r0
 8005aec:	b948      	cbnz	r0, 8005b02 <__lshift+0x3e>
 8005aee:	4602      	mov	r2, r0
 8005af0:	f240 11d9 	movw	r1, #473	; 0x1d9
 8005af4:	4b29      	ldr	r3, [pc, #164]	; (8005b9c <__lshift+0xd8>)
 8005af6:	482a      	ldr	r0, [pc, #168]	; (8005ba0 <__lshift+0xdc>)
 8005af8:	f000 f9c2 	bl	8005e80 <__assert_func>
 8005afc:	3101      	adds	r1, #1
 8005afe:	005b      	lsls	r3, r3, #1
 8005b00:	e7ee      	b.n	8005ae0 <__lshift+0x1c>
 8005b02:	2300      	movs	r3, #0
 8005b04:	f100 0114 	add.w	r1, r0, #20
 8005b08:	f100 0210 	add.w	r2, r0, #16
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	4553      	cmp	r3, sl
 8005b10:	db37      	blt.n	8005b82 <__lshift+0xbe>
 8005b12:	6920      	ldr	r0, [r4, #16]
 8005b14:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005b18:	f104 0314 	add.w	r3, r4, #20
 8005b1c:	f019 091f 	ands.w	r9, r9, #31
 8005b20:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005b24:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8005b28:	d02f      	beq.n	8005b8a <__lshift+0xc6>
 8005b2a:	468a      	mov	sl, r1
 8005b2c:	f04f 0c00 	mov.w	ip, #0
 8005b30:	f1c9 0e20 	rsb	lr, r9, #32
 8005b34:	681a      	ldr	r2, [r3, #0]
 8005b36:	fa02 f209 	lsl.w	r2, r2, r9
 8005b3a:	ea42 020c 	orr.w	r2, r2, ip
 8005b3e:	f84a 2b04 	str.w	r2, [sl], #4
 8005b42:	f853 2b04 	ldr.w	r2, [r3], #4
 8005b46:	4298      	cmp	r0, r3
 8005b48:	fa22 fc0e 	lsr.w	ip, r2, lr
 8005b4c:	d8f2      	bhi.n	8005b34 <__lshift+0x70>
 8005b4e:	1b03      	subs	r3, r0, r4
 8005b50:	3b15      	subs	r3, #21
 8005b52:	f023 0303 	bic.w	r3, r3, #3
 8005b56:	3304      	adds	r3, #4
 8005b58:	f104 0215 	add.w	r2, r4, #21
 8005b5c:	4290      	cmp	r0, r2
 8005b5e:	bf38      	it	cc
 8005b60:	2304      	movcc	r3, #4
 8005b62:	f841 c003 	str.w	ip, [r1, r3]
 8005b66:	f1bc 0f00 	cmp.w	ip, #0
 8005b6a:	d001      	beq.n	8005b70 <__lshift+0xac>
 8005b6c:	f108 0602 	add.w	r6, r8, #2
 8005b70:	3e01      	subs	r6, #1
 8005b72:	4638      	mov	r0, r7
 8005b74:	4621      	mov	r1, r4
 8005b76:	612e      	str	r6, [r5, #16]
 8005b78:	f7ff fdd6 	bl	8005728 <_Bfree>
 8005b7c:	4628      	mov	r0, r5
 8005b7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b82:	f842 0f04 	str.w	r0, [r2, #4]!
 8005b86:	3301      	adds	r3, #1
 8005b88:	e7c1      	b.n	8005b0e <__lshift+0x4a>
 8005b8a:	3904      	subs	r1, #4
 8005b8c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005b90:	4298      	cmp	r0, r3
 8005b92:	f841 2f04 	str.w	r2, [r1, #4]!
 8005b96:	d8f9      	bhi.n	8005b8c <__lshift+0xc8>
 8005b98:	e7ea      	b.n	8005b70 <__lshift+0xac>
 8005b9a:	bf00      	nop
 8005b9c:	0800643f 	.word	0x0800643f
 8005ba0:	080064b0 	.word	0x080064b0

08005ba4 <__mcmp>:
 8005ba4:	4603      	mov	r3, r0
 8005ba6:	690a      	ldr	r2, [r1, #16]
 8005ba8:	6900      	ldr	r0, [r0, #16]
 8005baa:	b530      	push	{r4, r5, lr}
 8005bac:	1a80      	subs	r0, r0, r2
 8005bae:	d10d      	bne.n	8005bcc <__mcmp+0x28>
 8005bb0:	3314      	adds	r3, #20
 8005bb2:	3114      	adds	r1, #20
 8005bb4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8005bb8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8005bbc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005bc0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005bc4:	4295      	cmp	r5, r2
 8005bc6:	d002      	beq.n	8005bce <__mcmp+0x2a>
 8005bc8:	d304      	bcc.n	8005bd4 <__mcmp+0x30>
 8005bca:	2001      	movs	r0, #1
 8005bcc:	bd30      	pop	{r4, r5, pc}
 8005bce:	42a3      	cmp	r3, r4
 8005bd0:	d3f4      	bcc.n	8005bbc <__mcmp+0x18>
 8005bd2:	e7fb      	b.n	8005bcc <__mcmp+0x28>
 8005bd4:	f04f 30ff 	mov.w	r0, #4294967295
 8005bd8:	e7f8      	b.n	8005bcc <__mcmp+0x28>
	...

08005bdc <__mdiff>:
 8005bdc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005be0:	460d      	mov	r5, r1
 8005be2:	4607      	mov	r7, r0
 8005be4:	4611      	mov	r1, r2
 8005be6:	4628      	mov	r0, r5
 8005be8:	4614      	mov	r4, r2
 8005bea:	f7ff ffdb 	bl	8005ba4 <__mcmp>
 8005bee:	1e06      	subs	r6, r0, #0
 8005bf0:	d111      	bne.n	8005c16 <__mdiff+0x3a>
 8005bf2:	4631      	mov	r1, r6
 8005bf4:	4638      	mov	r0, r7
 8005bf6:	f7ff fd57 	bl	80056a8 <_Balloc>
 8005bfa:	4602      	mov	r2, r0
 8005bfc:	b928      	cbnz	r0, 8005c0a <__mdiff+0x2e>
 8005bfe:	f240 2132 	movw	r1, #562	; 0x232
 8005c02:	4b3a      	ldr	r3, [pc, #232]	; (8005cec <__mdiff+0x110>)
 8005c04:	483a      	ldr	r0, [pc, #232]	; (8005cf0 <__mdiff+0x114>)
 8005c06:	f000 f93b 	bl	8005e80 <__assert_func>
 8005c0a:	2301      	movs	r3, #1
 8005c0c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8005c10:	4610      	mov	r0, r2
 8005c12:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c16:	bfa4      	itt	ge
 8005c18:	4623      	movge	r3, r4
 8005c1a:	462c      	movge	r4, r5
 8005c1c:	4638      	mov	r0, r7
 8005c1e:	6861      	ldr	r1, [r4, #4]
 8005c20:	bfa6      	itte	ge
 8005c22:	461d      	movge	r5, r3
 8005c24:	2600      	movge	r6, #0
 8005c26:	2601      	movlt	r6, #1
 8005c28:	f7ff fd3e 	bl	80056a8 <_Balloc>
 8005c2c:	4602      	mov	r2, r0
 8005c2e:	b918      	cbnz	r0, 8005c38 <__mdiff+0x5c>
 8005c30:	f44f 7110 	mov.w	r1, #576	; 0x240
 8005c34:	4b2d      	ldr	r3, [pc, #180]	; (8005cec <__mdiff+0x110>)
 8005c36:	e7e5      	b.n	8005c04 <__mdiff+0x28>
 8005c38:	f102 0814 	add.w	r8, r2, #20
 8005c3c:	46c2      	mov	sl, r8
 8005c3e:	f04f 0c00 	mov.w	ip, #0
 8005c42:	6927      	ldr	r7, [r4, #16]
 8005c44:	60c6      	str	r6, [r0, #12]
 8005c46:	692e      	ldr	r6, [r5, #16]
 8005c48:	f104 0014 	add.w	r0, r4, #20
 8005c4c:	f105 0914 	add.w	r9, r5, #20
 8005c50:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8005c54:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8005c58:	3410      	adds	r4, #16
 8005c5a:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8005c5e:	f859 3b04 	ldr.w	r3, [r9], #4
 8005c62:	fa1f f18b 	uxth.w	r1, fp
 8005c66:	448c      	add	ip, r1
 8005c68:	b299      	uxth	r1, r3
 8005c6a:	0c1b      	lsrs	r3, r3, #16
 8005c6c:	ebac 0101 	sub.w	r1, ip, r1
 8005c70:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8005c74:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8005c78:	b289      	uxth	r1, r1
 8005c7a:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8005c7e:	454e      	cmp	r6, r9
 8005c80:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8005c84:	f84a 3b04 	str.w	r3, [sl], #4
 8005c88:	d8e7      	bhi.n	8005c5a <__mdiff+0x7e>
 8005c8a:	1b73      	subs	r3, r6, r5
 8005c8c:	3b15      	subs	r3, #21
 8005c8e:	f023 0303 	bic.w	r3, r3, #3
 8005c92:	3515      	adds	r5, #21
 8005c94:	3304      	adds	r3, #4
 8005c96:	42ae      	cmp	r6, r5
 8005c98:	bf38      	it	cc
 8005c9a:	2304      	movcc	r3, #4
 8005c9c:	4418      	add	r0, r3
 8005c9e:	4443      	add	r3, r8
 8005ca0:	461e      	mov	r6, r3
 8005ca2:	4605      	mov	r5, r0
 8005ca4:	4575      	cmp	r5, lr
 8005ca6:	d30e      	bcc.n	8005cc6 <__mdiff+0xea>
 8005ca8:	f10e 0103 	add.w	r1, lr, #3
 8005cac:	1a09      	subs	r1, r1, r0
 8005cae:	f021 0103 	bic.w	r1, r1, #3
 8005cb2:	3803      	subs	r0, #3
 8005cb4:	4586      	cmp	lr, r0
 8005cb6:	bf38      	it	cc
 8005cb8:	2100      	movcc	r1, #0
 8005cba:	4419      	add	r1, r3
 8005cbc:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8005cc0:	b18b      	cbz	r3, 8005ce6 <__mdiff+0x10a>
 8005cc2:	6117      	str	r7, [r2, #16]
 8005cc4:	e7a4      	b.n	8005c10 <__mdiff+0x34>
 8005cc6:	f855 8b04 	ldr.w	r8, [r5], #4
 8005cca:	fa1f f188 	uxth.w	r1, r8
 8005cce:	4461      	add	r1, ip
 8005cd0:	140c      	asrs	r4, r1, #16
 8005cd2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8005cd6:	b289      	uxth	r1, r1
 8005cd8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8005cdc:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8005ce0:	f846 1b04 	str.w	r1, [r6], #4
 8005ce4:	e7de      	b.n	8005ca4 <__mdiff+0xc8>
 8005ce6:	3f01      	subs	r7, #1
 8005ce8:	e7e8      	b.n	8005cbc <__mdiff+0xe0>
 8005cea:	bf00      	nop
 8005cec:	0800643f 	.word	0x0800643f
 8005cf0:	080064b0 	.word	0x080064b0

08005cf4 <__d2b>:
 8005cf4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8005cf8:	2101      	movs	r1, #1
 8005cfa:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8005cfe:	4690      	mov	r8, r2
 8005d00:	461d      	mov	r5, r3
 8005d02:	f7ff fcd1 	bl	80056a8 <_Balloc>
 8005d06:	4604      	mov	r4, r0
 8005d08:	b930      	cbnz	r0, 8005d18 <__d2b+0x24>
 8005d0a:	4602      	mov	r2, r0
 8005d0c:	f240 310a 	movw	r1, #778	; 0x30a
 8005d10:	4b24      	ldr	r3, [pc, #144]	; (8005da4 <__d2b+0xb0>)
 8005d12:	4825      	ldr	r0, [pc, #148]	; (8005da8 <__d2b+0xb4>)
 8005d14:	f000 f8b4 	bl	8005e80 <__assert_func>
 8005d18:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8005d1c:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8005d20:	bb2d      	cbnz	r5, 8005d6e <__d2b+0x7a>
 8005d22:	9301      	str	r3, [sp, #4]
 8005d24:	f1b8 0300 	subs.w	r3, r8, #0
 8005d28:	d026      	beq.n	8005d78 <__d2b+0x84>
 8005d2a:	4668      	mov	r0, sp
 8005d2c:	9300      	str	r3, [sp, #0]
 8005d2e:	f7ff fd83 	bl	8005838 <__lo0bits>
 8005d32:	9900      	ldr	r1, [sp, #0]
 8005d34:	b1f0      	cbz	r0, 8005d74 <__d2b+0x80>
 8005d36:	9a01      	ldr	r2, [sp, #4]
 8005d38:	f1c0 0320 	rsb	r3, r0, #32
 8005d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8005d40:	430b      	orrs	r3, r1
 8005d42:	40c2      	lsrs	r2, r0
 8005d44:	6163      	str	r3, [r4, #20]
 8005d46:	9201      	str	r2, [sp, #4]
 8005d48:	9b01      	ldr	r3, [sp, #4]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	bf14      	ite	ne
 8005d4e:	2102      	movne	r1, #2
 8005d50:	2101      	moveq	r1, #1
 8005d52:	61a3      	str	r3, [r4, #24]
 8005d54:	6121      	str	r1, [r4, #16]
 8005d56:	b1c5      	cbz	r5, 8005d8a <__d2b+0x96>
 8005d58:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8005d5c:	4405      	add	r5, r0
 8005d5e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005d62:	603d      	str	r5, [r7, #0]
 8005d64:	6030      	str	r0, [r6, #0]
 8005d66:	4620      	mov	r0, r4
 8005d68:	b002      	add	sp, #8
 8005d6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005d6e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005d72:	e7d6      	b.n	8005d22 <__d2b+0x2e>
 8005d74:	6161      	str	r1, [r4, #20]
 8005d76:	e7e7      	b.n	8005d48 <__d2b+0x54>
 8005d78:	a801      	add	r0, sp, #4
 8005d7a:	f7ff fd5d 	bl	8005838 <__lo0bits>
 8005d7e:	2101      	movs	r1, #1
 8005d80:	9b01      	ldr	r3, [sp, #4]
 8005d82:	6121      	str	r1, [r4, #16]
 8005d84:	6163      	str	r3, [r4, #20]
 8005d86:	3020      	adds	r0, #32
 8005d88:	e7e5      	b.n	8005d56 <__d2b+0x62>
 8005d8a:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8005d8e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005d92:	6038      	str	r0, [r7, #0]
 8005d94:	6918      	ldr	r0, [r3, #16]
 8005d96:	f7ff fd2f 	bl	80057f8 <__hi0bits>
 8005d9a:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8005d9e:	6031      	str	r1, [r6, #0]
 8005da0:	e7e1      	b.n	8005d66 <__d2b+0x72>
 8005da2:	bf00      	nop
 8005da4:	0800643f 	.word	0x0800643f
 8005da8:	080064b0 	.word	0x080064b0

08005dac <_calloc_r>:
 8005dac:	b570      	push	{r4, r5, r6, lr}
 8005dae:	fba1 5402 	umull	r5, r4, r1, r2
 8005db2:	b934      	cbnz	r4, 8005dc2 <_calloc_r+0x16>
 8005db4:	4629      	mov	r1, r5
 8005db6:	f7fd fd63 	bl	8003880 <_malloc_r>
 8005dba:	4606      	mov	r6, r0
 8005dbc:	b928      	cbnz	r0, 8005dca <_calloc_r+0x1e>
 8005dbe:	4630      	mov	r0, r6
 8005dc0:	bd70      	pop	{r4, r5, r6, pc}
 8005dc2:	220c      	movs	r2, #12
 8005dc4:	2600      	movs	r6, #0
 8005dc6:	6002      	str	r2, [r0, #0]
 8005dc8:	e7f9      	b.n	8005dbe <_calloc_r+0x12>
 8005dca:	462a      	mov	r2, r5
 8005dcc:	4621      	mov	r1, r4
 8005dce:	f7fd fce7 	bl	80037a0 <memset>
 8005dd2:	e7f4      	b.n	8005dbe <_calloc_r+0x12>

08005dd4 <__sread>:
 8005dd4:	b510      	push	{r4, lr}
 8005dd6:	460c      	mov	r4, r1
 8005dd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ddc:	f000 fa2e 	bl	800623c <_read_r>
 8005de0:	2800      	cmp	r0, #0
 8005de2:	bfab      	itete	ge
 8005de4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005de6:	89a3      	ldrhlt	r3, [r4, #12]
 8005de8:	181b      	addge	r3, r3, r0
 8005dea:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005dee:	bfac      	ite	ge
 8005df0:	6563      	strge	r3, [r4, #84]	; 0x54
 8005df2:	81a3      	strhlt	r3, [r4, #12]
 8005df4:	bd10      	pop	{r4, pc}

08005df6 <__swrite>:
 8005df6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005dfa:	461f      	mov	r7, r3
 8005dfc:	898b      	ldrh	r3, [r1, #12]
 8005dfe:	4605      	mov	r5, r0
 8005e00:	05db      	lsls	r3, r3, #23
 8005e02:	460c      	mov	r4, r1
 8005e04:	4616      	mov	r6, r2
 8005e06:	d505      	bpl.n	8005e14 <__swrite+0x1e>
 8005e08:	2302      	movs	r3, #2
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e10:	f000 f898 	bl	8005f44 <_lseek_r>
 8005e14:	89a3      	ldrh	r3, [r4, #12]
 8005e16:	4632      	mov	r2, r6
 8005e18:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005e1c:	81a3      	strh	r3, [r4, #12]
 8005e1e:	4628      	mov	r0, r5
 8005e20:	463b      	mov	r3, r7
 8005e22:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005e26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005e2a:	f000 b817 	b.w	8005e5c <_write_r>

08005e2e <__sseek>:
 8005e2e:	b510      	push	{r4, lr}
 8005e30:	460c      	mov	r4, r1
 8005e32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e36:	f000 f885 	bl	8005f44 <_lseek_r>
 8005e3a:	1c43      	adds	r3, r0, #1
 8005e3c:	89a3      	ldrh	r3, [r4, #12]
 8005e3e:	bf15      	itete	ne
 8005e40:	6560      	strne	r0, [r4, #84]	; 0x54
 8005e42:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005e46:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005e4a:	81a3      	strheq	r3, [r4, #12]
 8005e4c:	bf18      	it	ne
 8005e4e:	81a3      	strhne	r3, [r4, #12]
 8005e50:	bd10      	pop	{r4, pc}

08005e52 <__sclose>:
 8005e52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e56:	f000 b831 	b.w	8005ebc <_close_r>
	...

08005e5c <_write_r>:
 8005e5c:	b538      	push	{r3, r4, r5, lr}
 8005e5e:	4604      	mov	r4, r0
 8005e60:	4608      	mov	r0, r1
 8005e62:	4611      	mov	r1, r2
 8005e64:	2200      	movs	r2, #0
 8005e66:	4d05      	ldr	r5, [pc, #20]	; (8005e7c <_write_r+0x20>)
 8005e68:	602a      	str	r2, [r5, #0]
 8005e6a:	461a      	mov	r2, r3
 8005e6c:	f7fd fac2 	bl	80033f4 <_write>
 8005e70:	1c43      	adds	r3, r0, #1
 8005e72:	d102      	bne.n	8005e7a <_write_r+0x1e>
 8005e74:	682b      	ldr	r3, [r5, #0]
 8005e76:	b103      	cbz	r3, 8005e7a <_write_r+0x1e>
 8005e78:	6023      	str	r3, [r4, #0]
 8005e7a:	bd38      	pop	{r3, r4, r5, pc}
 8005e7c:	20000668 	.word	0x20000668

08005e80 <__assert_func>:
 8005e80:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005e82:	4614      	mov	r4, r2
 8005e84:	461a      	mov	r2, r3
 8005e86:	4b09      	ldr	r3, [pc, #36]	; (8005eac <__assert_func+0x2c>)
 8005e88:	4605      	mov	r5, r0
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	68d8      	ldr	r0, [r3, #12]
 8005e8e:	b14c      	cbz	r4, 8005ea4 <__assert_func+0x24>
 8005e90:	4b07      	ldr	r3, [pc, #28]	; (8005eb0 <__assert_func+0x30>)
 8005e92:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005e96:	9100      	str	r1, [sp, #0]
 8005e98:	462b      	mov	r3, r5
 8005e9a:	4906      	ldr	r1, [pc, #24]	; (8005eb4 <__assert_func+0x34>)
 8005e9c:	f000 f81e 	bl	8005edc <fiprintf>
 8005ea0:	f7fd fc2e 	bl	8003700 <abort>
 8005ea4:	4b04      	ldr	r3, [pc, #16]	; (8005eb8 <__assert_func+0x38>)
 8005ea6:	461c      	mov	r4, r3
 8005ea8:	e7f3      	b.n	8005e92 <__assert_func+0x12>
 8005eaa:	bf00      	nop
 8005eac:	20000278 	.word	0x20000278
 8005eb0:	0800660c 	.word	0x0800660c
 8005eb4:	08006619 	.word	0x08006619
 8005eb8:	08006647 	.word	0x08006647

08005ebc <_close_r>:
 8005ebc:	b538      	push	{r3, r4, r5, lr}
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	4d05      	ldr	r5, [pc, #20]	; (8005ed8 <_close_r+0x1c>)
 8005ec2:	4604      	mov	r4, r0
 8005ec4:	4608      	mov	r0, r1
 8005ec6:	602b      	str	r3, [r5, #0]
 8005ec8:	f7fd fab0 	bl	800342c <_close>
 8005ecc:	1c43      	adds	r3, r0, #1
 8005ece:	d102      	bne.n	8005ed6 <_close_r+0x1a>
 8005ed0:	682b      	ldr	r3, [r5, #0]
 8005ed2:	b103      	cbz	r3, 8005ed6 <_close_r+0x1a>
 8005ed4:	6023      	str	r3, [r4, #0]
 8005ed6:	bd38      	pop	{r3, r4, r5, pc}
 8005ed8:	20000668 	.word	0x20000668

08005edc <fiprintf>:
 8005edc:	b40e      	push	{r1, r2, r3}
 8005ede:	b503      	push	{r0, r1, lr}
 8005ee0:	4601      	mov	r1, r0
 8005ee2:	ab03      	add	r3, sp, #12
 8005ee4:	4805      	ldr	r0, [pc, #20]	; (8005efc <fiprintf+0x20>)
 8005ee6:	f853 2b04 	ldr.w	r2, [r3], #4
 8005eea:	6800      	ldr	r0, [r0, #0]
 8005eec:	9301      	str	r3, [sp, #4]
 8005eee:	f000 f875 	bl	8005fdc <_vfiprintf_r>
 8005ef2:	b002      	add	sp, #8
 8005ef4:	f85d eb04 	ldr.w	lr, [sp], #4
 8005ef8:	b003      	add	sp, #12
 8005efa:	4770      	bx	lr
 8005efc:	20000278 	.word	0x20000278

08005f00 <_fstat_r>:
 8005f00:	b538      	push	{r3, r4, r5, lr}
 8005f02:	2300      	movs	r3, #0
 8005f04:	4d06      	ldr	r5, [pc, #24]	; (8005f20 <_fstat_r+0x20>)
 8005f06:	4604      	mov	r4, r0
 8005f08:	4608      	mov	r0, r1
 8005f0a:	4611      	mov	r1, r2
 8005f0c:	602b      	str	r3, [r5, #0]
 8005f0e:	f7fd fa98 	bl	8003442 <_fstat>
 8005f12:	1c43      	adds	r3, r0, #1
 8005f14:	d102      	bne.n	8005f1c <_fstat_r+0x1c>
 8005f16:	682b      	ldr	r3, [r5, #0]
 8005f18:	b103      	cbz	r3, 8005f1c <_fstat_r+0x1c>
 8005f1a:	6023      	str	r3, [r4, #0]
 8005f1c:	bd38      	pop	{r3, r4, r5, pc}
 8005f1e:	bf00      	nop
 8005f20:	20000668 	.word	0x20000668

08005f24 <_isatty_r>:
 8005f24:	b538      	push	{r3, r4, r5, lr}
 8005f26:	2300      	movs	r3, #0
 8005f28:	4d05      	ldr	r5, [pc, #20]	; (8005f40 <_isatty_r+0x1c>)
 8005f2a:	4604      	mov	r4, r0
 8005f2c:	4608      	mov	r0, r1
 8005f2e:	602b      	str	r3, [r5, #0]
 8005f30:	f7fd fa96 	bl	8003460 <_isatty>
 8005f34:	1c43      	adds	r3, r0, #1
 8005f36:	d102      	bne.n	8005f3e <_isatty_r+0x1a>
 8005f38:	682b      	ldr	r3, [r5, #0]
 8005f3a:	b103      	cbz	r3, 8005f3e <_isatty_r+0x1a>
 8005f3c:	6023      	str	r3, [r4, #0]
 8005f3e:	bd38      	pop	{r3, r4, r5, pc}
 8005f40:	20000668 	.word	0x20000668

08005f44 <_lseek_r>:
 8005f44:	b538      	push	{r3, r4, r5, lr}
 8005f46:	4604      	mov	r4, r0
 8005f48:	4608      	mov	r0, r1
 8005f4a:	4611      	mov	r1, r2
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	4d05      	ldr	r5, [pc, #20]	; (8005f64 <_lseek_r+0x20>)
 8005f50:	602a      	str	r2, [r5, #0]
 8005f52:	461a      	mov	r2, r3
 8005f54:	f7fd fa8e 	bl	8003474 <_lseek>
 8005f58:	1c43      	adds	r3, r0, #1
 8005f5a:	d102      	bne.n	8005f62 <_lseek_r+0x1e>
 8005f5c:	682b      	ldr	r3, [r5, #0]
 8005f5e:	b103      	cbz	r3, 8005f62 <_lseek_r+0x1e>
 8005f60:	6023      	str	r3, [r4, #0]
 8005f62:	bd38      	pop	{r3, r4, r5, pc}
 8005f64:	20000668 	.word	0x20000668

08005f68 <__ascii_mbtowc>:
 8005f68:	b082      	sub	sp, #8
 8005f6a:	b901      	cbnz	r1, 8005f6e <__ascii_mbtowc+0x6>
 8005f6c:	a901      	add	r1, sp, #4
 8005f6e:	b142      	cbz	r2, 8005f82 <__ascii_mbtowc+0x1a>
 8005f70:	b14b      	cbz	r3, 8005f86 <__ascii_mbtowc+0x1e>
 8005f72:	7813      	ldrb	r3, [r2, #0]
 8005f74:	600b      	str	r3, [r1, #0]
 8005f76:	7812      	ldrb	r2, [r2, #0]
 8005f78:	1e10      	subs	r0, r2, #0
 8005f7a:	bf18      	it	ne
 8005f7c:	2001      	movne	r0, #1
 8005f7e:	b002      	add	sp, #8
 8005f80:	4770      	bx	lr
 8005f82:	4610      	mov	r0, r2
 8005f84:	e7fb      	b.n	8005f7e <__ascii_mbtowc+0x16>
 8005f86:	f06f 0001 	mvn.w	r0, #1
 8005f8a:	e7f8      	b.n	8005f7e <__ascii_mbtowc+0x16>

08005f8c <__sfputc_r>:
 8005f8c:	6893      	ldr	r3, [r2, #8]
 8005f8e:	b410      	push	{r4}
 8005f90:	3b01      	subs	r3, #1
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	6093      	str	r3, [r2, #8]
 8005f96:	da07      	bge.n	8005fa8 <__sfputc_r+0x1c>
 8005f98:	6994      	ldr	r4, [r2, #24]
 8005f9a:	42a3      	cmp	r3, r4
 8005f9c:	db01      	blt.n	8005fa2 <__sfputc_r+0x16>
 8005f9e:	290a      	cmp	r1, #10
 8005fa0:	d102      	bne.n	8005fa8 <__sfputc_r+0x1c>
 8005fa2:	bc10      	pop	{r4}
 8005fa4:	f7fe ba0a 	b.w	80043bc <__swbuf_r>
 8005fa8:	6813      	ldr	r3, [r2, #0]
 8005faa:	1c58      	adds	r0, r3, #1
 8005fac:	6010      	str	r0, [r2, #0]
 8005fae:	7019      	strb	r1, [r3, #0]
 8005fb0:	4608      	mov	r0, r1
 8005fb2:	bc10      	pop	{r4}
 8005fb4:	4770      	bx	lr

08005fb6 <__sfputs_r>:
 8005fb6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fb8:	4606      	mov	r6, r0
 8005fba:	460f      	mov	r7, r1
 8005fbc:	4614      	mov	r4, r2
 8005fbe:	18d5      	adds	r5, r2, r3
 8005fc0:	42ac      	cmp	r4, r5
 8005fc2:	d101      	bne.n	8005fc8 <__sfputs_r+0x12>
 8005fc4:	2000      	movs	r0, #0
 8005fc6:	e007      	b.n	8005fd8 <__sfputs_r+0x22>
 8005fc8:	463a      	mov	r2, r7
 8005fca:	4630      	mov	r0, r6
 8005fcc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005fd0:	f7ff ffdc 	bl	8005f8c <__sfputc_r>
 8005fd4:	1c43      	adds	r3, r0, #1
 8005fd6:	d1f3      	bne.n	8005fc0 <__sfputs_r+0xa>
 8005fd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005fdc <_vfiprintf_r>:
 8005fdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fe0:	460d      	mov	r5, r1
 8005fe2:	4614      	mov	r4, r2
 8005fe4:	4698      	mov	r8, r3
 8005fe6:	4606      	mov	r6, r0
 8005fe8:	b09d      	sub	sp, #116	; 0x74
 8005fea:	b118      	cbz	r0, 8005ff4 <_vfiprintf_r+0x18>
 8005fec:	6983      	ldr	r3, [r0, #24]
 8005fee:	b90b      	cbnz	r3, 8005ff4 <_vfiprintf_r+0x18>
 8005ff0:	f7ff fa36 	bl	8005460 <__sinit>
 8005ff4:	4b89      	ldr	r3, [pc, #548]	; (800621c <_vfiprintf_r+0x240>)
 8005ff6:	429d      	cmp	r5, r3
 8005ff8:	d11b      	bne.n	8006032 <_vfiprintf_r+0x56>
 8005ffa:	6875      	ldr	r5, [r6, #4]
 8005ffc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005ffe:	07d9      	lsls	r1, r3, #31
 8006000:	d405      	bmi.n	800600e <_vfiprintf_r+0x32>
 8006002:	89ab      	ldrh	r3, [r5, #12]
 8006004:	059a      	lsls	r2, r3, #22
 8006006:	d402      	bmi.n	800600e <_vfiprintf_r+0x32>
 8006008:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800600a:	f7ff facc 	bl	80055a6 <__retarget_lock_acquire_recursive>
 800600e:	89ab      	ldrh	r3, [r5, #12]
 8006010:	071b      	lsls	r3, r3, #28
 8006012:	d501      	bpl.n	8006018 <_vfiprintf_r+0x3c>
 8006014:	692b      	ldr	r3, [r5, #16]
 8006016:	b9eb      	cbnz	r3, 8006054 <_vfiprintf_r+0x78>
 8006018:	4629      	mov	r1, r5
 800601a:	4630      	mov	r0, r6
 800601c:	f7fe fa20 	bl	8004460 <__swsetup_r>
 8006020:	b1c0      	cbz	r0, 8006054 <_vfiprintf_r+0x78>
 8006022:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006024:	07dc      	lsls	r4, r3, #31
 8006026:	d50e      	bpl.n	8006046 <_vfiprintf_r+0x6a>
 8006028:	f04f 30ff 	mov.w	r0, #4294967295
 800602c:	b01d      	add	sp, #116	; 0x74
 800602e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006032:	4b7b      	ldr	r3, [pc, #492]	; (8006220 <_vfiprintf_r+0x244>)
 8006034:	429d      	cmp	r5, r3
 8006036:	d101      	bne.n	800603c <_vfiprintf_r+0x60>
 8006038:	68b5      	ldr	r5, [r6, #8]
 800603a:	e7df      	b.n	8005ffc <_vfiprintf_r+0x20>
 800603c:	4b79      	ldr	r3, [pc, #484]	; (8006224 <_vfiprintf_r+0x248>)
 800603e:	429d      	cmp	r5, r3
 8006040:	bf08      	it	eq
 8006042:	68f5      	ldreq	r5, [r6, #12]
 8006044:	e7da      	b.n	8005ffc <_vfiprintf_r+0x20>
 8006046:	89ab      	ldrh	r3, [r5, #12]
 8006048:	0598      	lsls	r0, r3, #22
 800604a:	d4ed      	bmi.n	8006028 <_vfiprintf_r+0x4c>
 800604c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800604e:	f7ff faab 	bl	80055a8 <__retarget_lock_release_recursive>
 8006052:	e7e9      	b.n	8006028 <_vfiprintf_r+0x4c>
 8006054:	2300      	movs	r3, #0
 8006056:	9309      	str	r3, [sp, #36]	; 0x24
 8006058:	2320      	movs	r3, #32
 800605a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800605e:	2330      	movs	r3, #48	; 0x30
 8006060:	f04f 0901 	mov.w	r9, #1
 8006064:	f8cd 800c 	str.w	r8, [sp, #12]
 8006068:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8006228 <_vfiprintf_r+0x24c>
 800606c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006070:	4623      	mov	r3, r4
 8006072:	469a      	mov	sl, r3
 8006074:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006078:	b10a      	cbz	r2, 800607e <_vfiprintf_r+0xa2>
 800607a:	2a25      	cmp	r2, #37	; 0x25
 800607c:	d1f9      	bne.n	8006072 <_vfiprintf_r+0x96>
 800607e:	ebba 0b04 	subs.w	fp, sl, r4
 8006082:	d00b      	beq.n	800609c <_vfiprintf_r+0xc0>
 8006084:	465b      	mov	r3, fp
 8006086:	4622      	mov	r2, r4
 8006088:	4629      	mov	r1, r5
 800608a:	4630      	mov	r0, r6
 800608c:	f7ff ff93 	bl	8005fb6 <__sfputs_r>
 8006090:	3001      	adds	r0, #1
 8006092:	f000 80aa 	beq.w	80061ea <_vfiprintf_r+0x20e>
 8006096:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006098:	445a      	add	r2, fp
 800609a:	9209      	str	r2, [sp, #36]	; 0x24
 800609c:	f89a 3000 	ldrb.w	r3, [sl]
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	f000 80a2 	beq.w	80061ea <_vfiprintf_r+0x20e>
 80060a6:	2300      	movs	r3, #0
 80060a8:	f04f 32ff 	mov.w	r2, #4294967295
 80060ac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80060b0:	f10a 0a01 	add.w	sl, sl, #1
 80060b4:	9304      	str	r3, [sp, #16]
 80060b6:	9307      	str	r3, [sp, #28]
 80060b8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80060bc:	931a      	str	r3, [sp, #104]	; 0x68
 80060be:	4654      	mov	r4, sl
 80060c0:	2205      	movs	r2, #5
 80060c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80060c6:	4858      	ldr	r0, [pc, #352]	; (8006228 <_vfiprintf_r+0x24c>)
 80060c8:	f7ff fad4 	bl	8005674 <memchr>
 80060cc:	9a04      	ldr	r2, [sp, #16]
 80060ce:	b9d8      	cbnz	r0, 8006108 <_vfiprintf_r+0x12c>
 80060d0:	06d1      	lsls	r1, r2, #27
 80060d2:	bf44      	itt	mi
 80060d4:	2320      	movmi	r3, #32
 80060d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80060da:	0713      	lsls	r3, r2, #28
 80060dc:	bf44      	itt	mi
 80060de:	232b      	movmi	r3, #43	; 0x2b
 80060e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80060e4:	f89a 3000 	ldrb.w	r3, [sl]
 80060e8:	2b2a      	cmp	r3, #42	; 0x2a
 80060ea:	d015      	beq.n	8006118 <_vfiprintf_r+0x13c>
 80060ec:	4654      	mov	r4, sl
 80060ee:	2000      	movs	r0, #0
 80060f0:	f04f 0c0a 	mov.w	ip, #10
 80060f4:	9a07      	ldr	r2, [sp, #28]
 80060f6:	4621      	mov	r1, r4
 80060f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80060fc:	3b30      	subs	r3, #48	; 0x30
 80060fe:	2b09      	cmp	r3, #9
 8006100:	d94e      	bls.n	80061a0 <_vfiprintf_r+0x1c4>
 8006102:	b1b0      	cbz	r0, 8006132 <_vfiprintf_r+0x156>
 8006104:	9207      	str	r2, [sp, #28]
 8006106:	e014      	b.n	8006132 <_vfiprintf_r+0x156>
 8006108:	eba0 0308 	sub.w	r3, r0, r8
 800610c:	fa09 f303 	lsl.w	r3, r9, r3
 8006110:	4313      	orrs	r3, r2
 8006112:	46a2      	mov	sl, r4
 8006114:	9304      	str	r3, [sp, #16]
 8006116:	e7d2      	b.n	80060be <_vfiprintf_r+0xe2>
 8006118:	9b03      	ldr	r3, [sp, #12]
 800611a:	1d19      	adds	r1, r3, #4
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	9103      	str	r1, [sp, #12]
 8006120:	2b00      	cmp	r3, #0
 8006122:	bfbb      	ittet	lt
 8006124:	425b      	neglt	r3, r3
 8006126:	f042 0202 	orrlt.w	r2, r2, #2
 800612a:	9307      	strge	r3, [sp, #28]
 800612c:	9307      	strlt	r3, [sp, #28]
 800612e:	bfb8      	it	lt
 8006130:	9204      	strlt	r2, [sp, #16]
 8006132:	7823      	ldrb	r3, [r4, #0]
 8006134:	2b2e      	cmp	r3, #46	; 0x2e
 8006136:	d10c      	bne.n	8006152 <_vfiprintf_r+0x176>
 8006138:	7863      	ldrb	r3, [r4, #1]
 800613a:	2b2a      	cmp	r3, #42	; 0x2a
 800613c:	d135      	bne.n	80061aa <_vfiprintf_r+0x1ce>
 800613e:	9b03      	ldr	r3, [sp, #12]
 8006140:	3402      	adds	r4, #2
 8006142:	1d1a      	adds	r2, r3, #4
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	9203      	str	r2, [sp, #12]
 8006148:	2b00      	cmp	r3, #0
 800614a:	bfb8      	it	lt
 800614c:	f04f 33ff 	movlt.w	r3, #4294967295
 8006150:	9305      	str	r3, [sp, #20]
 8006152:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800622c <_vfiprintf_r+0x250>
 8006156:	2203      	movs	r2, #3
 8006158:	4650      	mov	r0, sl
 800615a:	7821      	ldrb	r1, [r4, #0]
 800615c:	f7ff fa8a 	bl	8005674 <memchr>
 8006160:	b140      	cbz	r0, 8006174 <_vfiprintf_r+0x198>
 8006162:	2340      	movs	r3, #64	; 0x40
 8006164:	eba0 000a 	sub.w	r0, r0, sl
 8006168:	fa03 f000 	lsl.w	r0, r3, r0
 800616c:	9b04      	ldr	r3, [sp, #16]
 800616e:	3401      	adds	r4, #1
 8006170:	4303      	orrs	r3, r0
 8006172:	9304      	str	r3, [sp, #16]
 8006174:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006178:	2206      	movs	r2, #6
 800617a:	482d      	ldr	r0, [pc, #180]	; (8006230 <_vfiprintf_r+0x254>)
 800617c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006180:	f7ff fa78 	bl	8005674 <memchr>
 8006184:	2800      	cmp	r0, #0
 8006186:	d03f      	beq.n	8006208 <_vfiprintf_r+0x22c>
 8006188:	4b2a      	ldr	r3, [pc, #168]	; (8006234 <_vfiprintf_r+0x258>)
 800618a:	bb1b      	cbnz	r3, 80061d4 <_vfiprintf_r+0x1f8>
 800618c:	9b03      	ldr	r3, [sp, #12]
 800618e:	3307      	adds	r3, #7
 8006190:	f023 0307 	bic.w	r3, r3, #7
 8006194:	3308      	adds	r3, #8
 8006196:	9303      	str	r3, [sp, #12]
 8006198:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800619a:	443b      	add	r3, r7
 800619c:	9309      	str	r3, [sp, #36]	; 0x24
 800619e:	e767      	b.n	8006070 <_vfiprintf_r+0x94>
 80061a0:	460c      	mov	r4, r1
 80061a2:	2001      	movs	r0, #1
 80061a4:	fb0c 3202 	mla	r2, ip, r2, r3
 80061a8:	e7a5      	b.n	80060f6 <_vfiprintf_r+0x11a>
 80061aa:	2300      	movs	r3, #0
 80061ac:	f04f 0c0a 	mov.w	ip, #10
 80061b0:	4619      	mov	r1, r3
 80061b2:	3401      	adds	r4, #1
 80061b4:	9305      	str	r3, [sp, #20]
 80061b6:	4620      	mov	r0, r4
 80061b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80061bc:	3a30      	subs	r2, #48	; 0x30
 80061be:	2a09      	cmp	r2, #9
 80061c0:	d903      	bls.n	80061ca <_vfiprintf_r+0x1ee>
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d0c5      	beq.n	8006152 <_vfiprintf_r+0x176>
 80061c6:	9105      	str	r1, [sp, #20]
 80061c8:	e7c3      	b.n	8006152 <_vfiprintf_r+0x176>
 80061ca:	4604      	mov	r4, r0
 80061cc:	2301      	movs	r3, #1
 80061ce:	fb0c 2101 	mla	r1, ip, r1, r2
 80061d2:	e7f0      	b.n	80061b6 <_vfiprintf_r+0x1da>
 80061d4:	ab03      	add	r3, sp, #12
 80061d6:	9300      	str	r3, [sp, #0]
 80061d8:	462a      	mov	r2, r5
 80061da:	4630      	mov	r0, r6
 80061dc:	4b16      	ldr	r3, [pc, #88]	; (8006238 <_vfiprintf_r+0x25c>)
 80061de:	a904      	add	r1, sp, #16
 80061e0:	f7fd fc60 	bl	8003aa4 <_printf_float>
 80061e4:	4607      	mov	r7, r0
 80061e6:	1c78      	adds	r0, r7, #1
 80061e8:	d1d6      	bne.n	8006198 <_vfiprintf_r+0x1bc>
 80061ea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80061ec:	07d9      	lsls	r1, r3, #31
 80061ee:	d405      	bmi.n	80061fc <_vfiprintf_r+0x220>
 80061f0:	89ab      	ldrh	r3, [r5, #12]
 80061f2:	059a      	lsls	r2, r3, #22
 80061f4:	d402      	bmi.n	80061fc <_vfiprintf_r+0x220>
 80061f6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80061f8:	f7ff f9d6 	bl	80055a8 <__retarget_lock_release_recursive>
 80061fc:	89ab      	ldrh	r3, [r5, #12]
 80061fe:	065b      	lsls	r3, r3, #25
 8006200:	f53f af12 	bmi.w	8006028 <_vfiprintf_r+0x4c>
 8006204:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006206:	e711      	b.n	800602c <_vfiprintf_r+0x50>
 8006208:	ab03      	add	r3, sp, #12
 800620a:	9300      	str	r3, [sp, #0]
 800620c:	462a      	mov	r2, r5
 800620e:	4630      	mov	r0, r6
 8006210:	4b09      	ldr	r3, [pc, #36]	; (8006238 <_vfiprintf_r+0x25c>)
 8006212:	a904      	add	r1, sp, #16
 8006214:	f7fd fee2 	bl	8003fdc <_printf_i>
 8006218:	e7e4      	b.n	80061e4 <_vfiprintf_r+0x208>
 800621a:	bf00      	nop
 800621c:	08006470 	.word	0x08006470
 8006220:	08006490 	.word	0x08006490
 8006224:	08006450 	.word	0x08006450
 8006228:	08006652 	.word	0x08006652
 800622c:	08006658 	.word	0x08006658
 8006230:	0800665c 	.word	0x0800665c
 8006234:	08003aa5 	.word	0x08003aa5
 8006238:	08005fb7 	.word	0x08005fb7

0800623c <_read_r>:
 800623c:	b538      	push	{r3, r4, r5, lr}
 800623e:	4604      	mov	r4, r0
 8006240:	4608      	mov	r0, r1
 8006242:	4611      	mov	r1, r2
 8006244:	2200      	movs	r2, #0
 8006246:	4d05      	ldr	r5, [pc, #20]	; (800625c <_read_r+0x20>)
 8006248:	602a      	str	r2, [r5, #0]
 800624a:	461a      	mov	r2, r3
 800624c:	f7fd f8b5 	bl	80033ba <_read>
 8006250:	1c43      	adds	r3, r0, #1
 8006252:	d102      	bne.n	800625a <_read_r+0x1e>
 8006254:	682b      	ldr	r3, [r5, #0]
 8006256:	b103      	cbz	r3, 800625a <_read_r+0x1e>
 8006258:	6023      	str	r3, [r4, #0]
 800625a:	bd38      	pop	{r3, r4, r5, pc}
 800625c:	20000668 	.word	0x20000668

08006260 <__ascii_wctomb>:
 8006260:	4603      	mov	r3, r0
 8006262:	4608      	mov	r0, r1
 8006264:	b141      	cbz	r1, 8006278 <__ascii_wctomb+0x18>
 8006266:	2aff      	cmp	r2, #255	; 0xff
 8006268:	d904      	bls.n	8006274 <__ascii_wctomb+0x14>
 800626a:	228a      	movs	r2, #138	; 0x8a
 800626c:	f04f 30ff 	mov.w	r0, #4294967295
 8006270:	601a      	str	r2, [r3, #0]
 8006272:	4770      	bx	lr
 8006274:	2001      	movs	r0, #1
 8006276:	700a      	strb	r2, [r1, #0]
 8006278:	4770      	bx	lr
	...

0800627c <_init>:
 800627c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800627e:	bf00      	nop
 8006280:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006282:	bc08      	pop	{r3}
 8006284:	469e      	mov	lr, r3
 8006286:	4770      	bx	lr

08006288 <_fini>:
 8006288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800628a:	bf00      	nop
 800628c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800628e:	bc08      	pop	{r3}
 8006290:	469e      	mov	lr, r3
 8006292:	4770      	bx	lr
