
BluePill agony-3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000049e8  08000130  08000130  00010130  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000046c  08004b18  08004b18  00014b18  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004f84  08004f84  00020448  2**0
                  CONTENTS
  4 .ARM          00000000  08004f84  08004f84  00020448  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004f84  08004f84  00020448  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08004f84  08004f84  00014f84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004f8c  08004f8c  00014f8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000448  20000000  08004f90  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000244  20000448  080053d8  00020448  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000068c  080053d8  0002068c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020448  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000784c  00000000  00000000  00020471  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000108e  00000000  00000000  00027cbd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000228  00000000  00000000  00028d50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000001c0  00000000  00000000  00028f78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000453d  00000000  00000000  00029138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000336e  00000000  00000000  0002d675  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000658d2  00000000  00000000  000309e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000962b5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000018e8  00000000  00000000  00096308  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000448 	.word	0x20000448
 800014c:	00000000 	.word	0x00000000
 8000150:	08004b00 	.word	0x08004b00

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	2000044c 	.word	0x2000044c
 800016c:	08004b00 	.word	0x08004b00

08000170 <__aeabi_drsub>:
 8000170:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000174:	e002      	b.n	800017c <__adddf3>
 8000176:	bf00      	nop

08000178 <__aeabi_dsub>:
 8000178:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800017c <__adddf3>:
 800017c:	b530      	push	{r4, r5, lr}
 800017e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000182:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000186:	ea94 0f05 	teq	r4, r5
 800018a:	bf08      	it	eq
 800018c:	ea90 0f02 	teqeq	r0, r2
 8000190:	bf1f      	itttt	ne
 8000192:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000196:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800019e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a2:	f000 80e2 	beq.w	800036a <__adddf3+0x1ee>
 80001a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001ae:	bfb8      	it	lt
 80001b0:	426d      	neglt	r5, r5
 80001b2:	dd0c      	ble.n	80001ce <__adddf3+0x52>
 80001b4:	442c      	add	r4, r5
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	ea82 0000 	eor.w	r0, r2, r0
 80001c2:	ea83 0101 	eor.w	r1, r3, r1
 80001c6:	ea80 0202 	eor.w	r2, r0, r2
 80001ca:	ea81 0303 	eor.w	r3, r1, r3
 80001ce:	2d36      	cmp	r5, #54	; 0x36
 80001d0:	bf88      	it	hi
 80001d2:	bd30      	pophi	{r4, r5, pc}
 80001d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e4:	d002      	beq.n	80001ec <__adddf3+0x70>
 80001e6:	4240      	negs	r0, r0
 80001e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001f8:	d002      	beq.n	8000200 <__adddf3+0x84>
 80001fa:	4252      	negs	r2, r2
 80001fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000200:	ea94 0f05 	teq	r4, r5
 8000204:	f000 80a7 	beq.w	8000356 <__adddf3+0x1da>
 8000208:	f1a4 0401 	sub.w	r4, r4, #1
 800020c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000210:	db0d      	blt.n	800022e <__adddf3+0xb2>
 8000212:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000216:	fa22 f205 	lsr.w	r2, r2, r5
 800021a:	1880      	adds	r0, r0, r2
 800021c:	f141 0100 	adc.w	r1, r1, #0
 8000220:	fa03 f20e 	lsl.w	r2, r3, lr
 8000224:	1880      	adds	r0, r0, r2
 8000226:	fa43 f305 	asr.w	r3, r3, r5
 800022a:	4159      	adcs	r1, r3
 800022c:	e00e      	b.n	800024c <__adddf3+0xd0>
 800022e:	f1a5 0520 	sub.w	r5, r5, #32
 8000232:	f10e 0e20 	add.w	lr, lr, #32
 8000236:	2a01      	cmp	r2, #1
 8000238:	fa03 fc0e 	lsl.w	ip, r3, lr
 800023c:	bf28      	it	cs
 800023e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000242:	fa43 f305 	asr.w	r3, r3, r5
 8000246:	18c0      	adds	r0, r0, r3
 8000248:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800024c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000250:	d507      	bpl.n	8000262 <__adddf3+0xe6>
 8000252:	f04f 0e00 	mov.w	lr, #0
 8000256:	f1dc 0c00 	rsbs	ip, ip, #0
 800025a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800025e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000262:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000266:	d31b      	bcc.n	80002a0 <__adddf3+0x124>
 8000268:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800026c:	d30c      	bcc.n	8000288 <__adddf3+0x10c>
 800026e:	0849      	lsrs	r1, r1, #1
 8000270:	ea5f 0030 	movs.w	r0, r0, rrx
 8000274:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000278:	f104 0401 	add.w	r4, r4, #1
 800027c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000280:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000284:	f080 809a 	bcs.w	80003bc <__adddf3+0x240>
 8000288:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800028c:	bf08      	it	eq
 800028e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000292:	f150 0000 	adcs.w	r0, r0, #0
 8000296:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029a:	ea41 0105 	orr.w	r1, r1, r5
 800029e:	bd30      	pop	{r4, r5, pc}
 80002a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a4:	4140      	adcs	r0, r0
 80002a6:	eb41 0101 	adc.w	r1, r1, r1
 80002aa:	3c01      	subs	r4, #1
 80002ac:	bf28      	it	cs
 80002ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002b2:	d2e9      	bcs.n	8000288 <__adddf3+0x10c>
 80002b4:	f091 0f00 	teq	r1, #0
 80002b8:	bf04      	itt	eq
 80002ba:	4601      	moveq	r1, r0
 80002bc:	2000      	moveq	r0, #0
 80002be:	fab1 f381 	clz	r3, r1
 80002c2:	bf08      	it	eq
 80002c4:	3320      	addeq	r3, #32
 80002c6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ca:	f1b3 0220 	subs.w	r2, r3, #32
 80002ce:	da0c      	bge.n	80002ea <__adddf3+0x16e>
 80002d0:	320c      	adds	r2, #12
 80002d2:	dd08      	ble.n	80002e6 <__adddf3+0x16a>
 80002d4:	f102 0c14 	add.w	ip, r2, #20
 80002d8:	f1c2 020c 	rsb	r2, r2, #12
 80002dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e0:	fa21 f102 	lsr.w	r1, r1, r2
 80002e4:	e00c      	b.n	8000300 <__adddf3+0x184>
 80002e6:	f102 0214 	add.w	r2, r2, #20
 80002ea:	bfd8      	it	le
 80002ec:	f1c2 0c20 	rsble	ip, r2, #32
 80002f0:	fa01 f102 	lsl.w	r1, r1, r2
 80002f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002f8:	bfdc      	itt	le
 80002fa:	ea41 010c 	orrle.w	r1, r1, ip
 80002fe:	4090      	lslle	r0, r2
 8000300:	1ae4      	subs	r4, r4, r3
 8000302:	bfa2      	ittt	ge
 8000304:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000308:	4329      	orrge	r1, r5
 800030a:	bd30      	popge	{r4, r5, pc}
 800030c:	ea6f 0404 	mvn.w	r4, r4
 8000310:	3c1f      	subs	r4, #31
 8000312:	da1c      	bge.n	800034e <__adddf3+0x1d2>
 8000314:	340c      	adds	r4, #12
 8000316:	dc0e      	bgt.n	8000336 <__adddf3+0x1ba>
 8000318:	f104 0414 	add.w	r4, r4, #20
 800031c:	f1c4 0220 	rsb	r2, r4, #32
 8000320:	fa20 f004 	lsr.w	r0, r0, r4
 8000324:	fa01 f302 	lsl.w	r3, r1, r2
 8000328:	ea40 0003 	orr.w	r0, r0, r3
 800032c:	fa21 f304 	lsr.w	r3, r1, r4
 8000330:	ea45 0103 	orr.w	r1, r5, r3
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f1c4 040c 	rsb	r4, r4, #12
 800033a:	f1c4 0220 	rsb	r2, r4, #32
 800033e:	fa20 f002 	lsr.w	r0, r0, r2
 8000342:	fa01 f304 	lsl.w	r3, r1, r4
 8000346:	ea40 0003 	orr.w	r0, r0, r3
 800034a:	4629      	mov	r1, r5
 800034c:	bd30      	pop	{r4, r5, pc}
 800034e:	fa21 f004 	lsr.w	r0, r1, r4
 8000352:	4629      	mov	r1, r5
 8000354:	bd30      	pop	{r4, r5, pc}
 8000356:	f094 0f00 	teq	r4, #0
 800035a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800035e:	bf06      	itte	eq
 8000360:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000364:	3401      	addeq	r4, #1
 8000366:	3d01      	subne	r5, #1
 8000368:	e74e      	b.n	8000208 <__adddf3+0x8c>
 800036a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800036e:	bf18      	it	ne
 8000370:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000374:	d029      	beq.n	80003ca <__adddf3+0x24e>
 8000376:	ea94 0f05 	teq	r4, r5
 800037a:	bf08      	it	eq
 800037c:	ea90 0f02 	teqeq	r0, r2
 8000380:	d005      	beq.n	800038e <__adddf3+0x212>
 8000382:	ea54 0c00 	orrs.w	ip, r4, r0
 8000386:	bf04      	itt	eq
 8000388:	4619      	moveq	r1, r3
 800038a:	4610      	moveq	r0, r2
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	ea91 0f03 	teq	r1, r3
 8000392:	bf1e      	ittt	ne
 8000394:	2100      	movne	r1, #0
 8000396:	2000      	movne	r0, #0
 8000398:	bd30      	popne	{r4, r5, pc}
 800039a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800039e:	d105      	bne.n	80003ac <__adddf3+0x230>
 80003a0:	0040      	lsls	r0, r0, #1
 80003a2:	4149      	adcs	r1, r1
 80003a4:	bf28      	it	cs
 80003a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003aa:	bd30      	pop	{r4, r5, pc}
 80003ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003b0:	bf3c      	itt	cc
 80003b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003b6:	bd30      	popcc	{r4, r5, pc}
 80003b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003c4:	f04f 0000 	mov.w	r0, #0
 80003c8:	bd30      	pop	{r4, r5, pc}
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf1a      	itte	ne
 80003d0:	4619      	movne	r1, r3
 80003d2:	4610      	movne	r0, r2
 80003d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003d8:	bf1c      	itt	ne
 80003da:	460b      	movne	r3, r1
 80003dc:	4602      	movne	r2, r0
 80003de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e2:	bf06      	itte	eq
 80003e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003e8:	ea91 0f03 	teqeq	r1, r3
 80003ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003f0:	bd30      	pop	{r4, r5, pc}
 80003f2:	bf00      	nop

080003f4 <__aeabi_ui2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f04f 0500 	mov.w	r5, #0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e750      	b.n	80002b4 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_i2d>:
 8000414:	f090 0f00 	teq	r0, #0
 8000418:	bf04      	itt	eq
 800041a:	2100      	moveq	r1, #0
 800041c:	4770      	bxeq	lr
 800041e:	b530      	push	{r4, r5, lr}
 8000420:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000424:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000428:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800042c:	bf48      	it	mi
 800042e:	4240      	negmi	r0, r0
 8000430:	f04f 0100 	mov.w	r1, #0
 8000434:	e73e      	b.n	80002b4 <__adddf3+0x138>
 8000436:	bf00      	nop

08000438 <__aeabi_f2d>:
 8000438:	0042      	lsls	r2, r0, #1
 800043a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800043e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000442:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000446:	bf1f      	itttt	ne
 8000448:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800044c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000450:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000454:	4770      	bxne	lr
 8000456:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800045a:	bf08      	it	eq
 800045c:	4770      	bxeq	lr
 800045e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000462:	bf04      	itt	eq
 8000464:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000468:	4770      	bxeq	lr
 800046a:	b530      	push	{r4, r5, lr}
 800046c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000470:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000474:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000478:	e71c      	b.n	80002b4 <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_ul2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f04f 0500 	mov.w	r5, #0
 800048a:	e00a      	b.n	80004a2 <__aeabi_l2d+0x16>

0800048c <__aeabi_l2d>:
 800048c:	ea50 0201 	orrs.w	r2, r0, r1
 8000490:	bf08      	it	eq
 8000492:	4770      	bxeq	lr
 8000494:	b530      	push	{r4, r5, lr}
 8000496:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800049a:	d502      	bpl.n	80004a2 <__aeabi_l2d+0x16>
 800049c:	4240      	negs	r0, r0
 800049e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004ae:	f43f aed8 	beq.w	8000262 <__adddf3+0xe6>
 80004b2:	f04f 0203 	mov.w	r2, #3
 80004b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ba:	bf18      	it	ne
 80004bc:	3203      	addne	r2, #3
 80004be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c2:	bf18      	it	ne
 80004c4:	3203      	addne	r2, #3
 80004c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d2:	fa20 f002 	lsr.w	r0, r0, r2
 80004d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004da:	ea40 000e 	orr.w	r0, r0, lr
 80004de:	fa21 f102 	lsr.w	r1, r1, r2
 80004e2:	4414      	add	r4, r2
 80004e4:	e6bd      	b.n	8000262 <__adddf3+0xe6>
 80004e6:	bf00      	nop

080004e8 <__aeabi_dmul>:
 80004e8:	b570      	push	{r4, r5, r6, lr}
 80004ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004f6:	bf1d      	ittte	ne
 80004f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004fc:	ea94 0f0c 	teqne	r4, ip
 8000500:	ea95 0f0c 	teqne	r5, ip
 8000504:	f000 f8de 	bleq	80006c4 <__aeabi_dmul+0x1dc>
 8000508:	442c      	add	r4, r5
 800050a:	ea81 0603 	eor.w	r6, r1, r3
 800050e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000512:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000516:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051a:	bf18      	it	ne
 800051c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000520:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000524:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000528:	d038      	beq.n	800059c <__aeabi_dmul+0xb4>
 800052a:	fba0 ce02 	umull	ip, lr, r0, r2
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000536:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800053a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800053e:	f04f 0600 	mov.w	r6, #0
 8000542:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000546:	f09c 0f00 	teq	ip, #0
 800054a:	bf18      	it	ne
 800054c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000550:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000554:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000558:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800055c:	d204      	bcs.n	8000568 <__aeabi_dmul+0x80>
 800055e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000562:	416d      	adcs	r5, r5
 8000564:	eb46 0606 	adc.w	r6, r6, r6
 8000568:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800056c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000570:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000574:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000578:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800057c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000580:	bf88      	it	hi
 8000582:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000586:	d81e      	bhi.n	80005c6 <__aeabi_dmul+0xde>
 8000588:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800058c:	bf08      	it	eq
 800058e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000592:	f150 0000 	adcs.w	r0, r0, #0
 8000596:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059a:	bd70      	pop	{r4, r5, r6, pc}
 800059c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005a0:	ea46 0101 	orr.w	r1, r6, r1
 80005a4:	ea40 0002 	orr.w	r0, r0, r2
 80005a8:	ea81 0103 	eor.w	r1, r1, r3
 80005ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b0:	bfc2      	ittt	gt
 80005b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005ba:	bd70      	popgt	{r4, r5, r6, pc}
 80005bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c0:	f04f 0e00 	mov.w	lr, #0
 80005c4:	3c01      	subs	r4, #1
 80005c6:	f300 80ab 	bgt.w	8000720 <__aeabi_dmul+0x238>
 80005ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ce:	bfde      	ittt	le
 80005d0:	2000      	movle	r0, #0
 80005d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005d6:	bd70      	pople	{r4, r5, r6, pc}
 80005d8:	f1c4 0400 	rsb	r4, r4, #0
 80005dc:	3c20      	subs	r4, #32
 80005de:	da35      	bge.n	800064c <__aeabi_dmul+0x164>
 80005e0:	340c      	adds	r4, #12
 80005e2:	dc1b      	bgt.n	800061c <__aeabi_dmul+0x134>
 80005e4:	f104 0414 	add.w	r4, r4, #20
 80005e8:	f1c4 0520 	rsb	r5, r4, #32
 80005ec:	fa00 f305 	lsl.w	r3, r0, r5
 80005f0:	fa20 f004 	lsr.w	r0, r0, r4
 80005f4:	fa01 f205 	lsl.w	r2, r1, r5
 80005f8:	ea40 0002 	orr.w	r0, r0, r2
 80005fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000600:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000604:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000608:	fa21 f604 	lsr.w	r6, r1, r4
 800060c:	eb42 0106 	adc.w	r1, r2, r6
 8000610:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000614:	bf08      	it	eq
 8000616:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061a:	bd70      	pop	{r4, r5, r6, pc}
 800061c:	f1c4 040c 	rsb	r4, r4, #12
 8000620:	f1c4 0520 	rsb	r5, r4, #32
 8000624:	fa00 f304 	lsl.w	r3, r0, r4
 8000628:	fa20 f005 	lsr.w	r0, r0, r5
 800062c:	fa01 f204 	lsl.w	r2, r1, r4
 8000630:	ea40 0002 	orr.w	r0, r0, r2
 8000634:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000638:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800063c:	f141 0100 	adc.w	r1, r1, #0
 8000640:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000644:	bf08      	it	eq
 8000646:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064a:	bd70      	pop	{r4, r5, r6, pc}
 800064c:	f1c4 0520 	rsb	r5, r4, #32
 8000650:	fa00 f205 	lsl.w	r2, r0, r5
 8000654:	ea4e 0e02 	orr.w	lr, lr, r2
 8000658:	fa20 f304 	lsr.w	r3, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea43 0302 	orr.w	r3, r3, r2
 8000664:	fa21 f004 	lsr.w	r0, r1, r4
 8000668:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800066c:	fa21 f204 	lsr.w	r2, r1, r4
 8000670:	ea20 0002 	bic.w	r0, r0, r2
 8000674:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f094 0f00 	teq	r4, #0
 8000688:	d10f      	bne.n	80006aa <__aeabi_dmul+0x1c2>
 800068a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800068e:	0040      	lsls	r0, r0, #1
 8000690:	eb41 0101 	adc.w	r1, r1, r1
 8000694:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3c01      	subeq	r4, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1a6>
 800069e:	ea41 0106 	orr.w	r1, r1, r6
 80006a2:	f095 0f00 	teq	r5, #0
 80006a6:	bf18      	it	ne
 80006a8:	4770      	bxne	lr
 80006aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006ae:	0052      	lsls	r2, r2, #1
 80006b0:	eb43 0303 	adc.w	r3, r3, r3
 80006b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006b8:	bf08      	it	eq
 80006ba:	3d01      	subeq	r5, #1
 80006bc:	d0f7      	beq.n	80006ae <__aeabi_dmul+0x1c6>
 80006be:	ea43 0306 	orr.w	r3, r3, r6
 80006c2:	4770      	bx	lr
 80006c4:	ea94 0f0c 	teq	r4, ip
 80006c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006cc:	bf18      	it	ne
 80006ce:	ea95 0f0c 	teqne	r5, ip
 80006d2:	d00c      	beq.n	80006ee <__aeabi_dmul+0x206>
 80006d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d8:	bf18      	it	ne
 80006da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006de:	d1d1      	bne.n	8000684 <__aeabi_dmul+0x19c>
 80006e0:	ea81 0103 	eor.w	r1, r1, r3
 80006e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e8:	f04f 0000 	mov.w	r0, #0
 80006ec:	bd70      	pop	{r4, r5, r6, pc}
 80006ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f2:	bf06      	itte	eq
 80006f4:	4610      	moveq	r0, r2
 80006f6:	4619      	moveq	r1, r3
 80006f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006fc:	d019      	beq.n	8000732 <__aeabi_dmul+0x24a>
 80006fe:	ea94 0f0c 	teq	r4, ip
 8000702:	d102      	bne.n	800070a <__aeabi_dmul+0x222>
 8000704:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000708:	d113      	bne.n	8000732 <__aeabi_dmul+0x24a>
 800070a:	ea95 0f0c 	teq	r5, ip
 800070e:	d105      	bne.n	800071c <__aeabi_dmul+0x234>
 8000710:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000714:	bf1c      	itt	ne
 8000716:	4610      	movne	r0, r2
 8000718:	4619      	movne	r1, r3
 800071a:	d10a      	bne.n	8000732 <__aeabi_dmul+0x24a>
 800071c:	ea81 0103 	eor.w	r1, r1, r3
 8000720:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000724:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000728:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800072c:	f04f 0000 	mov.w	r0, #0
 8000730:	bd70      	pop	{r4, r5, r6, pc}
 8000732:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000736:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800073a:	bd70      	pop	{r4, r5, r6, pc}

0800073c <__aeabi_ddiv>:
 800073c:	b570      	push	{r4, r5, r6, lr}
 800073e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000742:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000746:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074a:	bf1d      	ittte	ne
 800074c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000750:	ea94 0f0c 	teqne	r4, ip
 8000754:	ea95 0f0c 	teqne	r5, ip
 8000758:	f000 f8a7 	bleq	80008aa <__aeabi_ddiv+0x16e>
 800075c:	eba4 0405 	sub.w	r4, r4, r5
 8000760:	ea81 0e03 	eor.w	lr, r1, r3
 8000764:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000768:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800076c:	f000 8088 	beq.w	8000880 <__aeabi_ddiv+0x144>
 8000770:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000774:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000778:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800077c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000780:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000784:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000788:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800078c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000790:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000794:	429d      	cmp	r5, r3
 8000796:	bf08      	it	eq
 8000798:	4296      	cmpeq	r6, r2
 800079a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800079e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007a2:	d202      	bcs.n	80007aa <__aeabi_ddiv+0x6e>
 80007a4:	085b      	lsrs	r3, r3, #1
 80007a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007aa:	1ab6      	subs	r6, r6, r2
 80007ac:	eb65 0503 	sbc.w	r5, r5, r3
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007be:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007c6:	bf22      	ittt	cs
 80007c8:	1ab6      	subcs	r6, r6, r2
 80007ca:	4675      	movcs	r5, lr
 80007cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d0:	085b      	lsrs	r3, r3, #1
 80007d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007de:	bf22      	ittt	cs
 80007e0:	1ab6      	subcs	r6, r6, r2
 80007e2:	4675      	movcs	r5, lr
 80007e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007e8:	085b      	lsrs	r3, r3, #1
 80007ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007f6:	bf22      	ittt	cs
 80007f8:	1ab6      	subcs	r6, r6, r2
 80007fa:	4675      	movcs	r5, lr
 80007fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000800:	085b      	lsrs	r3, r3, #1
 8000802:	ea4f 0232 	mov.w	r2, r2, rrx
 8000806:	ebb6 0e02 	subs.w	lr, r6, r2
 800080a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800080e:	bf22      	ittt	cs
 8000810:	1ab6      	subcs	r6, r6, r2
 8000812:	4675      	movcs	r5, lr
 8000814:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000818:	ea55 0e06 	orrs.w	lr, r5, r6
 800081c:	d018      	beq.n	8000850 <__aeabi_ddiv+0x114>
 800081e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000822:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000826:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800082e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000832:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000836:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083a:	d1c0      	bne.n	80007be <__aeabi_ddiv+0x82>
 800083c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000840:	d10b      	bne.n	800085a <__aeabi_ddiv+0x11e>
 8000842:	ea41 0100 	orr.w	r1, r1, r0
 8000846:	f04f 0000 	mov.w	r0, #0
 800084a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800084e:	e7b6      	b.n	80007be <__aeabi_ddiv+0x82>
 8000850:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000854:	bf04      	itt	eq
 8000856:	4301      	orreq	r1, r0
 8000858:	2000      	moveq	r0, #0
 800085a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800085e:	bf88      	it	hi
 8000860:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000864:	f63f aeaf 	bhi.w	80005c6 <__aeabi_dmul+0xde>
 8000868:	ebb5 0c03 	subs.w	ip, r5, r3
 800086c:	bf04      	itt	eq
 800086e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000872:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000876:	f150 0000 	adcs.w	r0, r0, #0
 800087a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800087e:	bd70      	pop	{r4, r5, r6, pc}
 8000880:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000884:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000888:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800088c:	bfc2      	ittt	gt
 800088e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000892:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000896:	bd70      	popgt	{r4, r5, r6, pc}
 8000898:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800089c:	f04f 0e00 	mov.w	lr, #0
 80008a0:	3c01      	subs	r4, #1
 80008a2:	e690      	b.n	80005c6 <__aeabi_dmul+0xde>
 80008a4:	ea45 0e06 	orr.w	lr, r5, r6
 80008a8:	e68d      	b.n	80005c6 <__aeabi_dmul+0xde>
 80008aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008ae:	ea94 0f0c 	teq	r4, ip
 80008b2:	bf08      	it	eq
 80008b4:	ea95 0f0c 	teqeq	r5, ip
 80008b8:	f43f af3b 	beq.w	8000732 <__aeabi_dmul+0x24a>
 80008bc:	ea94 0f0c 	teq	r4, ip
 80008c0:	d10a      	bne.n	80008d8 <__aeabi_ddiv+0x19c>
 80008c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008c6:	f47f af34 	bne.w	8000732 <__aeabi_dmul+0x24a>
 80008ca:	ea95 0f0c 	teq	r5, ip
 80008ce:	f47f af25 	bne.w	800071c <__aeabi_dmul+0x234>
 80008d2:	4610      	mov	r0, r2
 80008d4:	4619      	mov	r1, r3
 80008d6:	e72c      	b.n	8000732 <__aeabi_dmul+0x24a>
 80008d8:	ea95 0f0c 	teq	r5, ip
 80008dc:	d106      	bne.n	80008ec <__aeabi_ddiv+0x1b0>
 80008de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e2:	f43f aefd 	beq.w	80006e0 <__aeabi_dmul+0x1f8>
 80008e6:	4610      	mov	r0, r2
 80008e8:	4619      	mov	r1, r3
 80008ea:	e722      	b.n	8000732 <__aeabi_dmul+0x24a>
 80008ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f0:	bf18      	it	ne
 80008f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008f6:	f47f aec5 	bne.w	8000684 <__aeabi_dmul+0x19c>
 80008fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008fe:	f47f af0d 	bne.w	800071c <__aeabi_dmul+0x234>
 8000902:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000906:	f47f aeeb 	bne.w	80006e0 <__aeabi_dmul+0x1f8>
 800090a:	e712      	b.n	8000732 <__aeabi_dmul+0x24a>

0800090c <__aeabi_frsub>:
 800090c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000910:	e002      	b.n	8000918 <__addsf3>
 8000912:	bf00      	nop

08000914 <__aeabi_fsub>:
 8000914:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000918 <__addsf3>:
 8000918:	0042      	lsls	r2, r0, #1
 800091a:	bf1f      	itttt	ne
 800091c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000920:	ea92 0f03 	teqne	r2, r3
 8000924:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000928:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800092c:	d06a      	beq.n	8000a04 <__addsf3+0xec>
 800092e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000932:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000936:	bfc1      	itttt	gt
 8000938:	18d2      	addgt	r2, r2, r3
 800093a:	4041      	eorgt	r1, r0
 800093c:	4048      	eorgt	r0, r1
 800093e:	4041      	eorgt	r1, r0
 8000940:	bfb8      	it	lt
 8000942:	425b      	neglt	r3, r3
 8000944:	2b19      	cmp	r3, #25
 8000946:	bf88      	it	hi
 8000948:	4770      	bxhi	lr
 800094a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800094e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000952:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000956:	bf18      	it	ne
 8000958:	4240      	negne	r0, r0
 800095a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800095e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000962:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000966:	bf18      	it	ne
 8000968:	4249      	negne	r1, r1
 800096a:	ea92 0f03 	teq	r2, r3
 800096e:	d03f      	beq.n	80009f0 <__addsf3+0xd8>
 8000970:	f1a2 0201 	sub.w	r2, r2, #1
 8000974:	fa41 fc03 	asr.w	ip, r1, r3
 8000978:	eb10 000c 	adds.w	r0, r0, ip
 800097c:	f1c3 0320 	rsb	r3, r3, #32
 8000980:	fa01 f103 	lsl.w	r1, r1, r3
 8000984:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000988:	d502      	bpl.n	8000990 <__addsf3+0x78>
 800098a:	4249      	negs	r1, r1
 800098c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000990:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000994:	d313      	bcc.n	80009be <__addsf3+0xa6>
 8000996:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800099a:	d306      	bcc.n	80009aa <__addsf3+0x92>
 800099c:	0840      	lsrs	r0, r0, #1
 800099e:	ea4f 0131 	mov.w	r1, r1, rrx
 80009a2:	f102 0201 	add.w	r2, r2, #1
 80009a6:	2afe      	cmp	r2, #254	; 0xfe
 80009a8:	d251      	bcs.n	8000a4e <__addsf3+0x136>
 80009aa:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80009ae:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80009b2:	bf08      	it	eq
 80009b4:	f020 0001 	biceq.w	r0, r0, #1
 80009b8:	ea40 0003 	orr.w	r0, r0, r3
 80009bc:	4770      	bx	lr
 80009be:	0049      	lsls	r1, r1, #1
 80009c0:	eb40 0000 	adc.w	r0, r0, r0
 80009c4:	3a01      	subs	r2, #1
 80009c6:	bf28      	it	cs
 80009c8:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 80009cc:	d2ed      	bcs.n	80009aa <__addsf3+0x92>
 80009ce:	fab0 fc80 	clz	ip, r0
 80009d2:	f1ac 0c08 	sub.w	ip, ip, #8
 80009d6:	ebb2 020c 	subs.w	r2, r2, ip
 80009da:	fa00 f00c 	lsl.w	r0, r0, ip
 80009de:	bfaa      	itet	ge
 80009e0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80009e4:	4252      	neglt	r2, r2
 80009e6:	4318      	orrge	r0, r3
 80009e8:	bfbc      	itt	lt
 80009ea:	40d0      	lsrlt	r0, r2
 80009ec:	4318      	orrlt	r0, r3
 80009ee:	4770      	bx	lr
 80009f0:	f092 0f00 	teq	r2, #0
 80009f4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80009f8:	bf06      	itte	eq
 80009fa:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80009fe:	3201      	addeq	r2, #1
 8000a00:	3b01      	subne	r3, #1
 8000a02:	e7b5      	b.n	8000970 <__addsf3+0x58>
 8000a04:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a08:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a0c:	bf18      	it	ne
 8000a0e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a12:	d021      	beq.n	8000a58 <__addsf3+0x140>
 8000a14:	ea92 0f03 	teq	r2, r3
 8000a18:	d004      	beq.n	8000a24 <__addsf3+0x10c>
 8000a1a:	f092 0f00 	teq	r2, #0
 8000a1e:	bf08      	it	eq
 8000a20:	4608      	moveq	r0, r1
 8000a22:	4770      	bx	lr
 8000a24:	ea90 0f01 	teq	r0, r1
 8000a28:	bf1c      	itt	ne
 8000a2a:	2000      	movne	r0, #0
 8000a2c:	4770      	bxne	lr
 8000a2e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000a32:	d104      	bne.n	8000a3e <__addsf3+0x126>
 8000a34:	0040      	lsls	r0, r0, #1
 8000a36:	bf28      	it	cs
 8000a38:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000a3c:	4770      	bx	lr
 8000a3e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000a42:	bf3c      	itt	cc
 8000a44:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000a48:	4770      	bxcc	lr
 8000a4a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a4e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000a52:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a56:	4770      	bx	lr
 8000a58:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000a5c:	bf16      	itet	ne
 8000a5e:	4608      	movne	r0, r1
 8000a60:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000a64:	4601      	movne	r1, r0
 8000a66:	0242      	lsls	r2, r0, #9
 8000a68:	bf06      	itte	eq
 8000a6a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000a6e:	ea90 0f01 	teqeq	r0, r1
 8000a72:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000a76:	4770      	bx	lr

08000a78 <__aeabi_ui2f>:
 8000a78:	f04f 0300 	mov.w	r3, #0
 8000a7c:	e004      	b.n	8000a88 <__aeabi_i2f+0x8>
 8000a7e:	bf00      	nop

08000a80 <__aeabi_i2f>:
 8000a80:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000a84:	bf48      	it	mi
 8000a86:	4240      	negmi	r0, r0
 8000a88:	ea5f 0c00 	movs.w	ip, r0
 8000a8c:	bf08      	it	eq
 8000a8e:	4770      	bxeq	lr
 8000a90:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000a94:	4601      	mov	r1, r0
 8000a96:	f04f 0000 	mov.w	r0, #0
 8000a9a:	e01c      	b.n	8000ad6 <__aeabi_l2f+0x2a>

08000a9c <__aeabi_ul2f>:
 8000a9c:	ea50 0201 	orrs.w	r2, r0, r1
 8000aa0:	bf08      	it	eq
 8000aa2:	4770      	bxeq	lr
 8000aa4:	f04f 0300 	mov.w	r3, #0
 8000aa8:	e00a      	b.n	8000ac0 <__aeabi_l2f+0x14>
 8000aaa:	bf00      	nop

08000aac <__aeabi_l2f>:
 8000aac:	ea50 0201 	orrs.w	r2, r0, r1
 8000ab0:	bf08      	it	eq
 8000ab2:	4770      	bxeq	lr
 8000ab4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000ab8:	d502      	bpl.n	8000ac0 <__aeabi_l2f+0x14>
 8000aba:	4240      	negs	r0, r0
 8000abc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ac0:	ea5f 0c01 	movs.w	ip, r1
 8000ac4:	bf02      	ittt	eq
 8000ac6:	4684      	moveq	ip, r0
 8000ac8:	4601      	moveq	r1, r0
 8000aca:	2000      	moveq	r0, #0
 8000acc:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000ad0:	bf08      	it	eq
 8000ad2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000ad6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000ada:	fabc f28c 	clz	r2, ip
 8000ade:	3a08      	subs	r2, #8
 8000ae0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ae4:	db10      	blt.n	8000b08 <__aeabi_l2f+0x5c>
 8000ae6:	fa01 fc02 	lsl.w	ip, r1, r2
 8000aea:	4463      	add	r3, ip
 8000aec:	fa00 fc02 	lsl.w	ip, r0, r2
 8000af0:	f1c2 0220 	rsb	r2, r2, #32
 8000af4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000af8:	fa20 f202 	lsr.w	r2, r0, r2
 8000afc:	eb43 0002 	adc.w	r0, r3, r2
 8000b00:	bf08      	it	eq
 8000b02:	f020 0001 	biceq.w	r0, r0, #1
 8000b06:	4770      	bx	lr
 8000b08:	f102 0220 	add.w	r2, r2, #32
 8000b0c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b10:	f1c2 0220 	rsb	r2, r2, #32
 8000b14:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000b18:	fa21 f202 	lsr.w	r2, r1, r2
 8000b1c:	eb43 0002 	adc.w	r0, r3, r2
 8000b20:	bf08      	it	eq
 8000b22:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000b26:	4770      	bx	lr

08000b28 <__aeabi_fmul>:
 8000b28:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000b2c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000b30:	bf1e      	ittt	ne
 8000b32:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000b36:	ea92 0f0c 	teqne	r2, ip
 8000b3a:	ea93 0f0c 	teqne	r3, ip
 8000b3e:	d06f      	beq.n	8000c20 <__aeabi_fmul+0xf8>
 8000b40:	441a      	add	r2, r3
 8000b42:	ea80 0c01 	eor.w	ip, r0, r1
 8000b46:	0240      	lsls	r0, r0, #9
 8000b48:	bf18      	it	ne
 8000b4a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000b4e:	d01e      	beq.n	8000b8e <__aeabi_fmul+0x66>
 8000b50:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000b54:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000b58:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000b5c:	fba0 3101 	umull	r3, r1, r0, r1
 8000b60:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000b64:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000b68:	bf3e      	ittt	cc
 8000b6a:	0049      	lslcc	r1, r1, #1
 8000b6c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000b70:	005b      	lslcc	r3, r3, #1
 8000b72:	ea40 0001 	orr.w	r0, r0, r1
 8000b76:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000b7a:	2afd      	cmp	r2, #253	; 0xfd
 8000b7c:	d81d      	bhi.n	8000bba <__aeabi_fmul+0x92>
 8000b7e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000b82:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b86:	bf08      	it	eq
 8000b88:	f020 0001 	biceq.w	r0, r0, #1
 8000b8c:	4770      	bx	lr
 8000b8e:	f090 0f00 	teq	r0, #0
 8000b92:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000b96:	bf08      	it	eq
 8000b98:	0249      	lsleq	r1, r1, #9
 8000b9a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000b9e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000ba2:	3a7f      	subs	r2, #127	; 0x7f
 8000ba4:	bfc2      	ittt	gt
 8000ba6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000baa:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000bae:	4770      	bxgt	lr
 8000bb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bb4:	f04f 0300 	mov.w	r3, #0
 8000bb8:	3a01      	subs	r2, #1
 8000bba:	dc5d      	bgt.n	8000c78 <__aeabi_fmul+0x150>
 8000bbc:	f112 0f19 	cmn.w	r2, #25
 8000bc0:	bfdc      	itt	le
 8000bc2:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000bc6:	4770      	bxle	lr
 8000bc8:	f1c2 0200 	rsb	r2, r2, #0
 8000bcc:	0041      	lsls	r1, r0, #1
 8000bce:	fa21 f102 	lsr.w	r1, r1, r2
 8000bd2:	f1c2 0220 	rsb	r2, r2, #32
 8000bd6:	fa00 fc02 	lsl.w	ip, r0, r2
 8000bda:	ea5f 0031 	movs.w	r0, r1, rrx
 8000bde:	f140 0000 	adc.w	r0, r0, #0
 8000be2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000be6:	bf08      	it	eq
 8000be8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000bec:	4770      	bx	lr
 8000bee:	f092 0f00 	teq	r2, #0
 8000bf2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000bf6:	bf02      	ittt	eq
 8000bf8:	0040      	lsleq	r0, r0, #1
 8000bfa:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000bfe:	3a01      	subeq	r2, #1
 8000c00:	d0f9      	beq.n	8000bf6 <__aeabi_fmul+0xce>
 8000c02:	ea40 000c 	orr.w	r0, r0, ip
 8000c06:	f093 0f00 	teq	r3, #0
 8000c0a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c0e:	bf02      	ittt	eq
 8000c10:	0049      	lsleq	r1, r1, #1
 8000c12:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000c16:	3b01      	subeq	r3, #1
 8000c18:	d0f9      	beq.n	8000c0e <__aeabi_fmul+0xe6>
 8000c1a:	ea41 010c 	orr.w	r1, r1, ip
 8000c1e:	e78f      	b.n	8000b40 <__aeabi_fmul+0x18>
 8000c20:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000c24:	ea92 0f0c 	teq	r2, ip
 8000c28:	bf18      	it	ne
 8000c2a:	ea93 0f0c 	teqne	r3, ip
 8000c2e:	d00a      	beq.n	8000c46 <__aeabi_fmul+0x11e>
 8000c30:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000c34:	bf18      	it	ne
 8000c36:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000c3a:	d1d8      	bne.n	8000bee <__aeabi_fmul+0xc6>
 8000c3c:	ea80 0001 	eor.w	r0, r0, r1
 8000c40:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000c44:	4770      	bx	lr
 8000c46:	f090 0f00 	teq	r0, #0
 8000c4a:	bf17      	itett	ne
 8000c4c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000c50:	4608      	moveq	r0, r1
 8000c52:	f091 0f00 	teqne	r1, #0
 8000c56:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000c5a:	d014      	beq.n	8000c86 <__aeabi_fmul+0x15e>
 8000c5c:	ea92 0f0c 	teq	r2, ip
 8000c60:	d101      	bne.n	8000c66 <__aeabi_fmul+0x13e>
 8000c62:	0242      	lsls	r2, r0, #9
 8000c64:	d10f      	bne.n	8000c86 <__aeabi_fmul+0x15e>
 8000c66:	ea93 0f0c 	teq	r3, ip
 8000c6a:	d103      	bne.n	8000c74 <__aeabi_fmul+0x14c>
 8000c6c:	024b      	lsls	r3, r1, #9
 8000c6e:	bf18      	it	ne
 8000c70:	4608      	movne	r0, r1
 8000c72:	d108      	bne.n	8000c86 <__aeabi_fmul+0x15e>
 8000c74:	ea80 0001 	eor.w	r0, r0, r1
 8000c78:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c8a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000c8e:	4770      	bx	lr

08000c90 <__aeabi_fdiv>:
 8000c90:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000c94:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000c98:	bf1e      	ittt	ne
 8000c9a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000c9e:	ea92 0f0c 	teqne	r2, ip
 8000ca2:	ea93 0f0c 	teqne	r3, ip
 8000ca6:	d069      	beq.n	8000d7c <__aeabi_fdiv+0xec>
 8000ca8:	eba2 0203 	sub.w	r2, r2, r3
 8000cac:	ea80 0c01 	eor.w	ip, r0, r1
 8000cb0:	0249      	lsls	r1, r1, #9
 8000cb2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000cb6:	d037      	beq.n	8000d28 <__aeabi_fdiv+0x98>
 8000cb8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000cbc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000cc0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000cc4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000cc8:	428b      	cmp	r3, r1
 8000cca:	bf38      	it	cc
 8000ccc:	005b      	lslcc	r3, r3, #1
 8000cce:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000cd2:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000cd6:	428b      	cmp	r3, r1
 8000cd8:	bf24      	itt	cs
 8000cda:	1a5b      	subcs	r3, r3, r1
 8000cdc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000ce0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ce4:	bf24      	itt	cs
 8000ce6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000cea:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000cee:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000cf2:	bf24      	itt	cs
 8000cf4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000cf8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000cfc:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000d00:	bf24      	itt	cs
 8000d02:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000d06:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000d0a:	011b      	lsls	r3, r3, #4
 8000d0c:	bf18      	it	ne
 8000d0e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000d12:	d1e0      	bne.n	8000cd6 <__aeabi_fdiv+0x46>
 8000d14:	2afd      	cmp	r2, #253	; 0xfd
 8000d16:	f63f af50 	bhi.w	8000bba <__aeabi_fmul+0x92>
 8000d1a:	428b      	cmp	r3, r1
 8000d1c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d20:	bf08      	it	eq
 8000d22:	f020 0001 	biceq.w	r0, r0, #1
 8000d26:	4770      	bx	lr
 8000d28:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d2c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d30:	327f      	adds	r2, #127	; 0x7f
 8000d32:	bfc2      	ittt	gt
 8000d34:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d38:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d3c:	4770      	bxgt	lr
 8000d3e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d42:	f04f 0300 	mov.w	r3, #0
 8000d46:	3a01      	subs	r2, #1
 8000d48:	e737      	b.n	8000bba <__aeabi_fmul+0x92>
 8000d4a:	f092 0f00 	teq	r2, #0
 8000d4e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d52:	bf02      	ittt	eq
 8000d54:	0040      	lsleq	r0, r0, #1
 8000d56:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d5a:	3a01      	subeq	r2, #1
 8000d5c:	d0f9      	beq.n	8000d52 <__aeabi_fdiv+0xc2>
 8000d5e:	ea40 000c 	orr.w	r0, r0, ip
 8000d62:	f093 0f00 	teq	r3, #0
 8000d66:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d6a:	bf02      	ittt	eq
 8000d6c:	0049      	lsleq	r1, r1, #1
 8000d6e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d72:	3b01      	subeq	r3, #1
 8000d74:	d0f9      	beq.n	8000d6a <__aeabi_fdiv+0xda>
 8000d76:	ea41 010c 	orr.w	r1, r1, ip
 8000d7a:	e795      	b.n	8000ca8 <__aeabi_fdiv+0x18>
 8000d7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000d80:	ea92 0f0c 	teq	r2, ip
 8000d84:	d108      	bne.n	8000d98 <__aeabi_fdiv+0x108>
 8000d86:	0242      	lsls	r2, r0, #9
 8000d88:	f47f af7d 	bne.w	8000c86 <__aeabi_fmul+0x15e>
 8000d8c:	ea93 0f0c 	teq	r3, ip
 8000d90:	f47f af70 	bne.w	8000c74 <__aeabi_fmul+0x14c>
 8000d94:	4608      	mov	r0, r1
 8000d96:	e776      	b.n	8000c86 <__aeabi_fmul+0x15e>
 8000d98:	ea93 0f0c 	teq	r3, ip
 8000d9c:	d104      	bne.n	8000da8 <__aeabi_fdiv+0x118>
 8000d9e:	024b      	lsls	r3, r1, #9
 8000da0:	f43f af4c 	beq.w	8000c3c <__aeabi_fmul+0x114>
 8000da4:	4608      	mov	r0, r1
 8000da6:	e76e      	b.n	8000c86 <__aeabi_fmul+0x15e>
 8000da8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000dac:	bf18      	it	ne
 8000dae:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000db2:	d1ca      	bne.n	8000d4a <__aeabi_fdiv+0xba>
 8000db4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000db8:	f47f af5c 	bne.w	8000c74 <__aeabi_fmul+0x14c>
 8000dbc:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000dc0:	f47f af3c 	bne.w	8000c3c <__aeabi_fmul+0x114>
 8000dc4:	e75f      	b.n	8000c86 <__aeabi_fmul+0x15e>
 8000dc6:	bf00      	nop

08000dc8 <__gesf2>:
 8000dc8:	f04f 3cff 	mov.w	ip, #4294967295
 8000dcc:	e006      	b.n	8000ddc <__cmpsf2+0x4>
 8000dce:	bf00      	nop

08000dd0 <__lesf2>:
 8000dd0:	f04f 0c01 	mov.w	ip, #1
 8000dd4:	e002      	b.n	8000ddc <__cmpsf2+0x4>
 8000dd6:	bf00      	nop

08000dd8 <__cmpsf2>:
 8000dd8:	f04f 0c01 	mov.w	ip, #1
 8000ddc:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000de0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000de4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000de8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000dec:	bf18      	it	ne
 8000dee:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000df2:	d011      	beq.n	8000e18 <__cmpsf2+0x40>
 8000df4:	b001      	add	sp, #4
 8000df6:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000dfa:	bf18      	it	ne
 8000dfc:	ea90 0f01 	teqne	r0, r1
 8000e00:	bf58      	it	pl
 8000e02:	ebb2 0003 	subspl.w	r0, r2, r3
 8000e06:	bf88      	it	hi
 8000e08:	17c8      	asrhi	r0, r1, #31
 8000e0a:	bf38      	it	cc
 8000e0c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000e10:	bf18      	it	ne
 8000e12:	f040 0001 	orrne.w	r0, r0, #1
 8000e16:	4770      	bx	lr
 8000e18:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e1c:	d102      	bne.n	8000e24 <__cmpsf2+0x4c>
 8000e1e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000e22:	d105      	bne.n	8000e30 <__cmpsf2+0x58>
 8000e24:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000e28:	d1e4      	bne.n	8000df4 <__cmpsf2+0x1c>
 8000e2a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000e2e:	d0e1      	beq.n	8000df4 <__cmpsf2+0x1c>
 8000e30:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000e34:	4770      	bx	lr
 8000e36:	bf00      	nop

08000e38 <__aeabi_cfrcmple>:
 8000e38:	4684      	mov	ip, r0
 8000e3a:	4608      	mov	r0, r1
 8000e3c:	4661      	mov	r1, ip
 8000e3e:	e7ff      	b.n	8000e40 <__aeabi_cfcmpeq>

08000e40 <__aeabi_cfcmpeq>:
 8000e40:	b50f      	push	{r0, r1, r2, r3, lr}
 8000e42:	f7ff ffc9 	bl	8000dd8 <__cmpsf2>
 8000e46:	2800      	cmp	r0, #0
 8000e48:	bf48      	it	mi
 8000e4a:	f110 0f00 	cmnmi.w	r0, #0
 8000e4e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000e50 <__aeabi_fcmpeq>:
 8000e50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e54:	f7ff fff4 	bl	8000e40 <__aeabi_cfcmpeq>
 8000e58:	bf0c      	ite	eq
 8000e5a:	2001      	moveq	r0, #1
 8000e5c:	2000      	movne	r0, #0
 8000e5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e62:	bf00      	nop

08000e64 <__aeabi_fcmplt>:
 8000e64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e68:	f7ff ffea 	bl	8000e40 <__aeabi_cfcmpeq>
 8000e6c:	bf34      	ite	cc
 8000e6e:	2001      	movcc	r0, #1
 8000e70:	2000      	movcs	r0, #0
 8000e72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e76:	bf00      	nop

08000e78 <__aeabi_fcmple>:
 8000e78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e7c:	f7ff ffe0 	bl	8000e40 <__aeabi_cfcmpeq>
 8000e80:	bf94      	ite	ls
 8000e82:	2001      	movls	r0, #1
 8000e84:	2000      	movhi	r0, #0
 8000e86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e8a:	bf00      	nop

08000e8c <__aeabi_fcmpge>:
 8000e8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e90:	f7ff ffd2 	bl	8000e38 <__aeabi_cfrcmple>
 8000e94:	bf94      	ite	ls
 8000e96:	2001      	movls	r0, #1
 8000e98:	2000      	movhi	r0, #0
 8000e9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e9e:	bf00      	nop

08000ea0 <__aeabi_fcmpgt>:
 8000ea0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ea4:	f7ff ffc8 	bl	8000e38 <__aeabi_cfrcmple>
 8000ea8:	bf34      	ite	cc
 8000eaa:	2001      	movcc	r0, #1
 8000eac:	2000      	movcs	r0, #0
 8000eae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000eb2:	bf00      	nop

08000eb4 <__aeabi_f2uiz>:
 8000eb4:	0042      	lsls	r2, r0, #1
 8000eb6:	d20e      	bcs.n	8000ed6 <__aeabi_f2uiz+0x22>
 8000eb8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000ebc:	d30b      	bcc.n	8000ed6 <__aeabi_f2uiz+0x22>
 8000ebe:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000ec2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000ec6:	d409      	bmi.n	8000edc <__aeabi_f2uiz+0x28>
 8000ec8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000ecc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ed0:	fa23 f002 	lsr.w	r0, r3, r2
 8000ed4:	4770      	bx	lr
 8000ed6:	f04f 0000 	mov.w	r0, #0
 8000eda:	4770      	bx	lr
 8000edc:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000ee0:	d101      	bne.n	8000ee6 <__aeabi_f2uiz+0x32>
 8000ee2:	0242      	lsls	r2, r0, #9
 8000ee4:	d102      	bne.n	8000eec <__aeabi_f2uiz+0x38>
 8000ee6:	f04f 30ff 	mov.w	r0, #4294967295
 8000eea:	4770      	bx	lr
 8000eec:	f04f 0000 	mov.w	r0, #0
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop

08000ef4 <strlen>:
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000efa:	2a00      	cmp	r2, #0
 8000efc:	d1fb      	bne.n	8000ef6 <strlen+0x2>
 8000efe:	1a18      	subs	r0, r3, r0
 8000f00:	3801      	subs	r0, #1
 8000f02:	4770      	bx	lr

08000f04 <__gedf2>:
 8000f04:	f04f 3cff 	mov.w	ip, #4294967295
 8000f08:	e006      	b.n	8000f18 <__cmpdf2+0x4>
 8000f0a:	bf00      	nop

08000f0c <__ledf2>:
 8000f0c:	f04f 0c01 	mov.w	ip, #1
 8000f10:	e002      	b.n	8000f18 <__cmpdf2+0x4>
 8000f12:	bf00      	nop

08000f14 <__cmpdf2>:
 8000f14:	f04f 0c01 	mov.w	ip, #1
 8000f18:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f1c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000f20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000f24:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000f28:	bf18      	it	ne
 8000f2a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000f2e:	d01b      	beq.n	8000f68 <__cmpdf2+0x54>
 8000f30:	b001      	add	sp, #4
 8000f32:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000f36:	bf0c      	ite	eq
 8000f38:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000f3c:	ea91 0f03 	teqne	r1, r3
 8000f40:	bf02      	ittt	eq
 8000f42:	ea90 0f02 	teqeq	r0, r2
 8000f46:	2000      	moveq	r0, #0
 8000f48:	4770      	bxeq	lr
 8000f4a:	f110 0f00 	cmn.w	r0, #0
 8000f4e:	ea91 0f03 	teq	r1, r3
 8000f52:	bf58      	it	pl
 8000f54:	4299      	cmppl	r1, r3
 8000f56:	bf08      	it	eq
 8000f58:	4290      	cmpeq	r0, r2
 8000f5a:	bf2c      	ite	cs
 8000f5c:	17d8      	asrcs	r0, r3, #31
 8000f5e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000f62:	f040 0001 	orr.w	r0, r0, #1
 8000f66:	4770      	bx	lr
 8000f68:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000f6c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000f70:	d102      	bne.n	8000f78 <__cmpdf2+0x64>
 8000f72:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000f76:	d107      	bne.n	8000f88 <__cmpdf2+0x74>
 8000f78:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000f7c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000f80:	d1d6      	bne.n	8000f30 <__cmpdf2+0x1c>
 8000f82:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000f86:	d0d3      	beq.n	8000f30 <__cmpdf2+0x1c>
 8000f88:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop

08000f90 <__aeabi_cdrcmple>:
 8000f90:	4684      	mov	ip, r0
 8000f92:	4610      	mov	r0, r2
 8000f94:	4662      	mov	r2, ip
 8000f96:	468c      	mov	ip, r1
 8000f98:	4619      	mov	r1, r3
 8000f9a:	4663      	mov	r3, ip
 8000f9c:	e000      	b.n	8000fa0 <__aeabi_cdcmpeq>
 8000f9e:	bf00      	nop

08000fa0 <__aeabi_cdcmpeq>:
 8000fa0:	b501      	push	{r0, lr}
 8000fa2:	f7ff ffb7 	bl	8000f14 <__cmpdf2>
 8000fa6:	2800      	cmp	r0, #0
 8000fa8:	bf48      	it	mi
 8000faa:	f110 0f00 	cmnmi.w	r0, #0
 8000fae:	bd01      	pop	{r0, pc}

08000fb0 <__aeabi_dcmpeq>:
 8000fb0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fb4:	f7ff fff4 	bl	8000fa0 <__aeabi_cdcmpeq>
 8000fb8:	bf0c      	ite	eq
 8000fba:	2001      	moveq	r0, #1
 8000fbc:	2000      	movne	r0, #0
 8000fbe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fc2:	bf00      	nop

08000fc4 <__aeabi_dcmplt>:
 8000fc4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fc8:	f7ff ffea 	bl	8000fa0 <__aeabi_cdcmpeq>
 8000fcc:	bf34      	ite	cc
 8000fce:	2001      	movcc	r0, #1
 8000fd0:	2000      	movcs	r0, #0
 8000fd2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fd6:	bf00      	nop

08000fd8 <__aeabi_dcmple>:
 8000fd8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fdc:	f7ff ffe0 	bl	8000fa0 <__aeabi_cdcmpeq>
 8000fe0:	bf94      	ite	ls
 8000fe2:	2001      	movls	r0, #1
 8000fe4:	2000      	movhi	r0, #0
 8000fe6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fea:	bf00      	nop

08000fec <__aeabi_dcmpge>:
 8000fec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ff0:	f7ff ffce 	bl	8000f90 <__aeabi_cdrcmple>
 8000ff4:	bf94      	ite	ls
 8000ff6:	2001      	movls	r0, #1
 8000ff8:	2000      	movhi	r0, #0
 8000ffa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ffe:	bf00      	nop

08001000 <__aeabi_dcmpgt>:
 8001000:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001004:	f7ff ffc4 	bl	8000f90 <__aeabi_cdrcmple>
 8001008:	bf34      	ite	cc
 800100a:	2001      	movcc	r0, #1
 800100c:	2000      	movcs	r0, #0
 800100e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001012:	bf00      	nop

08001014 <__aeabi_dcmpun>:
 8001014:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8001018:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800101c:	d102      	bne.n	8001024 <__aeabi_dcmpun+0x10>
 800101e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8001022:	d10a      	bne.n	800103a <__aeabi_dcmpun+0x26>
 8001024:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8001028:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800102c:	d102      	bne.n	8001034 <__aeabi_dcmpun+0x20>
 800102e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8001032:	d102      	bne.n	800103a <__aeabi_dcmpun+0x26>
 8001034:	f04f 0000 	mov.w	r0, #0
 8001038:	4770      	bx	lr
 800103a:	f04f 0001 	mov.w	r0, #1
 800103e:	4770      	bx	lr

08001040 <__aeabi_d2iz>:
 8001040:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8001044:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8001048:	d215      	bcs.n	8001076 <__aeabi_d2iz+0x36>
 800104a:	d511      	bpl.n	8001070 <__aeabi_d2iz+0x30>
 800104c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8001050:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8001054:	d912      	bls.n	800107c <__aeabi_d2iz+0x3c>
 8001056:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800105a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800105e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8001062:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8001066:	fa23 f002 	lsr.w	r0, r3, r2
 800106a:	bf18      	it	ne
 800106c:	4240      	negne	r0, r0
 800106e:	4770      	bx	lr
 8001070:	f04f 0000 	mov.w	r0, #0
 8001074:	4770      	bx	lr
 8001076:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800107a:	d105      	bne.n	8001088 <__aeabi_d2iz+0x48>
 800107c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8001080:	bf08      	it	eq
 8001082:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001086:	4770      	bx	lr
 8001088:	f04f 0000 	mov.w	r0, #0
 800108c:	4770      	bx	lr
 800108e:	bf00      	nop

08001090 <_ZN7ButtonsC1EP9buttons_t>:
#include "!!!CONFIG.hpp"
#include "BUTTONS.hpp"

// ******************************
// CONSTRUCTOR DEFINITION STARTS!
Buttons::Buttons(buttons_t my_buttons[BUTTONS_QTY])
 8001090:	b580      	push	{r7, lr}
 8001092:	b084      	sub	sp, #16
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
 8001098:	6039      	str	r1, [r7, #0]
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	4618      	mov	r0, r3
 800109e:	233c      	movs	r3, #60	; 0x3c
 80010a0:	461a      	mov	r2, r3
 80010a2:	2100      	movs	r1, #0
 80010a4:	f001 f818 	bl	80020d8 <memset>
{
// HERE IS PERYPHERY AUTOMATIC CONFIGURATION
/*user manually filled array with the buttons parameters, like GPIO port/pin, PU/PD, etc. is read. GPIO port is being configured
 * accordingly to the array content*/

	for(int i=0; i < BUTTONS_QTY; i++)
 80010a8:	2300      	movs	r3, #0
 80010aa:	60fb      	str	r3, [r7, #12]
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	2b02      	cmp	r3, #2
 80010b0:	f300 8158 	bgt.w	8001364 <_ZN7ButtonsC1EP9buttons_t+0x2d4>
	{
		if(my_buttons[i].GPIO_PORT_NAME == GPIOA)
 80010b4:	68fa      	ldr	r2, [r7, #12]
 80010b6:	4613      	mov	r3, r2
 80010b8:	005b      	lsls	r3, r3, #1
 80010ba:	4413      	add	r3, r2
 80010bc:	00db      	lsls	r3, r3, #3
 80010be:	461a      	mov	r2, r3
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	4413      	add	r3, r2
 80010c4:	685b      	ldr	r3, [r3, #4]
 80010c6:	4aaa      	ldr	r2, [pc, #680]	; (8001370 <_ZN7ButtonsC1EP9buttons_t+0x2e0>)
 80010c8:	4293      	cmp	r3, r2
 80010ca:	f040 809e 	bne.w	800120a <_ZN7ButtonsC1EP9buttons_t+0x17a>
		{
			RCC->APB2ENR 	|= RCC_APB2ENR_IOPAEN;												// PORT B CLOCK ENABLE FOR GPIO PURPOSE
 80010ce:	4ba9      	ldr	r3, [pc, #676]	; (8001374 <_ZN7ButtonsC1EP9buttons_t+0x2e4>)
 80010d0:	699b      	ldr	r3, [r3, #24]
 80010d2:	4aa8      	ldr	r2, [pc, #672]	; (8001374 <_ZN7ButtonsC1EP9buttons_t+0x2e4>)
 80010d4:	f043 0304 	orr.w	r3, r3, #4
 80010d8:	6193      	str	r3, [r2, #24]

			// configure bits CNFx in registers CRH and CRL to configure GPIO ports as inputs.
			if(my_buttons[i].GPIO_PIN_NUMBER <=7 )
 80010da:	68fa      	ldr	r2, [r7, #12]
 80010dc:	4613      	mov	r3, r2
 80010de:	005b      	lsls	r3, r3, #1
 80010e0:	4413      	add	r3, r2
 80010e2:	00db      	lsls	r3, r3, #3
 80010e4:	461a      	mov	r2, r3
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	4413      	add	r3, r2
 80010ea:	689b      	ldr	r3, [r3, #8]
 80010ec:	2b07      	cmp	r3, #7
 80010ee:	dc27      	bgt.n	8001140 <_ZN7ButtonsC1EP9buttons_t+0xb0>
				{																				// FOR ADC CHANNELS <=7 USE CRL REGISTER
				GPIOA->CRL &= ~(0b11 << (((my_buttons[i].GPIO_PIN_NUMBER - 0) *4 ) +2));		// CLEAN TWO BITS ACCORDIGNLY TO THE MASK
 80010f0:	4b9f      	ldr	r3, [pc, #636]	; (8001370 <_ZN7ButtonsC1EP9buttons_t+0x2e0>)
 80010f2:	6819      	ldr	r1, [r3, #0]
 80010f4:	68fa      	ldr	r2, [r7, #12]
 80010f6:	4613      	mov	r3, r2
 80010f8:	005b      	lsls	r3, r3, #1
 80010fa:	4413      	add	r3, r2
 80010fc:	00db      	lsls	r3, r3, #3
 80010fe:	461a      	mov	r2, r3
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	4413      	add	r3, r2
 8001104:	689b      	ldr	r3, [r3, #8]
 8001106:	009b      	lsls	r3, r3, #2
 8001108:	3302      	adds	r3, #2
 800110a:	2203      	movs	r2, #3
 800110c:	fa02 f303 	lsl.w	r3, r2, r3
 8001110:	43db      	mvns	r3, r3
 8001112:	4a97      	ldr	r2, [pc, #604]	; (8001370 <_ZN7ButtonsC1EP9buttons_t+0x2e0>)
 8001114:	400b      	ands	r3, r1
 8001116:	6013      	str	r3, [r2, #0]
				GPIOA->CRL |=  (0b10 << (((my_buttons[i].GPIO_PIN_NUMBER - 0) *4 ) +2));		// USE Y=kX+B TO CALCULATE MASK SHIFT
 8001118:	4b95      	ldr	r3, [pc, #596]	; (8001370 <_ZN7ButtonsC1EP9buttons_t+0x2e0>)
 800111a:	6819      	ldr	r1, [r3, #0]
 800111c:	68fa      	ldr	r2, [r7, #12]
 800111e:	4613      	mov	r3, r2
 8001120:	005b      	lsls	r3, r3, #1
 8001122:	4413      	add	r3, r2
 8001124:	00db      	lsls	r3, r3, #3
 8001126:	461a      	mov	r2, r3
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	4413      	add	r3, r2
 800112c:	689b      	ldr	r3, [r3, #8]
 800112e:	009b      	lsls	r3, r3, #2
 8001130:	3302      	adds	r3, #2
 8001132:	2202      	movs	r2, #2
 8001134:	fa02 f303 	lsl.w	r3, r2, r3
 8001138:	4a8d      	ldr	r2, [pc, #564]	; (8001370 <_ZN7ButtonsC1EP9buttons_t+0x2e0>)
 800113a:	430b      	orrs	r3, r1
 800113c:	6013      	str	r3, [r2, #0]
 800113e:	e028      	b.n	8001192 <_ZN7ButtonsC1EP9buttons_t+0x102>
				}
			else
				{																				// FOR ADC CHANNELS >7 USE CRH REGISTER
				GPIOA->CRH &= ~(0b11 << (((my_buttons[i].GPIO_PIN_NUMBER - 8) *4 ) +2));		// CLEAN TWO BITS ACCORDIGNLY TO THE MASK
 8001140:	4b8b      	ldr	r3, [pc, #556]	; (8001370 <_ZN7ButtonsC1EP9buttons_t+0x2e0>)
 8001142:	6859      	ldr	r1, [r3, #4]
 8001144:	68fa      	ldr	r2, [r7, #12]
 8001146:	4613      	mov	r3, r2
 8001148:	005b      	lsls	r3, r3, #1
 800114a:	4413      	add	r3, r2
 800114c:	00db      	lsls	r3, r3, #3
 800114e:	461a      	mov	r2, r3
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	4413      	add	r3, r2
 8001154:	689b      	ldr	r3, [r3, #8]
 8001156:	3b08      	subs	r3, #8
 8001158:	009b      	lsls	r3, r3, #2
 800115a:	3302      	adds	r3, #2
 800115c:	2203      	movs	r2, #3
 800115e:	fa02 f303 	lsl.w	r3, r2, r3
 8001162:	43db      	mvns	r3, r3
 8001164:	4a82      	ldr	r2, [pc, #520]	; (8001370 <_ZN7ButtonsC1EP9buttons_t+0x2e0>)
 8001166:	400b      	ands	r3, r1
 8001168:	6053      	str	r3, [r2, #4]
				GPIOA->CRH |=  (0b10 << (((my_buttons[i].GPIO_PIN_NUMBER - 8) *4 ) +2));		// USE Y=kX+B TO CALCULATE MASK SHIFT
 800116a:	4b81      	ldr	r3, [pc, #516]	; (8001370 <_ZN7ButtonsC1EP9buttons_t+0x2e0>)
 800116c:	6859      	ldr	r1, [r3, #4]
 800116e:	68fa      	ldr	r2, [r7, #12]
 8001170:	4613      	mov	r3, r2
 8001172:	005b      	lsls	r3, r3, #1
 8001174:	4413      	add	r3, r2
 8001176:	00db      	lsls	r3, r3, #3
 8001178:	461a      	mov	r2, r3
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	4413      	add	r3, r2
 800117e:	689b      	ldr	r3, [r3, #8]
 8001180:	3b08      	subs	r3, #8
 8001182:	009b      	lsls	r3, r3, #2
 8001184:	3302      	adds	r3, #2
 8001186:	2202      	movs	r2, #2
 8001188:	fa02 f303 	lsl.w	r3, r2, r3
 800118c:	4a78      	ldr	r2, [pc, #480]	; (8001370 <_ZN7ButtonsC1EP9buttons_t+0x2e0>)
 800118e:	430b      	orrs	r3, r1
 8001190:	6053      	str	r3, [r2, #4]
				}

			// configuring bits PU PD in resister ODR
			if(my_buttons[i].btn_needs_PU_PD == 'U')											// IF BUTTON REQUIRES PULL-UP
 8001192:	68fa      	ldr	r2, [r7, #12]
 8001194:	4613      	mov	r3, r2
 8001196:	005b      	lsls	r3, r3, #1
 8001198:	4413      	add	r3, r2
 800119a:	00db      	lsls	r3, r3, #3
 800119c:	461a      	mov	r2, r3
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	4413      	add	r3, r2
 80011a2:	7c1b      	ldrb	r3, [r3, #16]
 80011a4:	2b55      	cmp	r3, #85	; 0x55
 80011a6:	d111      	bne.n	80011cc <_ZN7ButtonsC1EP9buttons_t+0x13c>
				{
				GPIOA->ODR |=  (0b01  <<    my_buttons[i].GPIO_PIN_NUMBER);						// activate PULL-UP
 80011a8:	4b71      	ldr	r3, [pc, #452]	; (8001370 <_ZN7ButtonsC1EP9buttons_t+0x2e0>)
 80011aa:	68d9      	ldr	r1, [r3, #12]
 80011ac:	68fa      	ldr	r2, [r7, #12]
 80011ae:	4613      	mov	r3, r2
 80011b0:	005b      	lsls	r3, r3, #1
 80011b2:	4413      	add	r3, r2
 80011b4:	00db      	lsls	r3, r3, #3
 80011b6:	461a      	mov	r2, r3
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	4413      	add	r3, r2
 80011bc:	689b      	ldr	r3, [r3, #8]
 80011be:	2201      	movs	r2, #1
 80011c0:	fa02 f303 	lsl.w	r3, r2, r3
 80011c4:	4a6a      	ldr	r2, [pc, #424]	; (8001370 <_ZN7ButtonsC1EP9buttons_t+0x2e0>)
 80011c6:	430b      	orrs	r3, r1
 80011c8:	60d3      	str	r3, [r2, #12]
 80011ca:	e0c7      	b.n	800135c <_ZN7ButtonsC1EP9buttons_t+0x2cc>
				}
			else if(my_buttons[i].btn_needs_PU_PD == 'D')										// IF BUTTON REQUIRES PULL-DOWN
 80011cc:	68fa      	ldr	r2, [r7, #12]
 80011ce:	4613      	mov	r3, r2
 80011d0:	005b      	lsls	r3, r3, #1
 80011d2:	4413      	add	r3, r2
 80011d4:	00db      	lsls	r3, r3, #3
 80011d6:	461a      	mov	r2, r3
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	4413      	add	r3, r2
 80011dc:	7c1b      	ldrb	r3, [r3, #16]
 80011de:	2b44      	cmp	r3, #68	; 0x44
 80011e0:	f040 80bc 	bne.w	800135c <_ZN7ButtonsC1EP9buttons_t+0x2cc>
				{
				GPIOA->ODR &= ~(0b01  <<    my_buttons[i].GPIO_PIN_NUMBER);						// activate PULL-DOWN
 80011e4:	4b62      	ldr	r3, [pc, #392]	; (8001370 <_ZN7ButtonsC1EP9buttons_t+0x2e0>)
 80011e6:	68d9      	ldr	r1, [r3, #12]
 80011e8:	68fa      	ldr	r2, [r7, #12]
 80011ea:	4613      	mov	r3, r2
 80011ec:	005b      	lsls	r3, r3, #1
 80011ee:	4413      	add	r3, r2
 80011f0:	00db      	lsls	r3, r3, #3
 80011f2:	461a      	mov	r2, r3
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	4413      	add	r3, r2
 80011f8:	689b      	ldr	r3, [r3, #8]
 80011fa:	2201      	movs	r2, #1
 80011fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001200:	43db      	mvns	r3, r3
 8001202:	4a5b      	ldr	r2, [pc, #364]	; (8001370 <_ZN7ButtonsC1EP9buttons_t+0x2e0>)
 8001204:	400b      	ands	r3, r1
 8001206:	60d3      	str	r3, [r2, #12]
 8001208:	e0a8      	b.n	800135c <_ZN7ButtonsC1EP9buttons_t+0x2cc>
				}
		}
		else if(my_buttons[i].GPIO_PORT_NAME == GPIOB)
 800120a:	68fa      	ldr	r2, [r7, #12]
 800120c:	4613      	mov	r3, r2
 800120e:	005b      	lsls	r3, r3, #1
 8001210:	4413      	add	r3, r2
 8001212:	00db      	lsls	r3, r3, #3
 8001214:	461a      	mov	r2, r3
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	4413      	add	r3, r2
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	4a56      	ldr	r2, [pc, #344]	; (8001378 <_ZN7ButtonsC1EP9buttons_t+0x2e8>)
 800121e:	4293      	cmp	r3, r2
 8001220:	f040 809c 	bne.w	800135c <_ZN7ButtonsC1EP9buttons_t+0x2cc>
		{
			RCC->APB2ENR 	|= RCC_APB2ENR_IOPBEN;						// PORT B CLOCK ENABLE FOR GPIO PURPOSE
 8001224:	4b53      	ldr	r3, [pc, #332]	; (8001374 <_ZN7ButtonsC1EP9buttons_t+0x2e4>)
 8001226:	699b      	ldr	r3, [r3, #24]
 8001228:	4a52      	ldr	r2, [pc, #328]	; (8001374 <_ZN7ButtonsC1EP9buttons_t+0x2e4>)
 800122a:	f043 0308 	orr.w	r3, r3, #8
 800122e:	6193      	str	r3, [r2, #24]

			// configure bits CNFx in registers CRH and CRL to configure GPIO ports as inputs.
			if(my_buttons[i].GPIO_PIN_NUMBER <=7 )
 8001230:	68fa      	ldr	r2, [r7, #12]
 8001232:	4613      	mov	r3, r2
 8001234:	005b      	lsls	r3, r3, #1
 8001236:	4413      	add	r3, r2
 8001238:	00db      	lsls	r3, r3, #3
 800123a:	461a      	mov	r2, r3
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	4413      	add	r3, r2
 8001240:	689b      	ldr	r3, [r3, #8]
 8001242:	2b07      	cmp	r3, #7
 8001244:	dc27      	bgt.n	8001296 <_ZN7ButtonsC1EP9buttons_t+0x206>
				{																				// FOR ADC CHANNELS <=7 USE CRL REGISTER
				GPIOB->CRL &= ~(0b11 << (((my_buttons[i].GPIO_PIN_NUMBER - 0) *4 ) +2));		// CLEAN TWO BITS ACCORDIGNLY TO THE MASK
 8001246:	4b4c      	ldr	r3, [pc, #304]	; (8001378 <_ZN7ButtonsC1EP9buttons_t+0x2e8>)
 8001248:	6819      	ldr	r1, [r3, #0]
 800124a:	68fa      	ldr	r2, [r7, #12]
 800124c:	4613      	mov	r3, r2
 800124e:	005b      	lsls	r3, r3, #1
 8001250:	4413      	add	r3, r2
 8001252:	00db      	lsls	r3, r3, #3
 8001254:	461a      	mov	r2, r3
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	4413      	add	r3, r2
 800125a:	689b      	ldr	r3, [r3, #8]
 800125c:	009b      	lsls	r3, r3, #2
 800125e:	3302      	adds	r3, #2
 8001260:	2203      	movs	r2, #3
 8001262:	fa02 f303 	lsl.w	r3, r2, r3
 8001266:	43db      	mvns	r3, r3
 8001268:	4a43      	ldr	r2, [pc, #268]	; (8001378 <_ZN7ButtonsC1EP9buttons_t+0x2e8>)
 800126a:	400b      	ands	r3, r1
 800126c:	6013      	str	r3, [r2, #0]
				GPIOB->CRL |=  (0b10 << (((my_buttons[i].GPIO_PIN_NUMBER - 0) *4 ) +2));		// USE Y=kX+B TO CALCULATE MASK SHIFT
 800126e:	4b42      	ldr	r3, [pc, #264]	; (8001378 <_ZN7ButtonsC1EP9buttons_t+0x2e8>)
 8001270:	6819      	ldr	r1, [r3, #0]
 8001272:	68fa      	ldr	r2, [r7, #12]
 8001274:	4613      	mov	r3, r2
 8001276:	005b      	lsls	r3, r3, #1
 8001278:	4413      	add	r3, r2
 800127a:	00db      	lsls	r3, r3, #3
 800127c:	461a      	mov	r2, r3
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	4413      	add	r3, r2
 8001282:	689b      	ldr	r3, [r3, #8]
 8001284:	009b      	lsls	r3, r3, #2
 8001286:	3302      	adds	r3, #2
 8001288:	2202      	movs	r2, #2
 800128a:	fa02 f303 	lsl.w	r3, r2, r3
 800128e:	4a3a      	ldr	r2, [pc, #232]	; (8001378 <_ZN7ButtonsC1EP9buttons_t+0x2e8>)
 8001290:	430b      	orrs	r3, r1
 8001292:	6013      	str	r3, [r2, #0]
 8001294:	e028      	b.n	80012e8 <_ZN7ButtonsC1EP9buttons_t+0x258>
				}
			else
				{																				// FOR ADC CHANNELS >7 USE CRH REGISTER
				GPIOB->CRH &= ~(0b11 << (((my_buttons[i].GPIO_PIN_NUMBER - 8) *4 ) +2));		// CLEAN TWO BITS ACCORDIGNLY TO THE MASK
 8001296:	4b38      	ldr	r3, [pc, #224]	; (8001378 <_ZN7ButtonsC1EP9buttons_t+0x2e8>)
 8001298:	6859      	ldr	r1, [r3, #4]
 800129a:	68fa      	ldr	r2, [r7, #12]
 800129c:	4613      	mov	r3, r2
 800129e:	005b      	lsls	r3, r3, #1
 80012a0:	4413      	add	r3, r2
 80012a2:	00db      	lsls	r3, r3, #3
 80012a4:	461a      	mov	r2, r3
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	4413      	add	r3, r2
 80012aa:	689b      	ldr	r3, [r3, #8]
 80012ac:	3b08      	subs	r3, #8
 80012ae:	009b      	lsls	r3, r3, #2
 80012b0:	3302      	adds	r3, #2
 80012b2:	2203      	movs	r2, #3
 80012b4:	fa02 f303 	lsl.w	r3, r2, r3
 80012b8:	43db      	mvns	r3, r3
 80012ba:	4a2f      	ldr	r2, [pc, #188]	; (8001378 <_ZN7ButtonsC1EP9buttons_t+0x2e8>)
 80012bc:	400b      	ands	r3, r1
 80012be:	6053      	str	r3, [r2, #4]
				GPIOB->CRH |=  (0b10 << (((my_buttons[i].GPIO_PIN_NUMBER - 8) *4 ) +2));		// USE Y=kX+B TO CALCULATE MASK SHIFT
 80012c0:	4b2d      	ldr	r3, [pc, #180]	; (8001378 <_ZN7ButtonsC1EP9buttons_t+0x2e8>)
 80012c2:	6859      	ldr	r1, [r3, #4]
 80012c4:	68fa      	ldr	r2, [r7, #12]
 80012c6:	4613      	mov	r3, r2
 80012c8:	005b      	lsls	r3, r3, #1
 80012ca:	4413      	add	r3, r2
 80012cc:	00db      	lsls	r3, r3, #3
 80012ce:	461a      	mov	r2, r3
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	4413      	add	r3, r2
 80012d4:	689b      	ldr	r3, [r3, #8]
 80012d6:	3b08      	subs	r3, #8
 80012d8:	009b      	lsls	r3, r3, #2
 80012da:	3302      	adds	r3, #2
 80012dc:	2202      	movs	r2, #2
 80012de:	fa02 f303 	lsl.w	r3, r2, r3
 80012e2:	4a25      	ldr	r2, [pc, #148]	; (8001378 <_ZN7ButtonsC1EP9buttons_t+0x2e8>)
 80012e4:	430b      	orrs	r3, r1
 80012e6:	6053      	str	r3, [r2, #4]
				}

			// configuring bits PU PD in resister ODR
			if(my_buttons[i].btn_needs_PU_PD == 'U')
 80012e8:	68fa      	ldr	r2, [r7, #12]
 80012ea:	4613      	mov	r3, r2
 80012ec:	005b      	lsls	r3, r3, #1
 80012ee:	4413      	add	r3, r2
 80012f0:	00db      	lsls	r3, r3, #3
 80012f2:	461a      	mov	r2, r3
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	4413      	add	r3, r2
 80012f8:	7c1b      	ldrb	r3, [r3, #16]
 80012fa:	2b55      	cmp	r3, #85	; 0x55
 80012fc:	d111      	bne.n	8001322 <_ZN7ButtonsC1EP9buttons_t+0x292>
				{
				GPIOB->ODR |=  (0b01  <<    my_buttons[i].GPIO_PIN_NUMBER);					// PULL-UP activation
 80012fe:	4b1e      	ldr	r3, [pc, #120]	; (8001378 <_ZN7ButtonsC1EP9buttons_t+0x2e8>)
 8001300:	68d9      	ldr	r1, [r3, #12]
 8001302:	68fa      	ldr	r2, [r7, #12]
 8001304:	4613      	mov	r3, r2
 8001306:	005b      	lsls	r3, r3, #1
 8001308:	4413      	add	r3, r2
 800130a:	00db      	lsls	r3, r3, #3
 800130c:	461a      	mov	r2, r3
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	4413      	add	r3, r2
 8001312:	689b      	ldr	r3, [r3, #8]
 8001314:	2201      	movs	r2, #1
 8001316:	fa02 f303 	lsl.w	r3, r2, r3
 800131a:	4a17      	ldr	r2, [pc, #92]	; (8001378 <_ZN7ButtonsC1EP9buttons_t+0x2e8>)
 800131c:	430b      	orrs	r3, r1
 800131e:	60d3      	str	r3, [r2, #12]
 8001320:	e01c      	b.n	800135c <_ZN7ButtonsC1EP9buttons_t+0x2cc>
				}
			else if(my_buttons[i].btn_needs_PU_PD == 'D')
 8001322:	68fa      	ldr	r2, [r7, #12]
 8001324:	4613      	mov	r3, r2
 8001326:	005b      	lsls	r3, r3, #1
 8001328:	4413      	add	r3, r2
 800132a:	00db      	lsls	r3, r3, #3
 800132c:	461a      	mov	r2, r3
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	4413      	add	r3, r2
 8001332:	7c1b      	ldrb	r3, [r3, #16]
 8001334:	2b44      	cmp	r3, #68	; 0x44
 8001336:	d111      	bne.n	800135c <_ZN7ButtonsC1EP9buttons_t+0x2cc>
				{
				GPIOB->ODR &= ~(0b01  <<    my_buttons[i].GPIO_PIN_NUMBER);					// CLEAN BIT ACCORDIGNLY TO THE MASK
 8001338:	4b0f      	ldr	r3, [pc, #60]	; (8001378 <_ZN7ButtonsC1EP9buttons_t+0x2e8>)
 800133a:	68d9      	ldr	r1, [r3, #12]
 800133c:	68fa      	ldr	r2, [r7, #12]
 800133e:	4613      	mov	r3, r2
 8001340:	005b      	lsls	r3, r3, #1
 8001342:	4413      	add	r3, r2
 8001344:	00db      	lsls	r3, r3, #3
 8001346:	461a      	mov	r2, r3
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	4413      	add	r3, r2
 800134c:	689b      	ldr	r3, [r3, #8]
 800134e:	2201      	movs	r2, #1
 8001350:	fa02 f303 	lsl.w	r3, r2, r3
 8001354:	43db      	mvns	r3, r3
 8001356:	4a08      	ldr	r2, [pc, #32]	; (8001378 <_ZN7ButtonsC1EP9buttons_t+0x2e8>)
 8001358:	400b      	ands	r3, r1
 800135a:	60d3      	str	r3, [r2, #12]
	for(int i=0; i < BUTTONS_QTY; i++)
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	3301      	adds	r3, #1
 8001360:	60fb      	str	r3, [r7, #12]
 8001362:	e6a3      	b.n	80010ac <_ZN7ButtonsC1EP9buttons_t+0x1c>
				}
		}
	}

}
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	4618      	mov	r0, r3
 8001368:	3710      	adds	r7, #16
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	40010800 	.word	0x40010800
 8001374:	40021000 	.word	0x40021000
 8001378:	40010c00 	.word	0x40010c00

0800137c <_Z13init_sysClockv>:
#include "INITIALIZATION.hpp"
#include "stm32f1xx.h"
#include "!!!CONFIG.hpp"

//////////////////////////////////////////////////////////////////////////////////////////////////////////////
void init_sysClock(){
 800137c:	b480      	push	{r7}
 800137e:	af00      	add	r7, sp, #0

	// ENABLE HSE, WAIT FOR HSE BECOME READY
	RCC->CR |= RCC_CR_HSEON;									// HSE TURN ON
 8001380:	4b31      	ldr	r3, [pc, #196]	; (8001448 <_Z13init_sysClockv+0xcc>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	4a30      	ldr	r2, [pc, #192]	; (8001448 <_Z13init_sysClockv+0xcc>)
 8001386:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800138a:	6013      	str	r3, [r2, #0]
	while(!(RCC->CR & RCC_CR_HSERDY));							// HSE wait for ignition
 800138c:	4b2e      	ldr	r3, [pc, #184]	; (8001448 <_Z13init_sysClockv+0xcc>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001394:	2b00      	cmp	r3, #0
 8001396:	bf0c      	ite	eq
 8001398:	2301      	moveq	r3, #1
 800139a:	2300      	movne	r3, #0
 800139c:	b2db      	uxtb	r3, r3
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d000      	beq.n	80013a4 <_Z13init_sysClockv+0x28>
 80013a2:	e7f3      	b.n	800138c <_Z13init_sysClockv+0x10>
	// TURN OFF PLL BEFORE INIT
	//RCC->CFGR	&= ~RCC_CR_PLLON;
	//while(RCC->CR & RCC_CR_PLLRDY);
	RCC->CFGR	|= RCC_CFGR_PLLSRC;			// PLL SOURCE: HSE IS USED AS SOURCE
 80013a4:	4b28      	ldr	r3, [pc, #160]	; (8001448 <_Z13init_sysClockv+0xcc>)
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	4a27      	ldr	r2, [pc, #156]	; (8001448 <_Z13init_sysClockv+0xcc>)
 80013aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013ae:	6053      	str	r3, [r2, #4]
	RCC->CFGR	|= RCC_CFGR_PLLMULL6;		// PLL multiplication factor is 6
 80013b0:	4b25      	ldr	r3, [pc, #148]	; (8001448 <_Z13init_sysClockv+0xcc>)
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	4a24      	ldr	r2, [pc, #144]	; (8001448 <_Z13init_sysClockv+0xcc>)
 80013b6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80013ba:	6053      	str	r3, [r2, #4]
	RCC->CR		|= RCC_CR_PLLON;			// PLL ON
 80013bc:	4b22      	ldr	r3, [pc, #136]	; (8001448 <_Z13init_sysClockv+0xcc>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4a21      	ldr	r2, [pc, #132]	; (8001448 <_Z13init_sysClockv+0xcc>)
 80013c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80013c6:	6013      	str	r3, [r2, #0]
	while(!(RCC->CR & RCC_CR_PLLRDY));		// WAIT TILL PLL BECOME READY
 80013c8:	4b1f      	ldr	r3, [pc, #124]	; (8001448 <_Z13init_sysClockv+0xcc>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	bf0c      	ite	eq
 80013d4:	2301      	moveq	r3, #1
 80013d6:	2300      	movne	r3, #0
 80013d8:	b2db      	uxtb	r3, r3
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d000      	beq.n	80013e0 <_Z13init_sysClockv+0x64>
 80013de:	e7f3      	b.n	80013c8 <_Z13init_sysClockv+0x4c>

	// CONFIGURE FLASH PREFETCH AND THE LATENCY
	FLASH->ACR	|= FLASH_ACR_PRFTBE;		// preftch filter activated
 80013e0:	4b1a      	ldr	r3, [pc, #104]	; (800144c <_Z13init_sysClockv+0xd0>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4a19      	ldr	r2, [pc, #100]	; (800144c <_Z13init_sysClockv+0xd0>)
 80013e6:	f043 0310 	orr.w	r3, r3, #16
 80013ea:	6013      	str	r3, [r2, #0]
	FLASH->ACR	|= FLASH_ACR_LATENCY_1;		// latency 1
 80013ec:	4b17      	ldr	r3, [pc, #92]	; (800144c <_Z13init_sysClockv+0xd0>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4a16      	ldr	r2, [pc, #88]	; (800144c <_Z13init_sysClockv+0xd0>)
 80013f2:	f043 0302 	orr.w	r3, r3, #2
 80013f6:	6013      	str	r3, [r2, #0]
	RCC->CFGR	|= RCC_CFGR_HPRE_DIV1;		// AHB PRESCALLER (SYSCLK not divided)
 80013f8:	4b13      	ldr	r3, [pc, #76]	; (8001448 <_Z13init_sysClockv+0xcc>)
 80013fa:	4a13      	ldr	r2, [pc, #76]	; (8001448 <_Z13init_sysClockv+0xcc>)
 80013fc:	685b      	ldr	r3, [r3, #4]
 80013fe:	6053      	str	r3, [r2, #4]
	RCC->CFGR	|= RCC_CFGR_MCO_SYSCLK;		// CLOCK OUTPUT TO THE MCO PIN
 8001400:	4b11      	ldr	r3, [pc, #68]	; (8001448 <_Z13init_sysClockv+0xcc>)
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	4a10      	ldr	r2, [pc, #64]	; (8001448 <_Z13init_sysClockv+0xcc>)
 8001406:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800140a:	6053      	str	r3, [r2, #4]
	RCC->CFGR	|= RCC_CFGR_SW_PLL;			// PLL FINALLLY SELECTED AS A SYSTEM CLOCk
 800140c:	4b0e      	ldr	r3, [pc, #56]	; (8001448 <_Z13init_sysClockv+0xcc>)
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	4a0d      	ldr	r2, [pc, #52]	; (8001448 <_Z13init_sysClockv+0xcc>)
 8001412:	f043 0302 	orr.w	r3, r3, #2
 8001416:	6053      	str	r3, [r2, #4]
	RCC->CFGR	|= RCC_CFGR_PPRE1_DIV1;		// APB1 PRESCALLER (HCLK not divided)
 8001418:	4b0b      	ldr	r3, [pc, #44]	; (8001448 <_Z13init_sysClockv+0xcc>)
 800141a:	4a0b      	ldr	r2, [pc, #44]	; (8001448 <_Z13init_sysClockv+0xcc>)
 800141c:	685b      	ldr	r3, [r3, #4]
 800141e:	6053      	str	r3, [r2, #4]
	RCC->CFGR	|= RCC_CFGR_PPRE2_DIV1;		// APB2 PRESCALLER (HCLK not divided)
 8001420:	4b09      	ldr	r3, [pc, #36]	; (8001448 <_Z13init_sysClockv+0xcc>)
 8001422:	4a09      	ldr	r2, [pc, #36]	; (8001448 <_Z13init_sysClockv+0xcc>)
 8001424:	685b      	ldr	r3, [r3, #4]
 8001426:	6053      	str	r3, [r2, #4]
	while(!(RCC->CFGR & RCC_CFGR_SWS_PLL));	// wait for a flag confirming PLL is used as clock
 8001428:	4b07      	ldr	r3, [pc, #28]	; (8001448 <_Z13init_sysClockv+0xcc>)
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	f003 0308 	and.w	r3, r3, #8
 8001430:	2b00      	cmp	r3, #0
 8001432:	bf0c      	ite	eq
 8001434:	2301      	moveq	r3, #1
 8001436:	2300      	movne	r3, #0
 8001438:	b2db      	uxtb	r3, r3
 800143a:	2b00      	cmp	r3, #0
 800143c:	d000      	beq.n	8001440 <_Z13init_sysClockv+0xc4>
 800143e:	e7f3      	b.n	8001428 <_Z13init_sysClockv+0xac>
}
 8001440:	bf00      	nop
 8001442:	46bd      	mov	sp, r7
 8001444:	bc80      	pop	{r7}
 8001446:	4770      	bx	lr
 8001448:	40021000 	.word	0x40021000
 800144c:	40022000 	.word	0x40022000

08001450 <_Z9init_GPIOv>:
//////////////////////////////////////////////////////////////////////////////////////////////////////////////
void init_GPIO(){
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0
	RCC->APB2ENR |=  RCC_APB2ENR_IOPAEN;						// PORT A CLOCK ENABLE
 8001454:	4b10      	ldr	r3, [pc, #64]	; (8001498 <_Z9init_GPIOv+0x48>)
 8001456:	699b      	ldr	r3, [r3, #24]
 8001458:	4a0f      	ldr	r2, [pc, #60]	; (8001498 <_Z9init_GPIOv+0x48>)
 800145a:	f043 0304 	orr.w	r3, r3, #4
 800145e:	6193      	str	r3, [r2, #24]
	RCC->APB2ENR |=  RCC_APB2ENR_IOPBEN;						// PORT B CLOCK ENABLE
 8001460:	4b0d      	ldr	r3, [pc, #52]	; (8001498 <_Z9init_GPIOv+0x48>)
 8001462:	699b      	ldr	r3, [r3, #24]
 8001464:	4a0c      	ldr	r2, [pc, #48]	; (8001498 <_Z9init_GPIOv+0x48>)
 8001466:	f043 0308 	orr.w	r3, r3, #8
 800146a:	6193      	str	r3, [r2, #24]
	RCC->APB2ENR |=  RCC_APB2ENR_IOPCEN;						// PORT C CLOCK ENABLE
 800146c:	4b0a      	ldr	r3, [pc, #40]	; (8001498 <_Z9init_GPIOv+0x48>)
 800146e:	699b      	ldr	r3, [r3, #24]
 8001470:	4a09      	ldr	r2, [pc, #36]	; (8001498 <_Z9init_GPIOv+0x48>)
 8001472:	f043 0310 	orr.w	r3, r3, #16
 8001476:	6193      	str	r3, [r2, #24]
	GPIOC->CRH	 &=  ~GPIO_CRH_CNF13;							// LED PORT CONFIG
 8001478:	4b08      	ldr	r3, [pc, #32]	; (800149c <_Z9init_GPIOv+0x4c>)
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	4a07      	ldr	r2, [pc, #28]	; (800149c <_Z9init_GPIOv+0x4c>)
 800147e:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8001482:	6053      	str	r3, [r2, #4]
	GPIOC->CRH	 |=  GPIO_CRH_MODE13;							// LED PORT CONFIG
 8001484:	4b05      	ldr	r3, [pc, #20]	; (800149c <_Z9init_GPIOv+0x4c>)
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	4a04      	ldr	r2, [pc, #16]	; (800149c <_Z9init_GPIOv+0x4c>)
 800148a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800148e:	6053      	str	r3, [r2, #4]
}
 8001490:	bf00      	nop
 8001492:	46bd      	mov	sp, r7
 8001494:	bc80      	pop	{r7}
 8001496:	4770      	bx	lr
 8001498:	40021000 	.word	0x40021000
 800149c:	40011000 	.word	0x40011000

080014a0 <_Z12init_SysTickv>:
//////////////////////////////////////////////////////////////////////////////////////////////////////////////
void init_SysTick(){
 80014a0:	b480      	push	{r7}
 80014a2:	af00      	add	r7, sp, #0
	SysTick->LOAD &= ~SysTick_LOAD_RELOAD_Msk;		// RELOAD register clear
 80014a4:	4b11      	ldr	r3, [pc, #68]	; (80014ec <_Z12init_SysTickv+0x4c>)
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	4a10      	ldr	r2, [pc, #64]	; (80014ec <_Z12init_SysTickv+0x4c>)
 80014aa:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80014ae:	6053      	str	r3, [r2, #4]
	SysTick->LOAD  = SysClock/(1000-1);				// VALUE register gets 8000 to have 1kHz SysTick interruption
 80014b0:	4b0e      	ldr	r3, [pc, #56]	; (80014ec <_Z12init_SysTickv+0x4c>)
 80014b2:	f64b 32b0 	movw	r2, #48048	; 0xbbb0
 80014b6:	605a      	str	r2, [r3, #4]
	SysTick->VAL   = ~SysTick_VAL_CURRENT_Msk;		// VALUE register clear
 80014b8:	4b0c      	ldr	r3, [pc, #48]	; (80014ec <_Z12init_SysTickv+0x4c>)
 80014ba:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 80014be:	609a      	str	r2, [r3, #8]
	SysTick->CTRL |= SysTick_CTRL_CLKSOURCE_Msk; 	// AHB bus is a clock source for SysTick
 80014c0:	4b0a      	ldr	r3, [pc, #40]	; (80014ec <_Z12init_SysTickv+0x4c>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4a09      	ldr	r2, [pc, #36]	; (80014ec <_Z12init_SysTickv+0x4c>)
 80014c6:	f043 0304 	orr.w	r3, r3, #4
 80014ca:	6013      	str	r3, [r2, #0]
	SysTick->CTRL |= SysTick_CTRL_TICKINT_Msk;		// SysTick interruption enable
 80014cc:	4b07      	ldr	r3, [pc, #28]	; (80014ec <_Z12init_SysTickv+0x4c>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4a06      	ldr	r2, [pc, #24]	; (80014ec <_Z12init_SysTickv+0x4c>)
 80014d2:	f043 0302 	orr.w	r3, r3, #2
 80014d6:	6013      	str	r3, [r2, #0]
	SysTick->CTRL |= SysTick_CTRL_ENABLE_Msk;		// SysTick Enable
 80014d8:	4b04      	ldr	r3, [pc, #16]	; (80014ec <_Z12init_SysTickv+0x4c>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4a03      	ldr	r2, [pc, #12]	; (80014ec <_Z12init_SysTickv+0x4c>)
 80014de:	f043 0301 	orr.w	r3, r3, #1
 80014e2:	6013      	str	r3, [r2, #0]
}
 80014e4:	bf00      	nop
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bc80      	pop	{r7}
 80014ea:	4770      	bx	lr
 80014ec:	e000e010 	.word	0xe000e010

080014f0 <_Z8init_ADCv>:
//////////////////////////////////////////////////////////////////////////////////////////////////////////////
void init_ADC(){
 80014f0:	b480      	push	{r7}
 80014f2:	b085      	sub	sp, #20
 80014f4:	af00      	add	r7, sp, #0
	//	VREF - ADC channel 16
	//	TEMP - ADC channel 17
	RCC->APB2ENR 	|= RCC_APB2ENR_IOPAEN;						// PORT A CLOCK ENABLE FOR ADC PURPOSE
 80014f6:	4ba7      	ldr	r3, [pc, #668]	; (8001794 <_Z8init_ADCv+0x2a4>)
 80014f8:	699b      	ldr	r3, [r3, #24]
 80014fa:	4aa6      	ldr	r2, [pc, #664]	; (8001794 <_Z8init_ADCv+0x2a4>)
 80014fc:	f043 0304 	orr.w	r3, r3, #4
 8001500:	6193      	str	r3, [r2, #24]
	RCC->APB2ENR 	|= RCC_APB2ENR_IOPBEN;						// PORT B CLOCK ENABLE FOR ADC PURPOSE
 8001502:	4ba4      	ldr	r3, [pc, #656]	; (8001794 <_Z8init_ADCv+0x2a4>)
 8001504:	699b      	ldr	r3, [r3, #24]
 8001506:	4aa3      	ldr	r2, [pc, #652]	; (8001794 <_Z8init_ADCv+0x2a4>)
 8001508:	f043 0308 	orr.w	r3, r3, #8
 800150c:	6193      	str	r3, [r2, #24]
	RCC->APB2ENR 	|= RCC_APB2ENR_IOPCEN;						// PORT C CLOCK ENABLE FOR ADC PURPOSE
 800150e:	4ba1      	ldr	r3, [pc, #644]	; (8001794 <_Z8init_ADCv+0x2a4>)
 8001510:	699b      	ldr	r3, [r3, #24]
 8001512:	4aa0      	ldr	r2, [pc, #640]	; (8001794 <_Z8init_ADCv+0x2a4>)
 8001514:	f043 0310 	orr.w	r3, r3, #16
 8001518:	6193      	str	r3, [r2, #24]
////////////////////////////////////////////////////////////////////////////////////////////////////////////
// CONFIGURING GPIOs AS ANALOG INPUTS!!!!
	for(int i=0; i<SENSORS_QTY; i++){													// FOR SENSORS QUATITY
 800151a:	2300      	movs	r3, #0
 800151c:	60fb      	str	r3, [r7, #12]
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	2b09      	cmp	r3, #9
 8001522:	f300 8086 	bgt.w	8001632 <_Z8init_ADCv+0x142>
		if(my_sensors[i].GPIO_PORT_NAME == GPIOA) // IF SENSOR PORT IS GPIOA
 8001526:	499c      	ldr	r1, [pc, #624]	; (8001798 <_Z8init_ADCv+0x2a8>)
 8001528:	68fa      	ldr	r2, [r7, #12]
 800152a:	4613      	mov	r3, r2
 800152c:	00db      	lsls	r3, r3, #3
 800152e:	1a9b      	subs	r3, r3, r2
 8001530:	00db      	lsls	r3, r3, #3
 8001532:	440b      	add	r3, r1
 8001534:	330c      	adds	r3, #12
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4a98      	ldr	r2, [pc, #608]	; (800179c <_Z8init_ADCv+0x2ac>)
 800153a:	4293      	cmp	r3, r2
 800153c:	d134      	bne.n	80015a8 <_Z8init_ADCv+0xb8>
		{																				// CONFIGURING GPIOA PIN AS ANALOG MODE (PROGRAMMING CNF BITS TO 00)
			if(my_sensors[i].GPIO_PIN_NUMBER <=7 ){										// FOR ADC CHANNELS <=7 USE CRL REGISTER
 800153e:	4996      	ldr	r1, [pc, #600]	; (8001798 <_Z8init_ADCv+0x2a8>)
 8001540:	68fa      	ldr	r2, [r7, #12]
 8001542:	4613      	mov	r3, r2
 8001544:	00db      	lsls	r3, r3, #3
 8001546:	1a9b      	subs	r3, r3, r2
 8001548:	00db      	lsls	r3, r3, #3
 800154a:	440b      	add	r3, r1
 800154c:	3310      	adds	r3, #16
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	2b07      	cmp	r3, #7
 8001552:	dc14      	bgt.n	800157e <_Z8init_ADCv+0x8e>
				GPIOA->CRL &= ~(0b11 << (((my_sensors[i].GPIO_PIN_NUMBER) 	  *4 ) +2) );	// USE Y=kX+B TO CALCULATE MASK SHIFT
 8001554:	4b91      	ldr	r3, [pc, #580]	; (800179c <_Z8init_ADCv+0x2ac>)
 8001556:	6819      	ldr	r1, [r3, #0]
 8001558:	488f      	ldr	r0, [pc, #572]	; (8001798 <_Z8init_ADCv+0x2a8>)
 800155a:	68fa      	ldr	r2, [r7, #12]
 800155c:	4613      	mov	r3, r2
 800155e:	00db      	lsls	r3, r3, #3
 8001560:	1a9b      	subs	r3, r3, r2
 8001562:	00db      	lsls	r3, r3, #3
 8001564:	4403      	add	r3, r0
 8001566:	3310      	adds	r3, #16
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	009b      	lsls	r3, r3, #2
 800156c:	3302      	adds	r3, #2
 800156e:	2203      	movs	r2, #3
 8001570:	fa02 f303 	lsl.w	r3, r2, r3
 8001574:	43db      	mvns	r3, r3
 8001576:	4a89      	ldr	r2, [pc, #548]	; (800179c <_Z8init_ADCv+0x2ac>)
 8001578:	400b      	ands	r3, r1
 800157a:	6013      	str	r3, [r2, #0]
 800157c:	e014      	b.n	80015a8 <_Z8init_ADCv+0xb8>
			}else{																		// FOR ADC CHANNELS >7 USE CRH REGISTER
				GPIOA->CRH &= ~(0b11 << (((my_sensors[i].GPIO_PIN_NUMBER - 8) *4 ) +2) );	// USE Y=kX+B TO CALCULATE MASK SHIFT
 800157e:	4b87      	ldr	r3, [pc, #540]	; (800179c <_Z8init_ADCv+0x2ac>)
 8001580:	6859      	ldr	r1, [r3, #4]
 8001582:	4885      	ldr	r0, [pc, #532]	; (8001798 <_Z8init_ADCv+0x2a8>)
 8001584:	68fa      	ldr	r2, [r7, #12]
 8001586:	4613      	mov	r3, r2
 8001588:	00db      	lsls	r3, r3, #3
 800158a:	1a9b      	subs	r3, r3, r2
 800158c:	00db      	lsls	r3, r3, #3
 800158e:	4403      	add	r3, r0
 8001590:	3310      	adds	r3, #16
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	3b08      	subs	r3, #8
 8001596:	009b      	lsls	r3, r3, #2
 8001598:	3302      	adds	r3, #2
 800159a:	2203      	movs	r2, #3
 800159c:	fa02 f303 	lsl.w	r3, r2, r3
 80015a0:	43db      	mvns	r3, r3
 80015a2:	4a7e      	ldr	r2, [pc, #504]	; (800179c <_Z8init_ADCv+0x2ac>)
 80015a4:	400b      	ands	r3, r1
 80015a6:	6053      	str	r3, [r2, #4]
			}
		}
		if(my_sensors[i].GPIO_PORT_NAME == GPIOB) // IF SENSOR PORT IS GPIOB
 80015a8:	497b      	ldr	r1, [pc, #492]	; (8001798 <_Z8init_ADCv+0x2a8>)
 80015aa:	68fa      	ldr	r2, [r7, #12]
 80015ac:	4613      	mov	r3, r2
 80015ae:	00db      	lsls	r3, r3, #3
 80015b0:	1a9b      	subs	r3, r3, r2
 80015b2:	00db      	lsls	r3, r3, #3
 80015b4:	440b      	add	r3, r1
 80015b6:	330c      	adds	r3, #12
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	4a79      	ldr	r2, [pc, #484]	; (80017a0 <_Z8init_ADCv+0x2b0>)
 80015bc:	4293      	cmp	r3, r2
 80015be:	d134      	bne.n	800162a <_Z8init_ADCv+0x13a>
		{
			if(my_sensors[i].GPIO_PIN_NUMBER <=7 ){
 80015c0:	4975      	ldr	r1, [pc, #468]	; (8001798 <_Z8init_ADCv+0x2a8>)
 80015c2:	68fa      	ldr	r2, [r7, #12]
 80015c4:	4613      	mov	r3, r2
 80015c6:	00db      	lsls	r3, r3, #3
 80015c8:	1a9b      	subs	r3, r3, r2
 80015ca:	00db      	lsls	r3, r3, #3
 80015cc:	440b      	add	r3, r1
 80015ce:	3310      	adds	r3, #16
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	2b07      	cmp	r3, #7
 80015d4:	dc14      	bgt.n	8001600 <_Z8init_ADCv+0x110>
				GPIOB->CRL &= ~(0b11 << (((my_sensors[i].GPIO_PIN_NUMBER) 	  *4 ) +2) );
 80015d6:	4b72      	ldr	r3, [pc, #456]	; (80017a0 <_Z8init_ADCv+0x2b0>)
 80015d8:	6819      	ldr	r1, [r3, #0]
 80015da:	486f      	ldr	r0, [pc, #444]	; (8001798 <_Z8init_ADCv+0x2a8>)
 80015dc:	68fa      	ldr	r2, [r7, #12]
 80015de:	4613      	mov	r3, r2
 80015e0:	00db      	lsls	r3, r3, #3
 80015e2:	1a9b      	subs	r3, r3, r2
 80015e4:	00db      	lsls	r3, r3, #3
 80015e6:	4403      	add	r3, r0
 80015e8:	3310      	adds	r3, #16
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	009b      	lsls	r3, r3, #2
 80015ee:	3302      	adds	r3, #2
 80015f0:	2203      	movs	r2, #3
 80015f2:	fa02 f303 	lsl.w	r3, r2, r3
 80015f6:	43db      	mvns	r3, r3
 80015f8:	4a69      	ldr	r2, [pc, #420]	; (80017a0 <_Z8init_ADCv+0x2b0>)
 80015fa:	400b      	ands	r3, r1
 80015fc:	6013      	str	r3, [r2, #0]
 80015fe:	e014      	b.n	800162a <_Z8init_ADCv+0x13a>
			}else{
				GPIOB->CRH &= ~(0b11 << (((my_sensors[i].GPIO_PIN_NUMBER - 8) *4 ) +2) );
 8001600:	4b67      	ldr	r3, [pc, #412]	; (80017a0 <_Z8init_ADCv+0x2b0>)
 8001602:	6859      	ldr	r1, [r3, #4]
 8001604:	4864      	ldr	r0, [pc, #400]	; (8001798 <_Z8init_ADCv+0x2a8>)
 8001606:	68fa      	ldr	r2, [r7, #12]
 8001608:	4613      	mov	r3, r2
 800160a:	00db      	lsls	r3, r3, #3
 800160c:	1a9b      	subs	r3, r3, r2
 800160e:	00db      	lsls	r3, r3, #3
 8001610:	4403      	add	r3, r0
 8001612:	3310      	adds	r3, #16
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	3b08      	subs	r3, #8
 8001618:	009b      	lsls	r3, r3, #2
 800161a:	3302      	adds	r3, #2
 800161c:	2203      	movs	r2, #3
 800161e:	fa02 f303 	lsl.w	r3, r2, r3
 8001622:	43db      	mvns	r3, r3
 8001624:	4a5e      	ldr	r2, [pc, #376]	; (80017a0 <_Z8init_ADCv+0x2b0>)
 8001626:	400b      	ands	r3, r1
 8001628:	6053      	str	r3, [r2, #4]
	for(int i=0; i<SENSORS_QTY; i++){													// FOR SENSORS QUATITY
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	3301      	adds	r3, #1
 800162e:	60fb      	str	r3, [r7, #12]
 8001630:	e775      	b.n	800151e <_Z8init_ADCv+0x2e>
			}
		}
	}
// CONFIGURING GPIOs AS ANALOG INPUTS ENDED
////////////////////////////////////////////////////////////////////////////////////////////////////////////
	RCC ->APB2ENR	|= RCC_APB2ENR_ADC1EN;					// EN clock for ADC1
 8001632:	4b58      	ldr	r3, [pc, #352]	; (8001794 <_Z8init_ADCv+0x2a4>)
 8001634:	699b      	ldr	r3, [r3, #24]
 8001636:	4a57      	ldr	r2, [pc, #348]	; (8001794 <_Z8init_ADCv+0x2a4>)
 8001638:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800163c:	6193      	str	r3, [r2, #24]
	RCC ->CFGR 		&= ~RCC_CFGR_ADCPRE;			 		// ADC prescaller configured to division factor 2
 800163e:	4b55      	ldr	r3, [pc, #340]	; (8001794 <_Z8init_ADCv+0x2a4>)
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	4a54      	ldr	r2, [pc, #336]	; (8001794 <_Z8init_ADCv+0x2a4>)
 8001644:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001648:	6053      	str	r3, [r2, #4]
//	ADC1->CR1 		|= ADC_CR1_EOCIE;						// Enable interrupt for regular channels.
	ADC1->CR1		|= ADC_CR1_SCAN;						// SCAN mode activated
 800164a:	4b56      	ldr	r3, [pc, #344]	; (80017a4 <_Z8init_ADCv+0x2b4>)
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	4a55      	ldr	r2, [pc, #340]	; (80017a4 <_Z8init_ADCv+0x2b4>)
 8001650:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001654:	6053      	str	r3, [r2, #4]
	ADC1->CR2 		|= ADC_CR2_TSVREFE;						// Temperature sensor enable
 8001656:	4b53      	ldr	r3, [pc, #332]	; (80017a4 <_Z8init_ADCv+0x2b4>)
 8001658:	689b      	ldr	r3, [r3, #8]
 800165a:	4a52      	ldr	r2, [pc, #328]	; (80017a4 <_Z8init_ADCv+0x2b4>)
 800165c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001660:	6093      	str	r3, [r2, #8]
	ADC1->CR2 		&= ~ADC_CR2_ALIGN;						// Align result to the right
 8001662:	4b50      	ldr	r3, [pc, #320]	; (80017a4 <_Z8init_ADCv+0x2b4>)
 8001664:	689b      	ldr	r3, [r3, #8]
 8001666:	4a4f      	ldr	r2, [pc, #316]	; (80017a4 <_Z8init_ADCv+0x2b4>)
 8001668:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800166c:	6093      	str	r3, [r2, #8]
	ADC1->CR2		|= ADC_CR2_EXTTRIG;					    // external trigger selected as event trigger for ADC
 800166e:	4b4d      	ldr	r3, [pc, #308]	; (80017a4 <_Z8init_ADCv+0x2b4>)
 8001670:	689b      	ldr	r3, [r3, #8]
 8001672:	4a4c      	ldr	r2, [pc, #304]	; (80017a4 <_Z8init_ADCv+0x2b4>)
 8001674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001678:	6093      	str	r3, [r2, #8]
	ADC1->CR2		|= ADC_CR2_EXTSEL_Msk;					// SWSTART selected as external trigger for ADC
 800167a:	4b4a      	ldr	r3, [pc, #296]	; (80017a4 <_Z8init_ADCv+0x2b4>)
 800167c:	689b      	ldr	r3, [r3, #8]
 800167e:	4a49      	ldr	r2, [pc, #292]	; (80017a4 <_Z8init_ADCv+0x2b4>)
 8001680:	f443 2360 	orr.w	r3, r3, #917504	; 0xe0000
 8001684:	6093      	str	r3, [r2, #8]
	ADC1->CR2		|= ADC_CR2_DMA;							// DMA REQUEST ENABLE
 8001686:	4b47      	ldr	r3, [pc, #284]	; (80017a4 <_Z8init_ADCv+0x2b4>)
 8001688:	689b      	ldr	r3, [r3, #8]
 800168a:	4a46      	ldr	r2, [pc, #280]	; (80017a4 <_Z8init_ADCv+0x2b4>)
 800168c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001690:	6093      	str	r3, [r2, #8]
//	ADC1->CR2		|= ADC_CR2_CONT;						// CONT mode enabled

// CONFIGURING ADC CHANNELS SAMPLING RATE
	for(int i=0; i<SENSORS_QTY; i++)							// FOR SENSORS QUANTITY
 8001692:	2300      	movs	r3, #0
 8001694:	60bb      	str	r3, [r7, #8]
 8001696:	68bb      	ldr	r3, [r7, #8]
 8001698:	2b09      	cmp	r3, #9
 800169a:	dc29      	bgt.n	80016f0 <_Z8init_ADCv+0x200>
	{
		if( (0 <= i) && (i <= 9) )								// for channels <=9 write to SMPR2
 800169c:	68bb      	ldr	r3, [r7, #8]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	db0e      	blt.n	80016c0 <_Z8init_ADCv+0x1d0>
 80016a2:	68bb      	ldr	r3, [r7, #8]
 80016a4:	2b09      	cmp	r3, #9
 80016a6:	dc0b      	bgt.n	80016c0 <_Z8init_ADCv+0x1d0>
		{
			ADC1->SMPR2	|= 0b100 << ((i-0)*3);					// SAMPLE TIME 41.5 cycles
 80016a8:	4b3e      	ldr	r3, [pc, #248]	; (80017a4 <_Z8init_ADCv+0x2b4>)
 80016aa:	6919      	ldr	r1, [r3, #16]
 80016ac:	68ba      	ldr	r2, [r7, #8]
 80016ae:	4613      	mov	r3, r2
 80016b0:	005b      	lsls	r3, r3, #1
 80016b2:	4413      	add	r3, r2
 80016b4:	2204      	movs	r2, #4
 80016b6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ba:	4a3a      	ldr	r2, [pc, #232]	; (80017a4 <_Z8init_ADCv+0x2b4>)
 80016bc:	430b      	orrs	r3, r1
 80016be:	6113      	str	r3, [r2, #16]
		}
		if( (10 <= i) && (i <=17) )								// for channels <=17 write to SMPR1
 80016c0:	68bb      	ldr	r3, [r7, #8]
 80016c2:	2b09      	cmp	r3, #9
 80016c4:	dd10      	ble.n	80016e8 <_Z8init_ADCv+0x1f8>
 80016c6:	68bb      	ldr	r3, [r7, #8]
 80016c8:	2b11      	cmp	r3, #17
 80016ca:	dc0d      	bgt.n	80016e8 <_Z8init_ADCv+0x1f8>
		{
			ADC1->SMPR1	|= 0b100 << ((i-10)*3);					// SAMPLE TIME 41.5 cycles
 80016cc:	4b35      	ldr	r3, [pc, #212]	; (80017a4 <_Z8init_ADCv+0x2b4>)
 80016ce:	68d9      	ldr	r1, [r3, #12]
 80016d0:	68bb      	ldr	r3, [r7, #8]
 80016d2:	f1a3 020a 	sub.w	r2, r3, #10
 80016d6:	4613      	mov	r3, r2
 80016d8:	005b      	lsls	r3, r3, #1
 80016da:	4413      	add	r3, r2
 80016dc:	2204      	movs	r2, #4
 80016de:	fa02 f303 	lsl.w	r3, r2, r3
 80016e2:	4a30      	ldr	r2, [pc, #192]	; (80017a4 <_Z8init_ADCv+0x2b4>)
 80016e4:	430b      	orrs	r3, r1
 80016e6:	60d3      	str	r3, [r2, #12]
	for(int i=0; i<SENSORS_QTY; i++)							// FOR SENSORS QUANTITY
 80016e8:	68bb      	ldr	r3, [r7, #8]
 80016ea:	3301      	adds	r3, #1
 80016ec:	60bb      	str	r3, [r7, #8]
 80016ee:	e7d2      	b.n	8001696 <_Z8init_ADCv+0x1a6>
		}
	}

	// CONFIGURING ADC CHANNELS POLLING SEQUENCE
	for(int i=0; i<SENSORS_QTY; i++)								// FOR SENSORS QUANTITY
 80016f0:	2300      	movs	r3, #0
 80016f2:	607b      	str	r3, [r7, #4]
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	2b09      	cmp	r3, #9
 80016f8:	f300 80c9 	bgt.w	800188e <_Z8init_ADCv+0x39e>
	{
		switch (i) {
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	2b09      	cmp	r3, #9
 8001700:	f200 80c1 	bhi.w	8001886 <_Z8init_ADCv+0x396>
 8001704:	a201      	add	r2, pc, #4	; (adr r2, 800170c <_Z8init_ADCv+0x21c>)
 8001706:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800170a:	bf00      	nop
 800170c:	08001735 	.word	0x08001735
 8001710:	08001753 	.word	0x08001753
 8001714:	08001773 	.word	0x08001773
 8001718:	080017a9 	.word	0x080017a9
 800171c:	080017c9 	.word	0x080017c9
 8001720:	080017e9 	.word	0x080017e9
 8001724:	08001809 	.word	0x08001809
 8001728:	08001827 	.word	0x08001827
 800172c:	08001847 	.word	0x08001847
 8001730:	08001867 	.word	0x08001867
			case 0:
				ADC1->SQR3  |= my_sensors[i].ADC_CHANNEL << ADC_SQR3_SQ1_Pos;	// 1-th sequential conversion
 8001734:	4b1b      	ldr	r3, [pc, #108]	; (80017a4 <_Z8init_ADCv+0x2b4>)
 8001736:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001738:	4817      	ldr	r0, [pc, #92]	; (8001798 <_Z8init_ADCv+0x2a8>)
 800173a:	687a      	ldr	r2, [r7, #4]
 800173c:	4613      	mov	r3, r2
 800173e:	00db      	lsls	r3, r3, #3
 8001740:	1a9b      	subs	r3, r3, r2
 8001742:	00db      	lsls	r3, r3, #3
 8001744:	4403      	add	r3, r0
 8001746:	3314      	adds	r3, #20
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4a16      	ldr	r2, [pc, #88]	; (80017a4 <_Z8init_ADCv+0x2b4>)
 800174c:	430b      	orrs	r3, r1
 800174e:	6353      	str	r3, [r2, #52]	; 0x34
				break;
 8001750:	e099      	b.n	8001886 <_Z8init_ADCv+0x396>
			case 1:
				ADC1->SQR3  |= my_sensors[i].ADC_CHANNEL << ADC_SQR3_SQ2_Pos;	// 2-th sequential conversion
 8001752:	4b14      	ldr	r3, [pc, #80]	; (80017a4 <_Z8init_ADCv+0x2b4>)
 8001754:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001756:	4810      	ldr	r0, [pc, #64]	; (8001798 <_Z8init_ADCv+0x2a8>)
 8001758:	687a      	ldr	r2, [r7, #4]
 800175a:	4613      	mov	r3, r2
 800175c:	00db      	lsls	r3, r3, #3
 800175e:	1a9b      	subs	r3, r3, r2
 8001760:	00db      	lsls	r3, r3, #3
 8001762:	4403      	add	r3, r0
 8001764:	3314      	adds	r3, #20
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	015b      	lsls	r3, r3, #5
 800176a:	4a0e      	ldr	r2, [pc, #56]	; (80017a4 <_Z8init_ADCv+0x2b4>)
 800176c:	430b      	orrs	r3, r1
 800176e:	6353      	str	r3, [r2, #52]	; 0x34
				break;
 8001770:	e089      	b.n	8001886 <_Z8init_ADCv+0x396>
			case 2:
				ADC1->SQR3  |= my_sensors[i].ADC_CHANNEL << ADC_SQR3_SQ3_Pos;	// 3-th sequential conversion
 8001772:	4b0c      	ldr	r3, [pc, #48]	; (80017a4 <_Z8init_ADCv+0x2b4>)
 8001774:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001776:	4808      	ldr	r0, [pc, #32]	; (8001798 <_Z8init_ADCv+0x2a8>)
 8001778:	687a      	ldr	r2, [r7, #4]
 800177a:	4613      	mov	r3, r2
 800177c:	00db      	lsls	r3, r3, #3
 800177e:	1a9b      	subs	r3, r3, r2
 8001780:	00db      	lsls	r3, r3, #3
 8001782:	4403      	add	r3, r0
 8001784:	3314      	adds	r3, #20
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	029b      	lsls	r3, r3, #10
 800178a:	4a06      	ldr	r2, [pc, #24]	; (80017a4 <_Z8init_ADCv+0x2b4>)
 800178c:	430b      	orrs	r3, r1
 800178e:	6353      	str	r3, [r2, #52]	; 0x34
				break;
 8001790:	e079      	b.n	8001886 <_Z8init_ADCv+0x396>
 8001792:	bf00      	nop
 8001794:	40021000 	.word	0x40021000
 8001798:	20000048 	.word	0x20000048
 800179c:	40010800 	.word	0x40010800
 80017a0:	40010c00 	.word	0x40010c00
 80017a4:	40012400 	.word	0x40012400
			case 3:
				ADC1->SQR3  |= my_sensors[i].ADC_CHANNEL << ADC_SQR3_SQ4_Pos;	// 4-th sequential conversion
 80017a8:	4b54      	ldr	r3, [pc, #336]	; (80018fc <_Z8init_ADCv+0x40c>)
 80017aa:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80017ac:	4854      	ldr	r0, [pc, #336]	; (8001900 <_Z8init_ADCv+0x410>)
 80017ae:	687a      	ldr	r2, [r7, #4]
 80017b0:	4613      	mov	r3, r2
 80017b2:	00db      	lsls	r3, r3, #3
 80017b4:	1a9b      	subs	r3, r3, r2
 80017b6:	00db      	lsls	r3, r3, #3
 80017b8:	4403      	add	r3, r0
 80017ba:	3314      	adds	r3, #20
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	03db      	lsls	r3, r3, #15
 80017c0:	4a4e      	ldr	r2, [pc, #312]	; (80018fc <_Z8init_ADCv+0x40c>)
 80017c2:	430b      	orrs	r3, r1
 80017c4:	6353      	str	r3, [r2, #52]	; 0x34
				break;
 80017c6:	e05e      	b.n	8001886 <_Z8init_ADCv+0x396>
			case 4:
				ADC1->SQR3  |= my_sensors[i].ADC_CHANNEL << ADC_SQR3_SQ5_Pos;	// 5-th sequential conversion
 80017c8:	4b4c      	ldr	r3, [pc, #304]	; (80018fc <_Z8init_ADCv+0x40c>)
 80017ca:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80017cc:	484c      	ldr	r0, [pc, #304]	; (8001900 <_Z8init_ADCv+0x410>)
 80017ce:	687a      	ldr	r2, [r7, #4]
 80017d0:	4613      	mov	r3, r2
 80017d2:	00db      	lsls	r3, r3, #3
 80017d4:	1a9b      	subs	r3, r3, r2
 80017d6:	00db      	lsls	r3, r3, #3
 80017d8:	4403      	add	r3, r0
 80017da:	3314      	adds	r3, #20
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	051b      	lsls	r3, r3, #20
 80017e0:	4a46      	ldr	r2, [pc, #280]	; (80018fc <_Z8init_ADCv+0x40c>)
 80017e2:	430b      	orrs	r3, r1
 80017e4:	6353      	str	r3, [r2, #52]	; 0x34
				break;
 80017e6:	e04e      	b.n	8001886 <_Z8init_ADCv+0x396>
			case 5:
				ADC1->SQR3  |= my_sensors[i].ADC_CHANNEL << ADC_SQR3_SQ6_Pos;	// 6-th sequential conversion
 80017e8:	4b44      	ldr	r3, [pc, #272]	; (80018fc <_Z8init_ADCv+0x40c>)
 80017ea:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80017ec:	4844      	ldr	r0, [pc, #272]	; (8001900 <_Z8init_ADCv+0x410>)
 80017ee:	687a      	ldr	r2, [r7, #4]
 80017f0:	4613      	mov	r3, r2
 80017f2:	00db      	lsls	r3, r3, #3
 80017f4:	1a9b      	subs	r3, r3, r2
 80017f6:	00db      	lsls	r3, r3, #3
 80017f8:	4403      	add	r3, r0
 80017fa:	3314      	adds	r3, #20
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	065b      	lsls	r3, r3, #25
 8001800:	4a3e      	ldr	r2, [pc, #248]	; (80018fc <_Z8init_ADCv+0x40c>)
 8001802:	430b      	orrs	r3, r1
 8001804:	6353      	str	r3, [r2, #52]	; 0x34
				break;
 8001806:	e03e      	b.n	8001886 <_Z8init_ADCv+0x396>
			case 6:
				ADC1->SQR2  |= my_sensors[i].ADC_CHANNEL << ADC_SQR2_SQ7_Pos;	// 7-th sequential conversion
 8001808:	4b3c      	ldr	r3, [pc, #240]	; (80018fc <_Z8init_ADCv+0x40c>)
 800180a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800180c:	483c      	ldr	r0, [pc, #240]	; (8001900 <_Z8init_ADCv+0x410>)
 800180e:	687a      	ldr	r2, [r7, #4]
 8001810:	4613      	mov	r3, r2
 8001812:	00db      	lsls	r3, r3, #3
 8001814:	1a9b      	subs	r3, r3, r2
 8001816:	00db      	lsls	r3, r3, #3
 8001818:	4403      	add	r3, r0
 800181a:	3314      	adds	r3, #20
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	4a37      	ldr	r2, [pc, #220]	; (80018fc <_Z8init_ADCv+0x40c>)
 8001820:	430b      	orrs	r3, r1
 8001822:	6313      	str	r3, [r2, #48]	; 0x30
				break;
 8001824:	e02f      	b.n	8001886 <_Z8init_ADCv+0x396>
			case 7:
				ADC1->SQR2  |= my_sensors[i].ADC_CHANNEL << ADC_SQR2_SQ8_Pos;	// 8-th sequential conversion
 8001826:	4b35      	ldr	r3, [pc, #212]	; (80018fc <_Z8init_ADCv+0x40c>)
 8001828:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800182a:	4835      	ldr	r0, [pc, #212]	; (8001900 <_Z8init_ADCv+0x410>)
 800182c:	687a      	ldr	r2, [r7, #4]
 800182e:	4613      	mov	r3, r2
 8001830:	00db      	lsls	r3, r3, #3
 8001832:	1a9b      	subs	r3, r3, r2
 8001834:	00db      	lsls	r3, r3, #3
 8001836:	4403      	add	r3, r0
 8001838:	3314      	adds	r3, #20
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	015b      	lsls	r3, r3, #5
 800183e:	4a2f      	ldr	r2, [pc, #188]	; (80018fc <_Z8init_ADCv+0x40c>)
 8001840:	430b      	orrs	r3, r1
 8001842:	6313      	str	r3, [r2, #48]	; 0x30
				break;
 8001844:	e01f      	b.n	8001886 <_Z8init_ADCv+0x396>
			case 8:
				ADC1->SQR2  |= my_sensors[i].ADC_CHANNEL << ADC_SQR2_SQ9_Pos;	// 9-th sequential conversion
 8001846:	4b2d      	ldr	r3, [pc, #180]	; (80018fc <_Z8init_ADCv+0x40c>)
 8001848:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800184a:	482d      	ldr	r0, [pc, #180]	; (8001900 <_Z8init_ADCv+0x410>)
 800184c:	687a      	ldr	r2, [r7, #4]
 800184e:	4613      	mov	r3, r2
 8001850:	00db      	lsls	r3, r3, #3
 8001852:	1a9b      	subs	r3, r3, r2
 8001854:	00db      	lsls	r3, r3, #3
 8001856:	4403      	add	r3, r0
 8001858:	3314      	adds	r3, #20
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	029b      	lsls	r3, r3, #10
 800185e:	4a27      	ldr	r2, [pc, #156]	; (80018fc <_Z8init_ADCv+0x40c>)
 8001860:	430b      	orrs	r3, r1
 8001862:	6313      	str	r3, [r2, #48]	; 0x30
				break;
 8001864:	e00f      	b.n	8001886 <_Z8init_ADCv+0x396>
			case 9:
				ADC1->SQR2  |= my_sensors[i].ADC_CHANNEL << ADC_SQR2_SQ10_Pos;	// 10-th sequential conversion
 8001866:	4b25      	ldr	r3, [pc, #148]	; (80018fc <_Z8init_ADCv+0x40c>)
 8001868:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800186a:	4825      	ldr	r0, [pc, #148]	; (8001900 <_Z8init_ADCv+0x410>)
 800186c:	687a      	ldr	r2, [r7, #4]
 800186e:	4613      	mov	r3, r2
 8001870:	00db      	lsls	r3, r3, #3
 8001872:	1a9b      	subs	r3, r3, r2
 8001874:	00db      	lsls	r3, r3, #3
 8001876:	4403      	add	r3, r0
 8001878:	3314      	adds	r3, #20
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	03db      	lsls	r3, r3, #15
 800187e:	4a1f      	ldr	r2, [pc, #124]	; (80018fc <_Z8init_ADCv+0x40c>)
 8001880:	430b      	orrs	r3, r1
 8001882:	6313      	str	r3, [r2, #48]	; 0x30
				break;
 8001884:	bf00      	nop
	for(int i=0; i<SENSORS_QTY; i++)								// FOR SENSORS QUANTITY
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	3301      	adds	r3, #1
 800188a:	607b      	str	r3, [r7, #4]
 800188c:	e732      	b.n	80016f4 <_Z8init_ADCv+0x204>
//			ADC1->SQR1  |= my_sensors[i].ADC_CHANNEL << ((i-13)*5);
//		}
	}

// CONFIGURING SEQUENCE LENGTH
	ADC1->SQR1 |= ((SENSORS_QTY - 1) << ADC_SQR1_L_Pos);	// AMOUNT OF ADC CONVERTIONS
 800188e:	4b1b      	ldr	r3, [pc, #108]	; (80018fc <_Z8init_ADCv+0x40c>)
 8001890:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001892:	4a1a      	ldr	r2, [pc, #104]	; (80018fc <_Z8init_ADCv+0x40c>)
 8001894:	f443 0310 	orr.w	r3, r3, #9437184	; 0x900000
 8001898:	62d3      	str	r3, [r2, #44]	; 0x2c
// value in SQR1_L register part should be by -1 smaller, as ZERO corresponds to single conversion.

// LAUNCH ADC FIRST TIME
	ADC1->CR2 |= ADC_CR2_ADON;								// turn-on ADC
 800189a:	4b18      	ldr	r3, [pc, #96]	; (80018fc <_Z8init_ADCv+0x40c>)
 800189c:	689b      	ldr	r3, [r3, #8]
 800189e:	4a17      	ldr	r2, [pc, #92]	; (80018fc <_Z8init_ADCv+0x40c>)
 80018a0:	f043 0301 	orr.w	r3, r3, #1
 80018a4:	6093      	str	r3, [r2, #8]

// ADC CALIBRATION START
	volatile int i=1000000;
 80018a6:	4b17      	ldr	r3, [pc, #92]	; (8001904 <_Z8init_ADCv+0x414>)
 80018a8:	603b      	str	r3, [r7, #0]
	while(i>0)
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	bfcc      	ite	gt
 80018b0:	2301      	movgt	r3, #1
 80018b2:	2300      	movle	r3, #0
 80018b4:	b2db      	uxtb	r3, r3
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d003      	beq.n	80018c2 <_Z8init_ADCv+0x3d2>
	{
		i--;
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	3b01      	subs	r3, #1
 80018be:	603b      	str	r3, [r7, #0]
	while(i>0)
 80018c0:	e7f3      	b.n	80018aa <_Z8init_ADCv+0x3ba>
	}
	ADC1->CR2 |= ADC_CR2_CAL;
 80018c2:	4b0e      	ldr	r3, [pc, #56]	; (80018fc <_Z8init_ADCv+0x40c>)
 80018c4:	689b      	ldr	r3, [r3, #8]
 80018c6:	4a0d      	ldr	r2, [pc, #52]	; (80018fc <_Z8init_ADCv+0x40c>)
 80018c8:	f043 0304 	orr.w	r3, r3, #4
 80018cc:	6093      	str	r3, [r2, #8]
	while ((ADC1->CR2 & ADC_CR2_CAL) != 0);
 80018ce:	4b0b      	ldr	r3, [pc, #44]	; (80018fc <_Z8init_ADCv+0x40c>)
 80018d0:	689b      	ldr	r3, [r3, #8]
 80018d2:	f003 0304 	and.w	r3, r3, #4
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	bf14      	ite	ne
 80018da:	2301      	movne	r3, #1
 80018dc:	2300      	moveq	r3, #0
 80018de:	b2db      	uxtb	r3, r3
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d000      	beq.n	80018e6 <_Z8init_ADCv+0x3f6>
 80018e4:	e7f3      	b.n	80018ce <_Z8init_ADCv+0x3de>
	// ADC CALIBRATION FINISH

    ADC1->CR2   |= ADC_CR2_ADON;	  	// SET ADON to ENABLE ADC SECOND TIME
 80018e6:	4b05      	ldr	r3, [pc, #20]	; (80018fc <_Z8init_ADCv+0x40c>)
 80018e8:	689b      	ldr	r3, [r3, #8]
 80018ea:	4a04      	ldr	r2, [pc, #16]	; (80018fc <_Z8init_ADCv+0x40c>)
 80018ec:	f043 0301 	orr.w	r3, r3, #1
 80018f0:	6093      	str	r3, [r2, #8]
}
 80018f2:	bf00      	nop
 80018f4:	3714      	adds	r7, #20
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bc80      	pop	{r7}
 80018fa:	4770      	bx	lr
 80018fc:	40012400 	.word	0x40012400
 8001900:	20000048 	.word	0x20000048
 8001904:	000f4240 	.word	0x000f4240

08001908 <_Z10init_USARTv>:
//////////////////////////////////////////////////////////////////////////////////////////////////////////////
void init_USART(){	// USART 3 IS USED
 8001908:	b480      	push	{r7}
 800190a:	af00      	add	r7, sp, #0
//	UART INTERNAL CLOCK IS 32MHz
	RCC->APB1ENR |= RCC_APB1ENR_USART3EN;	// USART 3 CLOCK ENABLE
 800190c:	4b1e      	ldr	r3, [pc, #120]	; (8001988 <_Z10init_USARTv+0x80>)
 800190e:	69db      	ldr	r3, [r3, #28]
 8001910:	4a1d      	ldr	r2, [pc, #116]	; (8001988 <_Z10init_USARTv+0x80>)
 8001912:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001916:	61d3      	str	r3, [r2, #28]
	RCC->APB2ENR |= RCC_APB2ENR_IOPBEN;	    // GPIOB CLOCK ENABLE FOR UART PURPOSE
 8001918:	4b1b      	ldr	r3, [pc, #108]	; (8001988 <_Z10init_USARTv+0x80>)
 800191a:	699b      	ldr	r3, [r3, #24]
 800191c:	4a1a      	ldr	r2, [pc, #104]	; (8001988 <_Z10init_USARTv+0x80>)
 800191e:	f043 0308 	orr.w	r3, r3, #8
 8001922:	6193      	str	r3, [r2, #24]
//	TXD3 -> PB10, ALTERNATE FUNCTION OUTPUT WITH P-P
	GPIOB->CRH	 &= ~GPIO_CRH_CNF10_Msk;	// GPIOB.10, CLEARING CNF10[] BITS
 8001924:	4b19      	ldr	r3, [pc, #100]	; (800198c <_Z10init_USARTv+0x84>)
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	4a18      	ldr	r2, [pc, #96]	; (800198c <_Z10init_USARTv+0x84>)
 800192a:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800192e:	6053      	str	r3, [r2, #4]
	GPIOB->CRH	 |=	GPIO_CRH_CNF10_1;		// GPIOB.10, SET CNF10[1:0] (Alternate function output Push-pull)
 8001930:	4b16      	ldr	r3, [pc, #88]	; (800198c <_Z10init_USARTv+0x84>)
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	4a15      	ldr	r2, [pc, #84]	; (800198c <_Z10init_USARTv+0x84>)
 8001936:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800193a:	6053      	str	r3, [r2, #4]
	GPIOB->CRH	 &= ~GPIO_CRH_MODE10_Msk;	// GPIOB.10, CLEARING MODE10[] BITS
 800193c:	4b13      	ldr	r3, [pc, #76]	; (800198c <_Z10init_USARTv+0x84>)
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	4a12      	ldr	r2, [pc, #72]	; (800198c <_Z10init_USARTv+0x84>)
 8001942:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001946:	6053      	str	r3, [r2, #4]
	GPIOB->CRH 	 |= GPIO_CRH_MODE10_1;		// GPIOB.10, SET MODE10[1:0] (Output mode PP, max speed 2 MHz)
 8001948:	4b10      	ldr	r3, [pc, #64]	; (800198c <_Z10init_USARTv+0x84>)
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	4a0f      	ldr	r2, [pc, #60]	; (800198c <_Z10init_USARTv+0x84>)
 800194e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001952:	6053      	str	r3, [r2, #4]

//	UART CONFIGURATION
	USART3->CR1	 |= USART_CR1_UE;			// ENABLE USART1 MODULE
 8001954:	4b0e      	ldr	r3, [pc, #56]	; (8001990 <_Z10init_USARTv+0x88>)
 8001956:	68db      	ldr	r3, [r3, #12]
 8001958:	4a0d      	ldr	r2, [pc, #52]	; (8001990 <_Z10init_USARTv+0x88>)
 800195a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800195e:	60d3      	str	r3, [r2, #12]
	USART3->BRR   = 208 << 4;				// (32MHz/(16*9600BAUD))=208
 8001960:	4b0b      	ldr	r3, [pc, #44]	; (8001990 <_Z10init_USARTv+0x88>)
 8001962:	f44f 6250 	mov.w	r2, #3328	; 0xd00
 8001966:	609a      	str	r2, [r3, #8]
	USART3->CR1  |= USART_CR1_TE;			// ENABLE TRANSMITTER
 8001968:	4b09      	ldr	r3, [pc, #36]	; (8001990 <_Z10init_USARTv+0x88>)
 800196a:	68db      	ldr	r3, [r3, #12]
 800196c:	4a08      	ldr	r2, [pc, #32]	; (8001990 <_Z10init_USARTv+0x88>)
 800196e:	f043 0308 	orr.w	r3, r3, #8
 8001972:	60d3      	str	r3, [r2, #12]
//	USART3->CR2	 |= USART_CR1_RE;			// ENABLE RECEIVER
	USART3->CR2   = 0;						//
 8001974:	4b06      	ldr	r3, [pc, #24]	; (8001990 <_Z10init_USARTv+0x88>)
 8001976:	2200      	movs	r2, #0
 8001978:	611a      	str	r2, [r3, #16]
	USART3->CR3   = 0;
 800197a:	4b05      	ldr	r3, [pc, #20]	; (8001990 <_Z10init_USARTv+0x88>)
 800197c:	2200      	movs	r2, #0
 800197e:	615a      	str	r2, [r3, #20]
}
 8001980:	bf00      	nop
 8001982:	46bd      	mov	sp, r7
 8001984:	bc80      	pop	{r7}
 8001986:	4770      	bx	lr
 8001988:	40021000 	.word	0x40021000
 800198c:	40010c00 	.word	0x40010c00
 8001990:	40004800 	.word	0x40004800

08001994 <_Z8init_DMAv>:
//////////////////////////////////////////////////////////////////////////////////////////////////////////////
void init_DMA(){
 8001994:	b480      	push	{r7}
 8001996:	af00      	add	r7, sp, #0
//	extern volatile uint32_t global_ADC_DMA_BUFFER[];
	extern volatile ADC_dump_struct ADC_DATA_DUMP;
	RCC->AHBENR 		 |= RCC_AHBENR_DMA1EN;				// DMA CHANNEL 1 CLOCK ANABLE
 8001998:	4b1b      	ldr	r3, [pc, #108]	; (8001a08 <_Z8init_DMAv+0x74>)
 800199a:	695b      	ldr	r3, [r3, #20]
 800199c:	4a1a      	ldr	r2, [pc, #104]	; (8001a08 <_Z8init_DMAv+0x74>)
 800199e:	f043 0301 	orr.w	r3, r3, #1
 80019a2:	6153      	str	r3, [r2, #20]
	DMA1_Channel1->CMAR   = (uint32_t)ADC_DATA_DUMP.ADC_DMA_buffer_array;// GLOBAL VARIABLE ADRESS TO THE CMAR REGISTER
 80019a4:	4b19      	ldr	r3, [pc, #100]	; (8001a0c <_Z8init_DMAv+0x78>)
 80019a6:	4a1a      	ldr	r2, [pc, #104]	; (8001a10 <_Z8init_DMAv+0x7c>)
 80019a8:	60da      	str	r2, [r3, #12]
	DMA1_Channel1->CPAR   = (uint32_t)(&ADC1->DR);			// ADC1 DATA REGISTER TO THE CPAR REGISTER. ADC START ADDRESS 0x4001 2400, DR FFSET 0x4001 27FF
 80019aa:	4b18      	ldr	r3, [pc, #96]	; (8001a0c <_Z8init_DMAv+0x78>)
 80019ac:	4a19      	ldr	r2, [pc, #100]	; (8001a14 <_Z8init_DMAv+0x80>)
 80019ae:	609a      	str	r2, [r3, #8]
 	DMA1_Channel1->CNDTR  = SENSORS_QTY;				// NUMBER DATA TO BE TRANSFERRED
 80019b0:	4b16      	ldr	r3, [pc, #88]	; (8001a0c <_Z8init_DMAv+0x78>)
 80019b2:	220a      	movs	r2, #10
 80019b4:	605a      	str	r2, [r3, #4]
 	DMA1_Channel1->CCR	 |= DMA_CCR_MSIZE_1;				// MEMORY SIZE 32BIT
 80019b6:	4b15      	ldr	r3, [pc, #84]	; (8001a0c <_Z8init_DMAv+0x78>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4a14      	ldr	r2, [pc, #80]	; (8001a0c <_Z8init_DMAv+0x78>)
 80019bc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80019c0:	6013      	str	r3, [r2, #0]
	DMA1_Channel1->CCR	 |= DMA_CCR_PSIZE_1;				// PERYPH SIZE 32BIT
 80019c2:	4b12      	ldr	r3, [pc, #72]	; (8001a0c <_Z8init_DMAv+0x78>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4a11      	ldr	r2, [pc, #68]	; (8001a0c <_Z8init_DMAv+0x78>)
 80019c8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80019cc:	6013      	str	r3, [r2, #0]
	DMA1_Channel1->CCR	 |= DMA_CCR_MINC;					// MEMORY INCREMENT MODE ENABLED
 80019ce:	4b0f      	ldr	r3, [pc, #60]	; (8001a0c <_Z8init_DMAv+0x78>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4a0e      	ldr	r2, [pc, #56]	; (8001a0c <_Z8init_DMAv+0x78>)
 80019d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019d8:	6013      	str	r3, [r2, #0]
	DMA1_Channel1->CCR	 |= DMA_CCR_TCIE;					// TRANSFER COMPLETE INTERRUPT ENABLE
 80019da:	4b0c      	ldr	r3, [pc, #48]	; (8001a0c <_Z8init_DMAv+0x78>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4a0b      	ldr	r2, [pc, #44]	; (8001a0c <_Z8init_DMAv+0x78>)
 80019e0:	f043 0302 	orr.w	r3, r3, #2
 80019e4:	6013      	str	r3, [r2, #0]
//	DMA1_Channel1->CCR	 |= DMA_CCR_HTIE;
	DMA1_Channel1->CCR	 |= DMA_CCR_CIRC;					// CICULAR MODE ENABLED
 80019e6:	4b09      	ldr	r3, [pc, #36]	; (8001a0c <_Z8init_DMAv+0x78>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4a08      	ldr	r2, [pc, #32]	; (8001a0c <_Z8init_DMAv+0x78>)
 80019ec:	f043 0320 	orr.w	r3, r3, #32
 80019f0:	6013      	str	r3, [r2, #0]
	DMA1_Channel1->CCR	 |= DMA_CCR_EN;						// CHANNEL 1 ENABLE
 80019f2:	4b06      	ldr	r3, [pc, #24]	; (8001a0c <_Z8init_DMAv+0x78>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4a05      	ldr	r2, [pc, #20]	; (8001a0c <_Z8init_DMAv+0x78>)
 80019f8:	f043 0301 	orr.w	r3, r3, #1
 80019fc:	6013      	str	r3, [r2, #0]
}
 80019fe:	bf00      	nop
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bc80      	pop	{r7}
 8001a04:	4770      	bx	lr
 8001a06:	bf00      	nop
 8001a08:	40021000 	.word	0x40021000
 8001a0c:	40020008 	.word	0x40020008
 8001a10:	20000468 	.word	0x20000468
 8001a14:	4001244c 	.word	0x4001244c

08001a18 <_Z9init_TIM2i>:
///////////////////////////////////////////////////////////////////////////////////////
void init_TIM2(int overflow_time_in_ms){
 8001a18:	b590      	push	{r4, r7, lr}
 8001a1a:	b085      	sub	sp, #20
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
	RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;			// ACTIVATE CLOCK FOR TIM2
 8001a20:	4b2c      	ldr	r3, [pc, #176]	; (8001ad4 <_Z9init_TIM2i+0xbc>)
 8001a22:	69db      	ldr	r3, [r3, #28]
 8001a24:	4a2b      	ldr	r2, [pc, #172]	; (8001ad4 <_Z9init_TIM2i+0xbc>)
 8001a26:	f043 0301 	orr.w	r3, r3, #1
 8001a2a:	61d3      	str	r3, [r2, #28]
	float TIM2_ARR_VALUE  = 0;
 8001a2c:	f04f 0300 	mov.w	r3, #0
 8001a30:	60bb      	str	r3, [r7, #8]
	float TIM2_PRESCALLER = 0;
 8001a32:	f04f 0300 	mov.w	r3, #0
 8001a36:	60fb      	str	r3, [r7, #12]
	do
	{
		TIM2_PRESCALLER++;
 8001a38:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8001a3c:	68f8      	ldr	r0, [r7, #12]
 8001a3e:	f7fe ff6b 	bl	8000918 <__addsf3>
 8001a42:	4603      	mov	r3, r0
 8001a44:	60fb      	str	r3, [r7, #12]
		TIM2_ARR_VALUE = ( (float)overflow_time_in_ms/1000 )*( (float)(SysClock/TIM2_PRESCALLER) );
 8001a46:	6878      	ldr	r0, [r7, #4]
 8001a48:	f7ff f81a 	bl	8000a80 <__aeabi_i2f>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	4922      	ldr	r1, [pc, #136]	; (8001ad8 <_Z9init_TIM2i+0xc0>)
 8001a50:	4618      	mov	r0, r3
 8001a52:	f7ff f91d 	bl	8000c90 <__aeabi_fdiv>
 8001a56:	4603      	mov	r3, r0
 8001a58:	461c      	mov	r4, r3
 8001a5a:	68f9      	ldr	r1, [r7, #12]
 8001a5c:	481f      	ldr	r0, [pc, #124]	; (8001adc <_Z9init_TIM2i+0xc4>)
 8001a5e:	f7ff f917 	bl	8000c90 <__aeabi_fdiv>
 8001a62:	4603      	mov	r3, r0
 8001a64:	4619      	mov	r1, r3
 8001a66:	4620      	mov	r0, r4
 8001a68:	f7ff f85e 	bl	8000b28 <__aeabi_fmul>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	60bb      	str	r3, [r7, #8]
	}while(TIM2_ARR_VALUE > 65535);				// CHECK WHETHER VALUE LESS THAN (2^16-1)
 8001a70:	491b      	ldr	r1, [pc, #108]	; (8001ae0 <_Z9init_TIM2i+0xc8>)
 8001a72:	68b8      	ldr	r0, [r7, #8]
 8001a74:	f7ff fa14 	bl	8000ea0 <__aeabi_fcmpgt>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d000      	beq.n	8001a80 <_Z9init_TIM2i+0x68>
	do
 8001a7e:	e7db      	b.n	8001a38 <_Z9init_TIM2i+0x20>
	TIM2->PSC	  = TIM2_PRESCALLER ;			// TIMER CLOCK FREQUENCY IS SysClk/(x+1)
 8001a80:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 8001a84:	68f8      	ldr	r0, [r7, #12]
 8001a86:	f7ff fa15 	bl	8000eb4 <__aeabi_f2uiz>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	62a3      	str	r3, [r4, #40]	; 0x28
	TIM2->ARR	  = TIM2_ARR_VALUE;				// OVERFLOW PERIOD LOADING
 8001a8e:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 8001a92:	68b8      	ldr	r0, [r7, #8]
 8001a94:	f7ff fa0e 	bl	8000eb4 <__aeabi_f2uiz>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	62e3      	str	r3, [r4, #44]	; 0x2c
	TIM2->CR1    |= TIM_CR1_URS;				// TIMER OVERFLOW GENERATES UPDATE INTERRUPT
 8001a9c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001aa6:	f043 0304 	orr.w	r3, r3, #4
 8001aaa:	6013      	str	r3, [r2, #0]
	TIM2->DIER   |= TIM_DIER_UIE;				// UPDATE INTERRUPT ENABLE
 8001aac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001ab0:	68db      	ldr	r3, [r3, #12]
 8001ab2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001ab6:	f043 0301 	orr.w	r3, r3, #1
 8001aba:	60d3      	str	r3, [r2, #12]
	TIM2->CR1    |= TIM_CR1_CEN;				// ENABLE TIMER TIM2
 8001abc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001ac6:	f043 0301 	orr.w	r3, r3, #1
 8001aca:	6013      	str	r3, [r2, #0]
}
 8001acc:	bf00      	nop
 8001ace:	3714      	adds	r7, #20
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd90      	pop	{r4, r7, pc}
 8001ad4:	40021000 	.word	0x40021000
 8001ad8:	447a0000 	.word	0x447a0000
 8001adc:	4c371b00 	.word	0x4c371b00
 8001ae0:	477fff00 	.word	0x477fff00

08001ae4 <_ZN7TriggerC1Ei>:
 */

#include "TRIGGER.hpp"

	/*CONSTRUCTOR DEFINITION START*/
	Trigger::Trigger(int time_length){
 8001ae4:	b480      	push	{r7}
 8001ae6:	b083      	sub	sp, #12
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
 8001aec:	6039      	str	r1, [r7, #0]
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	2200      	movs	r2, #0
 8001af2:	701a      	strb	r2, [r3, #0]
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2201      	movs	r2, #1
 8001af8:	605a      	str	r2, [r3, #4]
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2200      	movs	r2, #0
 8001afe:	609a      	str	r2, [r3, #8]
		trigger_time_delay = time_length;	// time delay value, specified by customer, copied from the constructor argument to the variable
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	683a      	ldr	r2, [r7, #0]
 8001b04:	609a      	str	r2, [r3, #8]
	}
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	4618      	mov	r0, r3
 8001b0a:	370c      	adds	r7, #12
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bc80      	pop	{r7}
 8001b10:	4770      	bx	lr

08001b12 <_ZN7Trigger14trigger_updateEv>:
	 * @note	each metod call, increments counter value.
	 * @note	assumed to be called in SysTick callback, with 1ms interval
	 * @param	no parameters
     * @retval	no return value
	 */
	void Trigger::trigger_update(){
 8001b12:	b580      	push	{r7, lr}
 8001b14:	b082      	sub	sp, #8
 8001b16:	af00      	add	r7, sp, #0
 8001b18:	6078      	str	r0, [r7, #4]

		if(trigger_time_cntr < trigger_time_delay)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	685a      	ldr	r2, [r3, #4]
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	689b      	ldr	r3, [r3, #8]
 8001b22:	429a      	cmp	r2, r3
 8001b24:	bfb4      	ite	lt
 8001b26:	2301      	movlt	r3, #1
 8001b28:	2300      	movge	r3, #0
 8001b2a:	b2db      	uxtb	r3, r3
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d005      	beq.n	8001b3c <_ZN7Trigger14trigger_updateEv+0x2a>
		{
			trigger_time_cntr++;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	1c5a      	adds	r2, r3, #1
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	605a      	str	r2, [r3, #4]
		else
		{
			trigger_set();
			trigger_time_cntr = 1;
		}
	}
 8001b3a:	e005      	b.n	8001b48 <_ZN7Trigger14trigger_updateEv+0x36>
			trigger_set();
 8001b3c:	6878      	ldr	r0, [r7, #4]
 8001b3e:	f000 f807 	bl	8001b50 <_ZN7Trigger11trigger_setEv>
			trigger_time_cntr = 1;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	2201      	movs	r2, #1
 8001b46:	605a      	str	r2, [r3, #4]
	}
 8001b48:	bf00      	nop
 8001b4a:	3708      	adds	r7, #8
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}

08001b50 <_ZN7Trigger11trigger_setEv>:

	void Trigger::trigger_set()
	{
 8001b50:	b480      	push	{r7}
 8001b52:	b083      	sub	sp, #12
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
		trigger_state = true;	// setting trigger
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	701a      	strb	r2, [r3, #0]
	}
 8001b5e:	bf00      	nop
 8001b60:	370c      	adds	r7, #12
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bc80      	pop	{r7}
 8001b66:	4770      	bx	lr

08001b68 <_ZN7Trigger13trigger_resetEv>:

	void Trigger::trigger_reset()
	{
 8001b68:	b480      	push	{r7}
 8001b6a:	b083      	sub	sp, #12
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
		trigger_state = false;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2200      	movs	r2, #0
 8001b74:	701a      	strb	r2, [r3, #0]
	}
 8001b76:	bf00      	nop
 8001b78:	370c      	adds	r7, #12
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bc80      	pop	{r7}
 8001b7e:	4770      	bx	lr

08001b80 <_ZN7Trigger17trigger_get_stateEv>:

	bool Trigger::trigger_get_state(){
 8001b80:	b480      	push	{r7}
 8001b82:	b083      	sub	sp, #12
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
		return trigger_state;			// getting variable state
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	781b      	ldrb	r3, [r3, #0]
 8001b8c:	b2db      	uxtb	r3, r3
	}
 8001b8e:	4618      	mov	r0, r3
 8001b90:	370c      	adds	r7, #12
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bc80      	pop	{r7}
 8001b96:	4770      	bx	lr

08001b98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b083      	sub	sp, #12
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ba2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	db0b      	blt.n	8001bc2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001baa:	79fb      	ldrb	r3, [r7, #7]
 8001bac:	f003 021f 	and.w	r2, r3, #31
 8001bb0:	4906      	ldr	r1, [pc, #24]	; (8001bcc <__NVIC_EnableIRQ+0x34>)
 8001bb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bb6:	095b      	lsrs	r3, r3, #5
 8001bb8:	2001      	movs	r0, #1
 8001bba:	fa00 f202 	lsl.w	r2, r0, r2
 8001bbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001bc2:	bf00      	nop
 8001bc4:	370c      	adds	r7, #12
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bc80      	pop	{r7}
 8001bca:	4770      	bx	lr
 8001bcc:	e000e100 	.word	0xe000e100

08001bd0 <_ZN15ADC_dump_structC1Ev>:

typedef struct{
	uint32_t ADC_DMA_buffer_array[AVERAGING_RATIO][SENSORS_QTY]={0};
	uint32_t averaging_step;
	bool	 ADC_DATA_READY;
}ADC_dump_struct;
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b082      	sub	sp, #8
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8001be0:	461a      	mov	r2, r3
 8001be2:	2100      	movs	r1, #0
 8001be4:	f000 fa78 	bl	80020d8 <memset>
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	4618      	mov	r0, r3
 8001bec:	3708      	adds	r7, #8
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}
	...

08001bf4 <SysTick_Handler>:
Trigger trigger_1000ms(1000);										// CREATING CLASS "TRIGGER" instance, with argument "500ms"

///////////////////////////////////////////////////////////////////////////////////////
// HANDLERS START HERE/////////////////////////////////////
extern "C" void SysTick_Handler(void)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	af00      	add	r7, sp, #0
	if(global_SysTick_Cnt>0){
 8001bf8:	4b0f      	ldr	r3, [pc, #60]	; (8001c38 <SysTick_Handler+0x44>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	bf14      	ite	ne
 8001c00:	2301      	movne	r3, #1
 8001c02:	2300      	moveq	r3, #0
 8001c04:	b2db      	uxtb	r3, r3
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d004      	beq.n	8001c14 <SysTick_Handler+0x20>
		global_SysTick_Cnt--;
 8001c0a:	4b0b      	ldr	r3, [pc, #44]	; (8001c38 <SysTick_Handler+0x44>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	3b01      	subs	r3, #1
 8001c10:	4a09      	ldr	r2, [pc, #36]	; (8001c38 <SysTick_Handler+0x44>)
 8001c12:	6013      	str	r3, [r2, #0]
	}
	trigger_0001ms.trigger_update();	// ping trigger
 8001c14:	4809      	ldr	r0, [pc, #36]	; (8001c3c <SysTick_Handler+0x48>)
 8001c16:	f7ff ff7c 	bl	8001b12 <_ZN7Trigger14trigger_updateEv>
	trigger_0010ms.trigger_update();	// ping trigger
 8001c1a:	4809      	ldr	r0, [pc, #36]	; (8001c40 <SysTick_Handler+0x4c>)
 8001c1c:	f7ff ff79 	bl	8001b12 <_ZN7Trigger14trigger_updateEv>
	trigger_0100ms.trigger_update();	// ping trigger
 8001c20:	4808      	ldr	r0, [pc, #32]	; (8001c44 <SysTick_Handler+0x50>)
 8001c22:	f7ff ff76 	bl	8001b12 <_ZN7Trigger14trigger_updateEv>
	trigger_0500ms.trigger_update();	// ping trigger
 8001c26:	4808      	ldr	r0, [pc, #32]	; (8001c48 <SysTick_Handler+0x54>)
 8001c28:	f7ff ff73 	bl	8001b12 <_ZN7Trigger14trigger_updateEv>
	trigger_1000ms.trigger_update();	// ping trigger
 8001c2c:	4807      	ldr	r0, [pc, #28]	; (8001c4c <SysTick_Handler+0x58>)
 8001c2e:	f7ff ff70 	bl	8001b12 <_ZN7Trigger14trigger_updateEv>
}
 8001c32:	bf00      	nop
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	20000464 	.word	0x20000464
 8001c3c:	2000063c 	.word	0x2000063c
 8001c40:	20000648 	.word	0x20000648
 8001c44:	20000654 	.word	0x20000654
 8001c48:	20000660 	.word	0x20000660
 8001c4c:	2000066c 	.word	0x2000066c

08001c50 <ADC1_2_IRQHandler>:

extern "C" void ADC1_2_IRQHandler(void)
{
 8001c50:	b480      	push	{r7}
 8001c52:	af00      	add	r7, sp, #0
	ADC1->SR   &= ~ADC_SR_EOC;	 	  // END OF CONVERSION flag reset
 8001c54:	4b04      	ldr	r3, [pc, #16]	; (8001c68 <ADC1_2_IRQHandler+0x18>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a03      	ldr	r2, [pc, #12]	; (8001c68 <ADC1_2_IRQHandler+0x18>)
 8001c5a:	f023 0302 	bic.w	r3, r3, #2
 8001c5e:	6013      	str	r3, [r2, #0]
}
 8001c60:	bf00      	nop
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bc80      	pop	{r7}
 8001c66:	4770      	bx	lr
 8001c68:	40012400 	.word	0x40012400

08001c6c <DMA1_Channel1_IRQHandler>:

extern "C" void DMA1_Channel1_IRQHandler(void)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	af00      	add	r7, sp, #0
	DMA1->IFCR |= DMA_IFCR_CTCIF1;  // CLEAR DMA INTERUPT
 8001c70:	4b2b      	ldr	r3, [pc, #172]	; (8001d20 <DMA1_Channel1_IRQHandler+0xb4>)
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	4a2a      	ldr	r2, [pc, #168]	; (8001d20 <DMA1_Channel1_IRQHandler+0xb4>)
 8001c76:	f043 0302 	orr.w	r3, r3, #2
 8001c7a:	6053      	str	r3, [r2, #4]

	if(ADC_DATA_DUMP.averaging_step == AVERAGING_RATIO)
 8001c7c:	4b29      	ldr	r3, [pc, #164]	; (8001d24 <DMA1_Channel1_IRQHandler+0xb8>)
 8001c7e:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 8001c82:	2b0a      	cmp	r3, #10
 8001c84:	bf0c      	ite	eq
 8001c86:	2301      	moveq	r3, #1
 8001c88:	2300      	movne	r3, #0
 8001c8a:	b2db      	uxtb	r3, r3
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d00b      	beq.n	8001ca8 <DMA1_Channel1_IRQHandler+0x3c>
	{
		ADC_DATA_DUMP.averaging_step = 0;
 8001c90:	4b24      	ldr	r3, [pc, #144]	; (8001d24 <DMA1_Channel1_IRQHandler+0xb8>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
		DMA1_Channel1->CMAR = (uint32_t)ADC_DATA_DUMP.ADC_DMA_buffer_array; // return original receiver adress
 8001c98:	4b23      	ldr	r3, [pc, #140]	; (8001d28 <DMA1_Channel1_IRQHandler+0xbc>)
 8001c9a:	4a22      	ldr	r2, [pc, #136]	; (8001d24 <DMA1_Channel1_IRQHandler+0xb8>)
 8001c9c:	60da      	str	r2, [r3, #12]
		ADC_DATA_DUMP.ADC_DATA_READY = true;
 8001c9e:	4b21      	ldr	r3, [pc, #132]	; (8001d24 <DMA1_Channel1_IRQHandler+0xb8>)
 8001ca0:	2201      	movs	r2, #1
 8001ca2:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194
		/*DMA address update* finish*/
		DMA1_Channel1->CCR	 |= DMA_CCR_EN;							// CHANNEL 1 ENABLE
		while((DMA1_Channel1->CCR & DMA_CCR_EN) != DMA_CCR_EN);
		ADC_DATA_DUMP.averaging_step++;
	}
}
 8001ca6:	e036      	b.n	8001d16 <DMA1_Channel1_IRQHandler+0xaa>
		DMA1_Channel1->CCR	 &= ~DMA_CCR_EN;						// CHANNEL DISABLE
 8001ca8:	4b1f      	ldr	r3, [pc, #124]	; (8001d28 <DMA1_Channel1_IRQHandler+0xbc>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a1e      	ldr	r2, [pc, #120]	; (8001d28 <DMA1_Channel1_IRQHandler+0xbc>)
 8001cae:	f023 0301 	bic.w	r3, r3, #1
 8001cb2:	6013      	str	r3, [r2, #0]
		while(DMA1_Channel1->CCR & DMA_CCR_EN);						// wait for DMA turn-off
 8001cb4:	4b1c      	ldr	r3, [pc, #112]	; (8001d28 <DMA1_Channel1_IRQHandler+0xbc>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f003 0301 	and.w	r3, r3, #1
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	bf14      	ite	ne
 8001cc0:	2301      	movne	r3, #1
 8001cc2:	2300      	moveq	r3, #0
 8001cc4:	b2db      	uxtb	r3, r3
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d000      	beq.n	8001ccc <DMA1_Channel1_IRQHandler+0x60>
 8001cca:	e7f3      	b.n	8001cb4 <DMA1_Channel1_IRQHandler+0x48>
		DMA1_Channel1->CMAR = (uint32_t)(ADC_DATA_DUMP.ADC_DMA_buffer_array) + ADC_DATA_DUMP.averaging_step * SENSORS_QTY * sizeof(uint32_t);
 8001ccc:	4b15      	ldr	r3, [pc, #84]	; (8001d24 <DMA1_Channel1_IRQHandler+0xb8>)
 8001cce:	f8d3 2190 	ldr.w	r2, [r3, #400]	; 0x190
 8001cd2:	4613      	mov	r3, r2
 8001cd4:	009b      	lsls	r3, r3, #2
 8001cd6:	4413      	add	r3, r2
 8001cd8:	00db      	lsls	r3, r3, #3
 8001cda:	4619      	mov	r1, r3
 8001cdc:	4b11      	ldr	r3, [pc, #68]	; (8001d24 <DMA1_Channel1_IRQHandler+0xb8>)
 8001cde:	4a12      	ldr	r2, [pc, #72]	; (8001d28 <DMA1_Channel1_IRQHandler+0xbc>)
 8001ce0:	440b      	add	r3, r1
 8001ce2:	60d3      	str	r3, [r2, #12]
		DMA1_Channel1->CCR	 |= DMA_CCR_EN;							// CHANNEL 1 ENABLE
 8001ce4:	4b10      	ldr	r3, [pc, #64]	; (8001d28 <DMA1_Channel1_IRQHandler+0xbc>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a0f      	ldr	r2, [pc, #60]	; (8001d28 <DMA1_Channel1_IRQHandler+0xbc>)
 8001cea:	f043 0301 	orr.w	r3, r3, #1
 8001cee:	6013      	str	r3, [r2, #0]
		while((DMA1_Channel1->CCR & DMA_CCR_EN) != DMA_CCR_EN);
 8001cf0:	4b0d      	ldr	r3, [pc, #52]	; (8001d28 <DMA1_Channel1_IRQHandler+0xbc>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f003 0301 	and.w	r3, r3, #1
 8001cf8:	2b01      	cmp	r3, #1
 8001cfa:	bf14      	ite	ne
 8001cfc:	2301      	movne	r3, #1
 8001cfe:	2300      	moveq	r3, #0
 8001d00:	b2db      	uxtb	r3, r3
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d000      	beq.n	8001d08 <DMA1_Channel1_IRQHandler+0x9c>
 8001d06:	e7f3      	b.n	8001cf0 <DMA1_Channel1_IRQHandler+0x84>
		ADC_DATA_DUMP.averaging_step++;
 8001d08:	4b06      	ldr	r3, [pc, #24]	; (8001d24 <DMA1_Channel1_IRQHandler+0xb8>)
 8001d0a:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 8001d0e:	3301      	adds	r3, #1
 8001d10:	4a04      	ldr	r2, [pc, #16]	; (8001d24 <DMA1_Channel1_IRQHandler+0xb8>)
 8001d12:	f8c2 3190 	str.w	r3, [r2, #400]	; 0x190
}
 8001d16:	bf00      	nop
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bc80      	pop	{r7}
 8001d1c:	4770      	bx	lr
 8001d1e:	bf00      	nop
 8001d20:	40020000 	.word	0x40020000
 8001d24:	20000468 	.word	0x20000468
 8001d28:	40020008 	.word	0x40020008

08001d2c <TIM2_IRQHandler>:

extern "C" void TIM2_IRQHandler(void)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	af00      	add	r7, sp, #0
	TIM2 ->SR  &= ~TIM_SR_UIF;			// CLEAR INTERRUPT FLAG
 8001d30:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001d34:	691b      	ldr	r3, [r3, #16]
 8001d36:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001d3a:	f023 0301 	bic.w	r3, r3, #1
 8001d3e:	6113      	str	r3, [r2, #16]
//	ADC1->CR2  |= ADC_CR2_SWSTART;   	// Start ADC conversion
}
 8001d40:	bf00      	nop
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bc80      	pop	{r7}
 8001d46:	4770      	bx	lr

08001d48 <main>:
// HANDLERS END HERE/////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////////////
// MAIN //////////////////////////////////////////////////////////////////////////////////////////
int main(void)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	af00      	add	r7, sp, #0
    init_sysClock();
 8001d4c:	f7ff fb16 	bl	800137c <_Z13init_sysClockv>
    init_SysTick();
 8001d50:	f7ff fba6 	bl	80014a0 <_Z12init_SysTickv>
    init_GPIO();
 8001d54:	f7ff fb7c 	bl	8001450 <_Z9init_GPIOv>
    init_DMA();
 8001d58:	f7ff fe1c 	bl	8001994 <_Z8init_DMAv>
    init_ADC();
 8001d5c:	f7ff fbc8 	bl	80014f0 <_Z8init_ADCv>
    init_USART();
 8001d60:	f7ff fdd2 	bl	8001908 <_Z10init_USARTv>
    init_TIM2(100);										// initialize TIM2 with 100ms overflow interval
 8001d64:	2064      	movs	r0, #100	; 0x64
 8001d66:	f7ff fe57 	bl	8001a18 <_Z9init_TIM2i>
    NVIC_EnableIRQ(SysTick_IRQn);	  					// ENABLE SysTick interrupt
 8001d6a:	f04f 30ff 	mov.w	r0, #4294967295
 8001d6e:	f7ff ff13 	bl	8001b98 <__NVIC_EnableIRQ>
    NVIC_EnableIRQ(ADC1_2_IRQn);	  					// ENABLING ADC INTERRUPTION
 8001d72:	2012      	movs	r0, #18
 8001d74:	f7ff ff10 	bl	8001b98 <__NVIC_EnableIRQ>
    NVIC_EnableIRQ(DMA1_Channel1_IRQn);					// ENABLING DMA INTERRUPT
 8001d78:	200b      	movs	r0, #11
 8001d7a:	f7ff ff0d 	bl	8001b98 <__NVIC_EnableIRQ>
    NVIC_EnableIRQ(TIM2_IRQn);							// ENABLING INTERRUPT FOR TIM2
 8001d7e:	201c      	movs	r0, #28
 8001d80:	f7ff ff0a 	bl	8001b98 <__NVIC_EnableIRQ>
    GPIOC->ODR  |= GPIO_ODR_ODR13;	  					// SET LED GPIO HIGH (LIGHT OFF)
 8001d84:	4b22      	ldr	r3, [pc, #136]	; (8001e10 <main+0xc8>)
 8001d86:	68db      	ldr	r3, [r3, #12]
 8001d88:	4a21      	ldr	r2, [pc, #132]	; (8001e10 <main+0xc8>)
 8001d8a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001d8e:	60d3      	str	r3, [r2, #12]

		// 		const char* message = "---5s of your life is gone--- \n";
		//		UART_transmit_string(message);
		//		PROCESS_DATA(ADC_DATA_DUMP.ADC_DMA_buffer_array);
		//		PREPARE_MESSAGE();	// SENDS ALL THE PREPARED DATA THROUGH UART
		if(trigger_0001ms.trigger_get_state() == true)
 8001d90:	4820      	ldr	r0, [pc, #128]	; (8001e14 <main+0xcc>)
 8001d92:	f7ff fef5 	bl	8001b80 <_ZN7Trigger17trigger_get_stateEv>
 8001d96:	4603      	mov	r3, r0
 8001d98:	2b01      	cmp	r3, #1
 8001d9a:	bf0c      	ite	eq
 8001d9c:	2301      	moveq	r3, #1
 8001d9e:	2300      	movne	r3, #0
 8001da0:	b2db      	uxtb	r3, r3
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d002      	beq.n	8001dac <main+0x64>
		{
			trigger_0001ms.trigger_reset();
 8001da6:	481b      	ldr	r0, [pc, #108]	; (8001e14 <main+0xcc>)
 8001da8:	f7ff fede 	bl	8001b68 <_ZN7Trigger13trigger_resetEv>
			//		GPIOC->ODR &= ~GPIO_ODR_ODR13;	  // SET LED GPIO LOW (LIGHT ON)
			//		GPIOC->ODR |= GPIO_ODR_ODR13;	  // SET LED GPIO HIGH (LIGHT OFF)
			//		GPIOC->ODR ^= GPIO_ODR_ODR13;	  // INVERT LED GPIO
		}

		if(trigger_0100ms.trigger_get_state() == true)
 8001dac:	481a      	ldr	r0, [pc, #104]	; (8001e18 <main+0xd0>)
 8001dae:	f7ff fee7 	bl	8001b80 <_ZN7Trigger17trigger_get_stateEv>
 8001db2:	4603      	mov	r3, r0
 8001db4:	2b01      	cmp	r3, #1
 8001db6:	bf0c      	ite	eq
 8001db8:	2301      	moveq	r3, #1
 8001dba:	2300      	movne	r3, #0
 8001dbc:	b2db      	uxtb	r3, r3
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d002      	beq.n	8001dc8 <main+0x80>
		{
			trigger_0100ms.trigger_reset();
 8001dc2:	4815      	ldr	r0, [pc, #84]	; (8001e18 <main+0xd0>)
 8001dc4:	f7ff fed0 	bl	8001b68 <_ZN7Trigger13trigger_resetEv>
		}

		if(trigger_0500ms.trigger_get_state() == true)
 8001dc8:	4814      	ldr	r0, [pc, #80]	; (8001e1c <main+0xd4>)
 8001dca:	f7ff fed9 	bl	8001b80 <_ZN7Trigger17trigger_get_stateEv>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	2b01      	cmp	r3, #1
 8001dd2:	bf0c      	ite	eq
 8001dd4:	2301      	moveq	r3, #1
 8001dd6:	2300      	movne	r3, #0
 8001dd8:	b2db      	uxtb	r3, r3
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d002      	beq.n	8001de4 <main+0x9c>
		{
			trigger_0500ms.trigger_reset();
 8001dde:	480f      	ldr	r0, [pc, #60]	; (8001e1c <main+0xd4>)
 8001de0:	f7ff fec2 	bl	8001b68 <_ZN7Trigger13trigger_resetEv>
			//		GPIOC->ODR &= ~GPIO_ODR_ODR13;	  // SET LED GPIO LOW (LIGHT ON)
			//		GPIOC->ODR |= GPIO_ODR_ODR13;	  // SET LED GPIO HIGH (LIGHT OFF)
			//		GPIOC->ODR ^= GPIO_ODR_ODR13;	  // INVERT LED GPIO
		}

		if(trigger_1000ms.trigger_get_state() == true)
 8001de4:	480e      	ldr	r0, [pc, #56]	; (8001e20 <main+0xd8>)
 8001de6:	f7ff fecb 	bl	8001b80 <_ZN7Trigger17trigger_get_stateEv>
 8001dea:	4603      	mov	r3, r0
 8001dec:	2b01      	cmp	r3, #1
 8001dee:	bf0c      	ite	eq
 8001df0:	2301      	moveq	r3, #1
 8001df2:	2300      	movne	r3, #0
 8001df4:	b2db      	uxtb	r3, r3
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d0ca      	beq.n	8001d90 <main+0x48>
		{
				{
					trigger_1000ms.trigger_reset();
 8001dfa:	4809      	ldr	r0, [pc, #36]	; (8001e20 <main+0xd8>)
 8001dfc:	f7ff feb4 	bl	8001b68 <_ZN7Trigger13trigger_resetEv>
					//		GPIOC->ODR &= ~GPIO_ODR_ODR13;	  // SET LED GPIO LOW (LIGHT ON)
					//		GPIOC->ODR |= GPIO_ODR_ODR13;	  // SET LED GPIO HIGH (LIGHT OFF)
							GPIOC->ODR ^= GPIO_ODR_ODR13;	  // INVERT LED GPIO
 8001e00:	4b03      	ldr	r3, [pc, #12]	; (8001e10 <main+0xc8>)
 8001e02:	68db      	ldr	r3, [r3, #12]
 8001e04:	4a02      	ldr	r2, [pc, #8]	; (8001e10 <main+0xc8>)
 8001e06:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001e0a:	60d3      	str	r3, [r2, #12]
		if(trigger_0001ms.trigger_get_state() == true)
 8001e0c:	e7c0      	b.n	8001d90 <main+0x48>
 8001e0e:	bf00      	nop
 8001e10:	40011000 	.word	0x40011000
 8001e14:	2000063c 	.word	0x2000063c
 8001e18:	20000654 	.word	0x20000654
 8001e1c:	20000660 	.word	0x20000660
 8001e20:	2000066c 	.word	0x2000066c

08001e24 <_Z41__static_initialization_and_destruction_0ii>:
				}

		}
	}// WHILE ENDS HERE
}// MAIN ENDS HERE
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b082      	sub	sp, #8
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
 8001e2c:	6039      	str	r1, [r7, #0]
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2b01      	cmp	r3, #1
 8001e32:	d121      	bne.n	8001e78 <_Z41__static_initialization_and_destruction_0ii+0x54>
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d11c      	bne.n	8001e78 <_Z41__static_initialization_and_destruction_0ii+0x54>
volatile ADC_dump_struct ADC_DATA_DUMP;							// variable creation
 8001e3e:	4810      	ldr	r0, [pc, #64]	; (8001e80 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8001e40:	f7ff fec6 	bl	8001bd0 <_ZN15ADC_dump_structC1Ev>
Buttons buttons_instance(my_buttons);							// CREATING CLASS "Buttons" instance
 8001e44:	490f      	ldr	r1, [pc, #60]	; (8001e84 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8001e46:	4810      	ldr	r0, [pc, #64]	; (8001e88 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8001e48:	f7ff f922 	bl	8001090 <_ZN7ButtonsC1EP9buttons_t>
Trigger trigger_0001ms(1);										// CREATING CLASS "TRIGGER" instance, with argument "1ms"
 8001e4c:	2101      	movs	r1, #1
 8001e4e:	480f      	ldr	r0, [pc, #60]	; (8001e8c <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8001e50:	f7ff fe48 	bl	8001ae4 <_ZN7TriggerC1Ei>
Trigger trigger_0010ms(10);										// CREATING CLASS "TRIGGER" instance, with argument "10ms"
 8001e54:	210a      	movs	r1, #10
 8001e56:	480e      	ldr	r0, [pc, #56]	; (8001e90 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8001e58:	f7ff fe44 	bl	8001ae4 <_ZN7TriggerC1Ei>
Trigger trigger_0100ms(100);										// CREATING CLASS "TRIGGER" instance, with argument "100ms"
 8001e5c:	2164      	movs	r1, #100	; 0x64
 8001e5e:	480d      	ldr	r0, [pc, #52]	; (8001e94 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8001e60:	f7ff fe40 	bl	8001ae4 <_ZN7TriggerC1Ei>
Trigger trigger_0500ms(500);										// CREATING CLASS "TRIGGER" instance, with argument "500ms"
 8001e64:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001e68:	480b      	ldr	r0, [pc, #44]	; (8001e98 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 8001e6a:	f7ff fe3b 	bl	8001ae4 <_ZN7TriggerC1Ei>
Trigger trigger_1000ms(1000);										// CREATING CLASS "TRIGGER" instance, with argument "500ms"
 8001e6e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001e72:	480a      	ldr	r0, [pc, #40]	; (8001e9c <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8001e74:	f7ff fe36 	bl	8001ae4 <_ZN7TriggerC1Ei>
}// MAIN ENDS HERE
 8001e78:	bf00      	nop
 8001e7a:	3708      	adds	r7, #8
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd80      	pop	{r7, pc}
 8001e80:	20000468 	.word	0x20000468
 8001e84:	20000000 	.word	0x20000000
 8001e88:	20000600 	.word	0x20000600
 8001e8c:	2000063c 	.word	0x2000063c
 8001e90:	20000648 	.word	0x20000648
 8001e94:	20000654 	.word	0x20000654
 8001e98:	20000660 	.word	0x20000660
 8001e9c:	2000066c 	.word	0x2000066c

08001ea0 <_GLOBAL__sub_I_global_SysTick_Cnt>:
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	af00      	add	r7, sp, #0
 8001ea4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001ea8:	2001      	movs	r0, #1
 8001eaa:	f7ff ffbb 	bl	8001e24 <_Z41__static_initialization_and_destruction_0ii>
 8001eae:	bd80      	pop	{r7, pc}

08001eb0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	af00      	add	r7, sp, #0
	return 1;
 8001eb4:	2301      	movs	r3, #1
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bc80      	pop	{r7}
 8001ebc:	4770      	bx	lr

08001ebe <_kill>:

int _kill(int pid, int sig)
{
 8001ebe:	b580      	push	{r7, lr}
 8001ec0:	b082      	sub	sp, #8
 8001ec2:	af00      	add	r7, sp, #0
 8001ec4:	6078      	str	r0, [r7, #4]
 8001ec6:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001ec8:	f000 f8dc 	bl	8002084 <__errno>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	2216      	movs	r2, #22
 8001ed0:	601a      	str	r2, [r3, #0]
	return -1;
 8001ed2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	3708      	adds	r7, #8
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}

08001ede <_exit>:

void _exit (int status)
{
 8001ede:	b580      	push	{r7, lr}
 8001ee0:	b082      	sub	sp, #8
 8001ee2:	af00      	add	r7, sp, #0
 8001ee4:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001ee6:	f04f 31ff 	mov.w	r1, #4294967295
 8001eea:	6878      	ldr	r0, [r7, #4]
 8001eec:	f7ff ffe7 	bl	8001ebe <_kill>
	while (1) {}		/* Make sure we hang here */
 8001ef0:	e7fe      	b.n	8001ef0 <_exit+0x12>

08001ef2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ef2:	b580      	push	{r7, lr}
 8001ef4:	b086      	sub	sp, #24
 8001ef6:	af00      	add	r7, sp, #0
 8001ef8:	60f8      	str	r0, [r7, #12]
 8001efa:	60b9      	str	r1, [r7, #8]
 8001efc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001efe:	2300      	movs	r3, #0
 8001f00:	617b      	str	r3, [r7, #20]
 8001f02:	e00a      	b.n	8001f1a <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001f04:	f3af 8000 	nop.w
 8001f08:	4601      	mov	r1, r0
 8001f0a:	68bb      	ldr	r3, [r7, #8]
 8001f0c:	1c5a      	adds	r2, r3, #1
 8001f0e:	60ba      	str	r2, [r7, #8]
 8001f10:	b2ca      	uxtb	r2, r1
 8001f12:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f14:	697b      	ldr	r3, [r7, #20]
 8001f16:	3301      	adds	r3, #1
 8001f18:	617b      	str	r3, [r7, #20]
 8001f1a:	697a      	ldr	r2, [r7, #20]
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	429a      	cmp	r2, r3
 8001f20:	dbf0      	blt.n	8001f04 <_read+0x12>
	}

return len;
 8001f22:	687b      	ldr	r3, [r7, #4]
}
 8001f24:	4618      	mov	r0, r3
 8001f26:	3718      	adds	r7, #24
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}

08001f2c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b086      	sub	sp, #24
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	60f8      	str	r0, [r7, #12]
 8001f34:	60b9      	str	r1, [r7, #8]
 8001f36:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f38:	2300      	movs	r3, #0
 8001f3a:	617b      	str	r3, [r7, #20]
 8001f3c:	e009      	b.n	8001f52 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001f3e:	68bb      	ldr	r3, [r7, #8]
 8001f40:	1c5a      	adds	r2, r3, #1
 8001f42:	60ba      	str	r2, [r7, #8]
 8001f44:	781b      	ldrb	r3, [r3, #0]
 8001f46:	4618      	mov	r0, r3
 8001f48:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f4c:	697b      	ldr	r3, [r7, #20]
 8001f4e:	3301      	adds	r3, #1
 8001f50:	617b      	str	r3, [r7, #20]
 8001f52:	697a      	ldr	r2, [r7, #20]
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	429a      	cmp	r2, r3
 8001f58:	dbf1      	blt.n	8001f3e <_write+0x12>
	}
	return len;
 8001f5a:	687b      	ldr	r3, [r7, #4]
}
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	3718      	adds	r7, #24
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bd80      	pop	{r7, pc}

08001f64 <_close>:

int _close(int file)
{
 8001f64:	b480      	push	{r7}
 8001f66:	b083      	sub	sp, #12
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
	return -1;
 8001f6c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	370c      	adds	r7, #12
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bc80      	pop	{r7}
 8001f78:	4770      	bx	lr

08001f7a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f7a:	b480      	push	{r7}
 8001f7c:	b083      	sub	sp, #12
 8001f7e:	af00      	add	r7, sp, #0
 8001f80:	6078      	str	r0, [r7, #4]
 8001f82:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f8a:	605a      	str	r2, [r3, #4]
	return 0;
 8001f8c:	2300      	movs	r3, #0
}
 8001f8e:	4618      	mov	r0, r3
 8001f90:	370c      	adds	r7, #12
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bc80      	pop	{r7}
 8001f96:	4770      	bx	lr

08001f98 <_isatty>:

int _isatty(int file)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b083      	sub	sp, #12
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
	return 1;
 8001fa0:	2301      	movs	r3, #1
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	370c      	adds	r7, #12
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bc80      	pop	{r7}
 8001faa:	4770      	bx	lr

08001fac <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b085      	sub	sp, #20
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	60f8      	str	r0, [r7, #12]
 8001fb4:	60b9      	str	r1, [r7, #8]
 8001fb6:	607a      	str	r2, [r7, #4]
	return 0;
 8001fb8:	2300      	movs	r3, #0
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	3714      	adds	r7, #20
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bc80      	pop	{r7}
 8001fc2:	4770      	bx	lr

08001fc4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b086      	sub	sp, #24
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001fcc:	4a14      	ldr	r2, [pc, #80]	; (8002020 <_sbrk+0x5c>)
 8001fce:	4b15      	ldr	r3, [pc, #84]	; (8002024 <_sbrk+0x60>)
 8001fd0:	1ad3      	subs	r3, r2, r3
 8001fd2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001fd4:	697b      	ldr	r3, [r7, #20]
 8001fd6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001fd8:	4b13      	ldr	r3, [pc, #76]	; (8002028 <_sbrk+0x64>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d102      	bne.n	8001fe6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001fe0:	4b11      	ldr	r3, [pc, #68]	; (8002028 <_sbrk+0x64>)
 8001fe2:	4a12      	ldr	r2, [pc, #72]	; (800202c <_sbrk+0x68>)
 8001fe4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001fe6:	4b10      	ldr	r3, [pc, #64]	; (8002028 <_sbrk+0x64>)
 8001fe8:	681a      	ldr	r2, [r3, #0]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	4413      	add	r3, r2
 8001fee:	693a      	ldr	r2, [r7, #16]
 8001ff0:	429a      	cmp	r2, r3
 8001ff2:	d207      	bcs.n	8002004 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ff4:	f000 f846 	bl	8002084 <__errno>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	220c      	movs	r2, #12
 8001ffc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ffe:	f04f 33ff 	mov.w	r3, #4294967295
 8002002:	e009      	b.n	8002018 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002004:	4b08      	ldr	r3, [pc, #32]	; (8002028 <_sbrk+0x64>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800200a:	4b07      	ldr	r3, [pc, #28]	; (8002028 <_sbrk+0x64>)
 800200c:	681a      	ldr	r2, [r3, #0]
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	4413      	add	r3, r2
 8002012:	4a05      	ldr	r2, [pc, #20]	; (8002028 <_sbrk+0x64>)
 8002014:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002016:	68fb      	ldr	r3, [r7, #12]
}
 8002018:	4618      	mov	r0, r3
 800201a:	3718      	adds	r7, #24
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}
 8002020:	20005000 	.word	0x20005000
 8002024:	00000400 	.word	0x00000400
 8002028:	20000678 	.word	0x20000678
 800202c:	20000690 	.word	0x20000690

08002030 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002030:	480d      	ldr	r0, [pc, #52]	; (8002068 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002032:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002034:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002038:	480c      	ldr	r0, [pc, #48]	; (800206c <LoopForever+0x6>)
  ldr r1, =_edata
 800203a:	490d      	ldr	r1, [pc, #52]	; (8002070 <LoopForever+0xa>)
  ldr r2, =_sidata
 800203c:	4a0d      	ldr	r2, [pc, #52]	; (8002074 <LoopForever+0xe>)
  movs r3, #0
 800203e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002040:	e002      	b.n	8002048 <LoopCopyDataInit>

08002042 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002042:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002044:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002046:	3304      	adds	r3, #4

08002048 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002048:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800204a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800204c:	d3f9      	bcc.n	8002042 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800204e:	4a0a      	ldr	r2, [pc, #40]	; (8002078 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002050:	4c0a      	ldr	r4, [pc, #40]	; (800207c <LoopForever+0x16>)
  movs r3, #0
 8002052:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002054:	e001      	b.n	800205a <LoopFillZerobss>

08002056 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002056:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002058:	3204      	adds	r2, #4

0800205a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800205a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800205c:	d3fb      	bcc.n	8002056 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800205e:	f000 f817 	bl	8002090 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002062:	f7ff fe71 	bl	8001d48 <main>

08002066 <LoopForever>:

LoopForever:
    b LoopForever
 8002066:	e7fe      	b.n	8002066 <LoopForever>
  ldr   r0, =_estack
 8002068:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 800206c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002070:	20000448 	.word	0x20000448
  ldr r2, =_sidata
 8002074:	08004f90 	.word	0x08004f90
  ldr r2, =_sbss
 8002078:	20000448 	.word	0x20000448
  ldr r4, =_ebss
 800207c:	2000068c 	.word	0x2000068c

08002080 <ADC3_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002080:	e7fe      	b.n	8002080 <ADC3_IRQHandler>
	...

08002084 <__errno>:
 8002084:	4b01      	ldr	r3, [pc, #4]	; (800208c <__errno+0x8>)
 8002086:	6818      	ldr	r0, [r3, #0]
 8002088:	4770      	bx	lr
 800208a:	bf00      	nop
 800208c:	20000278 	.word	0x20000278

08002090 <__libc_init_array>:
 8002090:	b570      	push	{r4, r5, r6, lr}
 8002092:	2600      	movs	r6, #0
 8002094:	4d0c      	ldr	r5, [pc, #48]	; (80020c8 <__libc_init_array+0x38>)
 8002096:	4c0d      	ldr	r4, [pc, #52]	; (80020cc <__libc_init_array+0x3c>)
 8002098:	1b64      	subs	r4, r4, r5
 800209a:	10a4      	asrs	r4, r4, #2
 800209c:	42a6      	cmp	r6, r4
 800209e:	d109      	bne.n	80020b4 <__libc_init_array+0x24>
 80020a0:	f002 fd2e 	bl	8004b00 <_init>
 80020a4:	2600      	movs	r6, #0
 80020a6:	4d0a      	ldr	r5, [pc, #40]	; (80020d0 <__libc_init_array+0x40>)
 80020a8:	4c0a      	ldr	r4, [pc, #40]	; (80020d4 <__libc_init_array+0x44>)
 80020aa:	1b64      	subs	r4, r4, r5
 80020ac:	10a4      	asrs	r4, r4, #2
 80020ae:	42a6      	cmp	r6, r4
 80020b0:	d105      	bne.n	80020be <__libc_init_array+0x2e>
 80020b2:	bd70      	pop	{r4, r5, r6, pc}
 80020b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80020b8:	4798      	blx	r3
 80020ba:	3601      	adds	r6, #1
 80020bc:	e7ee      	b.n	800209c <__libc_init_array+0xc>
 80020be:	f855 3b04 	ldr.w	r3, [r5], #4
 80020c2:	4798      	blx	r3
 80020c4:	3601      	adds	r6, #1
 80020c6:	e7f2      	b.n	80020ae <__libc_init_array+0x1e>
 80020c8:	08004f84 	.word	0x08004f84
 80020cc:	08004f84 	.word	0x08004f84
 80020d0:	08004f84 	.word	0x08004f84
 80020d4:	08004f8c 	.word	0x08004f8c

080020d8 <memset>:
 80020d8:	4603      	mov	r3, r0
 80020da:	4402      	add	r2, r0
 80020dc:	4293      	cmp	r3, r2
 80020de:	d100      	bne.n	80020e2 <memset+0xa>
 80020e0:	4770      	bx	lr
 80020e2:	f803 1b01 	strb.w	r1, [r3], #1
 80020e6:	e7f9      	b.n	80020dc <memset+0x4>

080020e8 <__cvt>:
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80020ee:	461f      	mov	r7, r3
 80020f0:	bfbb      	ittet	lt
 80020f2:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80020f6:	461f      	movlt	r7, r3
 80020f8:	2300      	movge	r3, #0
 80020fa:	232d      	movlt	r3, #45	; 0x2d
 80020fc:	b088      	sub	sp, #32
 80020fe:	4614      	mov	r4, r2
 8002100:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8002102:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8002104:	7013      	strb	r3, [r2, #0]
 8002106:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8002108:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800210c:	f023 0820 	bic.w	r8, r3, #32
 8002110:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8002114:	d005      	beq.n	8002122 <__cvt+0x3a>
 8002116:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800211a:	d100      	bne.n	800211e <__cvt+0x36>
 800211c:	3501      	adds	r5, #1
 800211e:	2302      	movs	r3, #2
 8002120:	e000      	b.n	8002124 <__cvt+0x3c>
 8002122:	2303      	movs	r3, #3
 8002124:	aa07      	add	r2, sp, #28
 8002126:	9204      	str	r2, [sp, #16]
 8002128:	aa06      	add	r2, sp, #24
 800212a:	e9cd a202 	strd	sl, r2, [sp, #8]
 800212e:	e9cd 3500 	strd	r3, r5, [sp]
 8002132:	4622      	mov	r2, r4
 8002134:	463b      	mov	r3, r7
 8002136:	f000 fcc3 	bl	8002ac0 <_dtoa_r>
 800213a:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800213e:	4606      	mov	r6, r0
 8002140:	d102      	bne.n	8002148 <__cvt+0x60>
 8002142:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8002144:	07db      	lsls	r3, r3, #31
 8002146:	d522      	bpl.n	800218e <__cvt+0xa6>
 8002148:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800214c:	eb06 0905 	add.w	r9, r6, r5
 8002150:	d110      	bne.n	8002174 <__cvt+0x8c>
 8002152:	7833      	ldrb	r3, [r6, #0]
 8002154:	2b30      	cmp	r3, #48	; 0x30
 8002156:	d10a      	bne.n	800216e <__cvt+0x86>
 8002158:	2200      	movs	r2, #0
 800215a:	2300      	movs	r3, #0
 800215c:	4620      	mov	r0, r4
 800215e:	4639      	mov	r1, r7
 8002160:	f7fe ff26 	bl	8000fb0 <__aeabi_dcmpeq>
 8002164:	b918      	cbnz	r0, 800216e <__cvt+0x86>
 8002166:	f1c5 0501 	rsb	r5, r5, #1
 800216a:	f8ca 5000 	str.w	r5, [sl]
 800216e:	f8da 3000 	ldr.w	r3, [sl]
 8002172:	4499      	add	r9, r3
 8002174:	2200      	movs	r2, #0
 8002176:	2300      	movs	r3, #0
 8002178:	4620      	mov	r0, r4
 800217a:	4639      	mov	r1, r7
 800217c:	f7fe ff18 	bl	8000fb0 <__aeabi_dcmpeq>
 8002180:	b108      	cbz	r0, 8002186 <__cvt+0x9e>
 8002182:	f8cd 901c 	str.w	r9, [sp, #28]
 8002186:	2230      	movs	r2, #48	; 0x30
 8002188:	9b07      	ldr	r3, [sp, #28]
 800218a:	454b      	cmp	r3, r9
 800218c:	d307      	bcc.n	800219e <__cvt+0xb6>
 800218e:	4630      	mov	r0, r6
 8002190:	9b07      	ldr	r3, [sp, #28]
 8002192:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8002194:	1b9b      	subs	r3, r3, r6
 8002196:	6013      	str	r3, [r2, #0]
 8002198:	b008      	add	sp, #32
 800219a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800219e:	1c59      	adds	r1, r3, #1
 80021a0:	9107      	str	r1, [sp, #28]
 80021a2:	701a      	strb	r2, [r3, #0]
 80021a4:	e7f0      	b.n	8002188 <__cvt+0xa0>

080021a6 <__exponent>:
 80021a6:	4603      	mov	r3, r0
 80021a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80021aa:	2900      	cmp	r1, #0
 80021ac:	f803 2b02 	strb.w	r2, [r3], #2
 80021b0:	bfb6      	itet	lt
 80021b2:	222d      	movlt	r2, #45	; 0x2d
 80021b4:	222b      	movge	r2, #43	; 0x2b
 80021b6:	4249      	neglt	r1, r1
 80021b8:	2909      	cmp	r1, #9
 80021ba:	7042      	strb	r2, [r0, #1]
 80021bc:	dd2b      	ble.n	8002216 <__exponent+0x70>
 80021be:	f10d 0407 	add.w	r4, sp, #7
 80021c2:	46a4      	mov	ip, r4
 80021c4:	270a      	movs	r7, #10
 80021c6:	fb91 f6f7 	sdiv	r6, r1, r7
 80021ca:	460a      	mov	r2, r1
 80021cc:	46a6      	mov	lr, r4
 80021ce:	fb07 1516 	mls	r5, r7, r6, r1
 80021d2:	2a63      	cmp	r2, #99	; 0x63
 80021d4:	f105 0530 	add.w	r5, r5, #48	; 0x30
 80021d8:	4631      	mov	r1, r6
 80021da:	f104 34ff 	add.w	r4, r4, #4294967295
 80021de:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80021e2:	dcf0      	bgt.n	80021c6 <__exponent+0x20>
 80021e4:	3130      	adds	r1, #48	; 0x30
 80021e6:	f1ae 0502 	sub.w	r5, lr, #2
 80021ea:	f804 1c01 	strb.w	r1, [r4, #-1]
 80021ee:	4629      	mov	r1, r5
 80021f0:	1c44      	adds	r4, r0, #1
 80021f2:	4561      	cmp	r1, ip
 80021f4:	d30a      	bcc.n	800220c <__exponent+0x66>
 80021f6:	f10d 0209 	add.w	r2, sp, #9
 80021fa:	eba2 020e 	sub.w	r2, r2, lr
 80021fe:	4565      	cmp	r5, ip
 8002200:	bf88      	it	hi
 8002202:	2200      	movhi	r2, #0
 8002204:	4413      	add	r3, r2
 8002206:	1a18      	subs	r0, r3, r0
 8002208:	b003      	add	sp, #12
 800220a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800220c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002210:	f804 2f01 	strb.w	r2, [r4, #1]!
 8002214:	e7ed      	b.n	80021f2 <__exponent+0x4c>
 8002216:	2330      	movs	r3, #48	; 0x30
 8002218:	3130      	adds	r1, #48	; 0x30
 800221a:	7083      	strb	r3, [r0, #2]
 800221c:	70c1      	strb	r1, [r0, #3]
 800221e:	1d03      	adds	r3, r0, #4
 8002220:	e7f1      	b.n	8002206 <__exponent+0x60>
	...

08002224 <_printf_float>:
 8002224:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002228:	b091      	sub	sp, #68	; 0x44
 800222a:	460c      	mov	r4, r1
 800222c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8002230:	4616      	mov	r6, r2
 8002232:	461f      	mov	r7, r3
 8002234:	4605      	mov	r5, r0
 8002236:	f001 fa31 	bl	800369c <_localeconv_r>
 800223a:	6803      	ldr	r3, [r0, #0]
 800223c:	4618      	mov	r0, r3
 800223e:	9309      	str	r3, [sp, #36]	; 0x24
 8002240:	f7fe fe58 	bl	8000ef4 <strlen>
 8002244:	2300      	movs	r3, #0
 8002246:	930e      	str	r3, [sp, #56]	; 0x38
 8002248:	f8d8 3000 	ldr.w	r3, [r8]
 800224c:	900a      	str	r0, [sp, #40]	; 0x28
 800224e:	3307      	adds	r3, #7
 8002250:	f023 0307 	bic.w	r3, r3, #7
 8002254:	f103 0208 	add.w	r2, r3, #8
 8002258:	f894 9018 	ldrb.w	r9, [r4, #24]
 800225c:	f8d4 b000 	ldr.w	fp, [r4]
 8002260:	f8c8 2000 	str.w	r2, [r8]
 8002264:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002268:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800226c:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8002270:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8002274:	930b      	str	r3, [sp, #44]	; 0x2c
 8002276:	f04f 32ff 	mov.w	r2, #4294967295
 800227a:	4640      	mov	r0, r8
 800227c:	4b9c      	ldr	r3, [pc, #624]	; (80024f0 <_printf_float+0x2cc>)
 800227e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8002280:	f7fe fec8 	bl	8001014 <__aeabi_dcmpun>
 8002284:	bb70      	cbnz	r0, 80022e4 <_printf_float+0xc0>
 8002286:	f04f 32ff 	mov.w	r2, #4294967295
 800228a:	4640      	mov	r0, r8
 800228c:	4b98      	ldr	r3, [pc, #608]	; (80024f0 <_printf_float+0x2cc>)
 800228e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8002290:	f7fe fea2 	bl	8000fd8 <__aeabi_dcmple>
 8002294:	bb30      	cbnz	r0, 80022e4 <_printf_float+0xc0>
 8002296:	2200      	movs	r2, #0
 8002298:	2300      	movs	r3, #0
 800229a:	4640      	mov	r0, r8
 800229c:	4651      	mov	r1, sl
 800229e:	f7fe fe91 	bl	8000fc4 <__aeabi_dcmplt>
 80022a2:	b110      	cbz	r0, 80022aa <_printf_float+0x86>
 80022a4:	232d      	movs	r3, #45	; 0x2d
 80022a6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80022aa:	4b92      	ldr	r3, [pc, #584]	; (80024f4 <_printf_float+0x2d0>)
 80022ac:	4892      	ldr	r0, [pc, #584]	; (80024f8 <_printf_float+0x2d4>)
 80022ae:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80022b2:	bf94      	ite	ls
 80022b4:	4698      	movls	r8, r3
 80022b6:	4680      	movhi	r8, r0
 80022b8:	2303      	movs	r3, #3
 80022ba:	f04f 0a00 	mov.w	sl, #0
 80022be:	6123      	str	r3, [r4, #16]
 80022c0:	f02b 0304 	bic.w	r3, fp, #4
 80022c4:	6023      	str	r3, [r4, #0]
 80022c6:	4633      	mov	r3, r6
 80022c8:	4621      	mov	r1, r4
 80022ca:	4628      	mov	r0, r5
 80022cc:	9700      	str	r7, [sp, #0]
 80022ce:	aa0f      	add	r2, sp, #60	; 0x3c
 80022d0:	f000 f9d4 	bl	800267c <_printf_common>
 80022d4:	3001      	adds	r0, #1
 80022d6:	f040 8090 	bne.w	80023fa <_printf_float+0x1d6>
 80022da:	f04f 30ff 	mov.w	r0, #4294967295
 80022de:	b011      	add	sp, #68	; 0x44
 80022e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80022e4:	4642      	mov	r2, r8
 80022e6:	4653      	mov	r3, sl
 80022e8:	4640      	mov	r0, r8
 80022ea:	4651      	mov	r1, sl
 80022ec:	f7fe fe92 	bl	8001014 <__aeabi_dcmpun>
 80022f0:	b148      	cbz	r0, 8002306 <_printf_float+0xe2>
 80022f2:	f1ba 0f00 	cmp.w	sl, #0
 80022f6:	bfb8      	it	lt
 80022f8:	232d      	movlt	r3, #45	; 0x2d
 80022fa:	4880      	ldr	r0, [pc, #512]	; (80024fc <_printf_float+0x2d8>)
 80022fc:	bfb8      	it	lt
 80022fe:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8002302:	4b7f      	ldr	r3, [pc, #508]	; (8002500 <_printf_float+0x2dc>)
 8002304:	e7d3      	b.n	80022ae <_printf_float+0x8a>
 8002306:	6863      	ldr	r3, [r4, #4]
 8002308:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800230c:	1c5a      	adds	r2, r3, #1
 800230e:	d142      	bne.n	8002396 <_printf_float+0x172>
 8002310:	2306      	movs	r3, #6
 8002312:	6063      	str	r3, [r4, #4]
 8002314:	2200      	movs	r2, #0
 8002316:	9206      	str	r2, [sp, #24]
 8002318:	aa0e      	add	r2, sp, #56	; 0x38
 800231a:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800231e:	aa0d      	add	r2, sp, #52	; 0x34
 8002320:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8002324:	9203      	str	r2, [sp, #12]
 8002326:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800232a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800232e:	6023      	str	r3, [r4, #0]
 8002330:	6863      	ldr	r3, [r4, #4]
 8002332:	4642      	mov	r2, r8
 8002334:	9300      	str	r3, [sp, #0]
 8002336:	4628      	mov	r0, r5
 8002338:	4653      	mov	r3, sl
 800233a:	910b      	str	r1, [sp, #44]	; 0x2c
 800233c:	f7ff fed4 	bl	80020e8 <__cvt>
 8002340:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8002342:	4680      	mov	r8, r0
 8002344:	2947      	cmp	r1, #71	; 0x47
 8002346:	990d      	ldr	r1, [sp, #52]	; 0x34
 8002348:	d108      	bne.n	800235c <_printf_float+0x138>
 800234a:	1cc8      	adds	r0, r1, #3
 800234c:	db02      	blt.n	8002354 <_printf_float+0x130>
 800234e:	6863      	ldr	r3, [r4, #4]
 8002350:	4299      	cmp	r1, r3
 8002352:	dd40      	ble.n	80023d6 <_printf_float+0x1b2>
 8002354:	f1a9 0902 	sub.w	r9, r9, #2
 8002358:	fa5f f989 	uxtb.w	r9, r9
 800235c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8002360:	d81f      	bhi.n	80023a2 <_printf_float+0x17e>
 8002362:	464a      	mov	r2, r9
 8002364:	3901      	subs	r1, #1
 8002366:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800236a:	910d      	str	r1, [sp, #52]	; 0x34
 800236c:	f7ff ff1b 	bl	80021a6 <__exponent>
 8002370:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002372:	4682      	mov	sl, r0
 8002374:	1813      	adds	r3, r2, r0
 8002376:	2a01      	cmp	r2, #1
 8002378:	6123      	str	r3, [r4, #16]
 800237a:	dc02      	bgt.n	8002382 <_printf_float+0x15e>
 800237c:	6822      	ldr	r2, [r4, #0]
 800237e:	07d2      	lsls	r2, r2, #31
 8002380:	d501      	bpl.n	8002386 <_printf_float+0x162>
 8002382:	3301      	adds	r3, #1
 8002384:	6123      	str	r3, [r4, #16]
 8002386:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800238a:	2b00      	cmp	r3, #0
 800238c:	d09b      	beq.n	80022c6 <_printf_float+0xa2>
 800238e:	232d      	movs	r3, #45	; 0x2d
 8002390:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002394:	e797      	b.n	80022c6 <_printf_float+0xa2>
 8002396:	2947      	cmp	r1, #71	; 0x47
 8002398:	d1bc      	bne.n	8002314 <_printf_float+0xf0>
 800239a:	2b00      	cmp	r3, #0
 800239c:	d1ba      	bne.n	8002314 <_printf_float+0xf0>
 800239e:	2301      	movs	r3, #1
 80023a0:	e7b7      	b.n	8002312 <_printf_float+0xee>
 80023a2:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80023a6:	d118      	bne.n	80023da <_printf_float+0x1b6>
 80023a8:	2900      	cmp	r1, #0
 80023aa:	6863      	ldr	r3, [r4, #4]
 80023ac:	dd0b      	ble.n	80023c6 <_printf_float+0x1a2>
 80023ae:	6121      	str	r1, [r4, #16]
 80023b0:	b913      	cbnz	r3, 80023b8 <_printf_float+0x194>
 80023b2:	6822      	ldr	r2, [r4, #0]
 80023b4:	07d0      	lsls	r0, r2, #31
 80023b6:	d502      	bpl.n	80023be <_printf_float+0x19a>
 80023b8:	3301      	adds	r3, #1
 80023ba:	440b      	add	r3, r1
 80023bc:	6123      	str	r3, [r4, #16]
 80023be:	f04f 0a00 	mov.w	sl, #0
 80023c2:	65a1      	str	r1, [r4, #88]	; 0x58
 80023c4:	e7df      	b.n	8002386 <_printf_float+0x162>
 80023c6:	b913      	cbnz	r3, 80023ce <_printf_float+0x1aa>
 80023c8:	6822      	ldr	r2, [r4, #0]
 80023ca:	07d2      	lsls	r2, r2, #31
 80023cc:	d501      	bpl.n	80023d2 <_printf_float+0x1ae>
 80023ce:	3302      	adds	r3, #2
 80023d0:	e7f4      	b.n	80023bc <_printf_float+0x198>
 80023d2:	2301      	movs	r3, #1
 80023d4:	e7f2      	b.n	80023bc <_printf_float+0x198>
 80023d6:	f04f 0967 	mov.w	r9, #103	; 0x67
 80023da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80023dc:	4299      	cmp	r1, r3
 80023de:	db05      	blt.n	80023ec <_printf_float+0x1c8>
 80023e0:	6823      	ldr	r3, [r4, #0]
 80023e2:	6121      	str	r1, [r4, #16]
 80023e4:	07d8      	lsls	r0, r3, #31
 80023e6:	d5ea      	bpl.n	80023be <_printf_float+0x19a>
 80023e8:	1c4b      	adds	r3, r1, #1
 80023ea:	e7e7      	b.n	80023bc <_printf_float+0x198>
 80023ec:	2900      	cmp	r1, #0
 80023ee:	bfcc      	ite	gt
 80023f0:	2201      	movgt	r2, #1
 80023f2:	f1c1 0202 	rsble	r2, r1, #2
 80023f6:	4413      	add	r3, r2
 80023f8:	e7e0      	b.n	80023bc <_printf_float+0x198>
 80023fa:	6823      	ldr	r3, [r4, #0]
 80023fc:	055a      	lsls	r2, r3, #21
 80023fe:	d407      	bmi.n	8002410 <_printf_float+0x1ec>
 8002400:	6923      	ldr	r3, [r4, #16]
 8002402:	4642      	mov	r2, r8
 8002404:	4631      	mov	r1, r6
 8002406:	4628      	mov	r0, r5
 8002408:	47b8      	blx	r7
 800240a:	3001      	adds	r0, #1
 800240c:	d12b      	bne.n	8002466 <_printf_float+0x242>
 800240e:	e764      	b.n	80022da <_printf_float+0xb6>
 8002410:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8002414:	f240 80dd 	bls.w	80025d2 <_printf_float+0x3ae>
 8002418:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800241c:	2200      	movs	r2, #0
 800241e:	2300      	movs	r3, #0
 8002420:	f7fe fdc6 	bl	8000fb0 <__aeabi_dcmpeq>
 8002424:	2800      	cmp	r0, #0
 8002426:	d033      	beq.n	8002490 <_printf_float+0x26c>
 8002428:	2301      	movs	r3, #1
 800242a:	4631      	mov	r1, r6
 800242c:	4628      	mov	r0, r5
 800242e:	4a35      	ldr	r2, [pc, #212]	; (8002504 <_printf_float+0x2e0>)
 8002430:	47b8      	blx	r7
 8002432:	3001      	adds	r0, #1
 8002434:	f43f af51 	beq.w	80022da <_printf_float+0xb6>
 8002438:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800243c:	429a      	cmp	r2, r3
 800243e:	db02      	blt.n	8002446 <_printf_float+0x222>
 8002440:	6823      	ldr	r3, [r4, #0]
 8002442:	07d8      	lsls	r0, r3, #31
 8002444:	d50f      	bpl.n	8002466 <_printf_float+0x242>
 8002446:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800244a:	4631      	mov	r1, r6
 800244c:	4628      	mov	r0, r5
 800244e:	47b8      	blx	r7
 8002450:	3001      	adds	r0, #1
 8002452:	f43f af42 	beq.w	80022da <_printf_float+0xb6>
 8002456:	f04f 0800 	mov.w	r8, #0
 800245a:	f104 091a 	add.w	r9, r4, #26
 800245e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002460:	3b01      	subs	r3, #1
 8002462:	4543      	cmp	r3, r8
 8002464:	dc09      	bgt.n	800247a <_printf_float+0x256>
 8002466:	6823      	ldr	r3, [r4, #0]
 8002468:	079b      	lsls	r3, r3, #30
 800246a:	f100 8102 	bmi.w	8002672 <_printf_float+0x44e>
 800246e:	68e0      	ldr	r0, [r4, #12]
 8002470:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8002472:	4298      	cmp	r0, r3
 8002474:	bfb8      	it	lt
 8002476:	4618      	movlt	r0, r3
 8002478:	e731      	b.n	80022de <_printf_float+0xba>
 800247a:	2301      	movs	r3, #1
 800247c:	464a      	mov	r2, r9
 800247e:	4631      	mov	r1, r6
 8002480:	4628      	mov	r0, r5
 8002482:	47b8      	blx	r7
 8002484:	3001      	adds	r0, #1
 8002486:	f43f af28 	beq.w	80022da <_printf_float+0xb6>
 800248a:	f108 0801 	add.w	r8, r8, #1
 800248e:	e7e6      	b.n	800245e <_printf_float+0x23a>
 8002490:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002492:	2b00      	cmp	r3, #0
 8002494:	dc38      	bgt.n	8002508 <_printf_float+0x2e4>
 8002496:	2301      	movs	r3, #1
 8002498:	4631      	mov	r1, r6
 800249a:	4628      	mov	r0, r5
 800249c:	4a19      	ldr	r2, [pc, #100]	; (8002504 <_printf_float+0x2e0>)
 800249e:	47b8      	blx	r7
 80024a0:	3001      	adds	r0, #1
 80024a2:	f43f af1a 	beq.w	80022da <_printf_float+0xb6>
 80024a6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80024aa:	4313      	orrs	r3, r2
 80024ac:	d102      	bne.n	80024b4 <_printf_float+0x290>
 80024ae:	6823      	ldr	r3, [r4, #0]
 80024b0:	07d9      	lsls	r1, r3, #31
 80024b2:	d5d8      	bpl.n	8002466 <_printf_float+0x242>
 80024b4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80024b8:	4631      	mov	r1, r6
 80024ba:	4628      	mov	r0, r5
 80024bc:	47b8      	blx	r7
 80024be:	3001      	adds	r0, #1
 80024c0:	f43f af0b 	beq.w	80022da <_printf_float+0xb6>
 80024c4:	f04f 0900 	mov.w	r9, #0
 80024c8:	f104 0a1a 	add.w	sl, r4, #26
 80024cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80024ce:	425b      	negs	r3, r3
 80024d0:	454b      	cmp	r3, r9
 80024d2:	dc01      	bgt.n	80024d8 <_printf_float+0x2b4>
 80024d4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80024d6:	e794      	b.n	8002402 <_printf_float+0x1de>
 80024d8:	2301      	movs	r3, #1
 80024da:	4652      	mov	r2, sl
 80024dc:	4631      	mov	r1, r6
 80024de:	4628      	mov	r0, r5
 80024e0:	47b8      	blx	r7
 80024e2:	3001      	adds	r0, #1
 80024e4:	f43f aef9 	beq.w	80022da <_printf_float+0xb6>
 80024e8:	f109 0901 	add.w	r9, r9, #1
 80024ec:	e7ee      	b.n	80024cc <_printf_float+0x2a8>
 80024ee:	bf00      	nop
 80024f0:	7fefffff 	.word	0x7fefffff
 80024f4:	08004bac 	.word	0x08004bac
 80024f8:	08004bb0 	.word	0x08004bb0
 80024fc:	08004bb8 	.word	0x08004bb8
 8002500:	08004bb4 	.word	0x08004bb4
 8002504:	08004bbc 	.word	0x08004bbc
 8002508:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800250a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800250c:	429a      	cmp	r2, r3
 800250e:	bfa8      	it	ge
 8002510:	461a      	movge	r2, r3
 8002512:	2a00      	cmp	r2, #0
 8002514:	4691      	mov	r9, r2
 8002516:	dc37      	bgt.n	8002588 <_printf_float+0x364>
 8002518:	f04f 0b00 	mov.w	fp, #0
 800251c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8002520:	f104 021a 	add.w	r2, r4, #26
 8002524:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8002528:	ebaa 0309 	sub.w	r3, sl, r9
 800252c:	455b      	cmp	r3, fp
 800252e:	dc33      	bgt.n	8002598 <_printf_float+0x374>
 8002530:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8002534:	429a      	cmp	r2, r3
 8002536:	db3b      	blt.n	80025b0 <_printf_float+0x38c>
 8002538:	6823      	ldr	r3, [r4, #0]
 800253a:	07da      	lsls	r2, r3, #31
 800253c:	d438      	bmi.n	80025b0 <_printf_float+0x38c>
 800253e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002540:	990d      	ldr	r1, [sp, #52]	; 0x34
 8002542:	eba3 020a 	sub.w	r2, r3, sl
 8002546:	eba3 0901 	sub.w	r9, r3, r1
 800254a:	4591      	cmp	r9, r2
 800254c:	bfa8      	it	ge
 800254e:	4691      	movge	r9, r2
 8002550:	f1b9 0f00 	cmp.w	r9, #0
 8002554:	dc34      	bgt.n	80025c0 <_printf_float+0x39c>
 8002556:	f04f 0800 	mov.w	r8, #0
 800255a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800255e:	f104 0a1a 	add.w	sl, r4, #26
 8002562:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8002566:	1a9b      	subs	r3, r3, r2
 8002568:	eba3 0309 	sub.w	r3, r3, r9
 800256c:	4543      	cmp	r3, r8
 800256e:	f77f af7a 	ble.w	8002466 <_printf_float+0x242>
 8002572:	2301      	movs	r3, #1
 8002574:	4652      	mov	r2, sl
 8002576:	4631      	mov	r1, r6
 8002578:	4628      	mov	r0, r5
 800257a:	47b8      	blx	r7
 800257c:	3001      	adds	r0, #1
 800257e:	f43f aeac 	beq.w	80022da <_printf_float+0xb6>
 8002582:	f108 0801 	add.w	r8, r8, #1
 8002586:	e7ec      	b.n	8002562 <_printf_float+0x33e>
 8002588:	4613      	mov	r3, r2
 800258a:	4631      	mov	r1, r6
 800258c:	4642      	mov	r2, r8
 800258e:	4628      	mov	r0, r5
 8002590:	47b8      	blx	r7
 8002592:	3001      	adds	r0, #1
 8002594:	d1c0      	bne.n	8002518 <_printf_float+0x2f4>
 8002596:	e6a0      	b.n	80022da <_printf_float+0xb6>
 8002598:	2301      	movs	r3, #1
 800259a:	4631      	mov	r1, r6
 800259c:	4628      	mov	r0, r5
 800259e:	920b      	str	r2, [sp, #44]	; 0x2c
 80025a0:	47b8      	blx	r7
 80025a2:	3001      	adds	r0, #1
 80025a4:	f43f ae99 	beq.w	80022da <_printf_float+0xb6>
 80025a8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80025aa:	f10b 0b01 	add.w	fp, fp, #1
 80025ae:	e7b9      	b.n	8002524 <_printf_float+0x300>
 80025b0:	4631      	mov	r1, r6
 80025b2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80025b6:	4628      	mov	r0, r5
 80025b8:	47b8      	blx	r7
 80025ba:	3001      	adds	r0, #1
 80025bc:	d1bf      	bne.n	800253e <_printf_float+0x31a>
 80025be:	e68c      	b.n	80022da <_printf_float+0xb6>
 80025c0:	464b      	mov	r3, r9
 80025c2:	4631      	mov	r1, r6
 80025c4:	4628      	mov	r0, r5
 80025c6:	eb08 020a 	add.w	r2, r8, sl
 80025ca:	47b8      	blx	r7
 80025cc:	3001      	adds	r0, #1
 80025ce:	d1c2      	bne.n	8002556 <_printf_float+0x332>
 80025d0:	e683      	b.n	80022da <_printf_float+0xb6>
 80025d2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80025d4:	2a01      	cmp	r2, #1
 80025d6:	dc01      	bgt.n	80025dc <_printf_float+0x3b8>
 80025d8:	07db      	lsls	r3, r3, #31
 80025da:	d537      	bpl.n	800264c <_printf_float+0x428>
 80025dc:	2301      	movs	r3, #1
 80025de:	4642      	mov	r2, r8
 80025e0:	4631      	mov	r1, r6
 80025e2:	4628      	mov	r0, r5
 80025e4:	47b8      	blx	r7
 80025e6:	3001      	adds	r0, #1
 80025e8:	f43f ae77 	beq.w	80022da <_printf_float+0xb6>
 80025ec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80025f0:	4631      	mov	r1, r6
 80025f2:	4628      	mov	r0, r5
 80025f4:	47b8      	blx	r7
 80025f6:	3001      	adds	r0, #1
 80025f8:	f43f ae6f 	beq.w	80022da <_printf_float+0xb6>
 80025fc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8002600:	2200      	movs	r2, #0
 8002602:	2300      	movs	r3, #0
 8002604:	f7fe fcd4 	bl	8000fb0 <__aeabi_dcmpeq>
 8002608:	b9d8      	cbnz	r0, 8002642 <_printf_float+0x41e>
 800260a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800260c:	f108 0201 	add.w	r2, r8, #1
 8002610:	3b01      	subs	r3, #1
 8002612:	4631      	mov	r1, r6
 8002614:	4628      	mov	r0, r5
 8002616:	47b8      	blx	r7
 8002618:	3001      	adds	r0, #1
 800261a:	d10e      	bne.n	800263a <_printf_float+0x416>
 800261c:	e65d      	b.n	80022da <_printf_float+0xb6>
 800261e:	2301      	movs	r3, #1
 8002620:	464a      	mov	r2, r9
 8002622:	4631      	mov	r1, r6
 8002624:	4628      	mov	r0, r5
 8002626:	47b8      	blx	r7
 8002628:	3001      	adds	r0, #1
 800262a:	f43f ae56 	beq.w	80022da <_printf_float+0xb6>
 800262e:	f108 0801 	add.w	r8, r8, #1
 8002632:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002634:	3b01      	subs	r3, #1
 8002636:	4543      	cmp	r3, r8
 8002638:	dcf1      	bgt.n	800261e <_printf_float+0x3fa>
 800263a:	4653      	mov	r3, sl
 800263c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8002640:	e6e0      	b.n	8002404 <_printf_float+0x1e0>
 8002642:	f04f 0800 	mov.w	r8, #0
 8002646:	f104 091a 	add.w	r9, r4, #26
 800264a:	e7f2      	b.n	8002632 <_printf_float+0x40e>
 800264c:	2301      	movs	r3, #1
 800264e:	4642      	mov	r2, r8
 8002650:	e7df      	b.n	8002612 <_printf_float+0x3ee>
 8002652:	2301      	movs	r3, #1
 8002654:	464a      	mov	r2, r9
 8002656:	4631      	mov	r1, r6
 8002658:	4628      	mov	r0, r5
 800265a:	47b8      	blx	r7
 800265c:	3001      	adds	r0, #1
 800265e:	f43f ae3c 	beq.w	80022da <_printf_float+0xb6>
 8002662:	f108 0801 	add.w	r8, r8, #1
 8002666:	68e3      	ldr	r3, [r4, #12]
 8002668:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800266a:	1a5b      	subs	r3, r3, r1
 800266c:	4543      	cmp	r3, r8
 800266e:	dcf0      	bgt.n	8002652 <_printf_float+0x42e>
 8002670:	e6fd      	b.n	800246e <_printf_float+0x24a>
 8002672:	f04f 0800 	mov.w	r8, #0
 8002676:	f104 0919 	add.w	r9, r4, #25
 800267a:	e7f4      	b.n	8002666 <_printf_float+0x442>

0800267c <_printf_common>:
 800267c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002680:	4616      	mov	r6, r2
 8002682:	4699      	mov	r9, r3
 8002684:	688a      	ldr	r2, [r1, #8]
 8002686:	690b      	ldr	r3, [r1, #16]
 8002688:	4607      	mov	r7, r0
 800268a:	4293      	cmp	r3, r2
 800268c:	bfb8      	it	lt
 800268e:	4613      	movlt	r3, r2
 8002690:	6033      	str	r3, [r6, #0]
 8002692:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002696:	460c      	mov	r4, r1
 8002698:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800269c:	b10a      	cbz	r2, 80026a2 <_printf_common+0x26>
 800269e:	3301      	adds	r3, #1
 80026a0:	6033      	str	r3, [r6, #0]
 80026a2:	6823      	ldr	r3, [r4, #0]
 80026a4:	0699      	lsls	r1, r3, #26
 80026a6:	bf42      	ittt	mi
 80026a8:	6833      	ldrmi	r3, [r6, #0]
 80026aa:	3302      	addmi	r3, #2
 80026ac:	6033      	strmi	r3, [r6, #0]
 80026ae:	6825      	ldr	r5, [r4, #0]
 80026b0:	f015 0506 	ands.w	r5, r5, #6
 80026b4:	d106      	bne.n	80026c4 <_printf_common+0x48>
 80026b6:	f104 0a19 	add.w	sl, r4, #25
 80026ba:	68e3      	ldr	r3, [r4, #12]
 80026bc:	6832      	ldr	r2, [r6, #0]
 80026be:	1a9b      	subs	r3, r3, r2
 80026c0:	42ab      	cmp	r3, r5
 80026c2:	dc28      	bgt.n	8002716 <_printf_common+0x9a>
 80026c4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80026c8:	1e13      	subs	r3, r2, #0
 80026ca:	6822      	ldr	r2, [r4, #0]
 80026cc:	bf18      	it	ne
 80026ce:	2301      	movne	r3, #1
 80026d0:	0692      	lsls	r2, r2, #26
 80026d2:	d42d      	bmi.n	8002730 <_printf_common+0xb4>
 80026d4:	4649      	mov	r1, r9
 80026d6:	4638      	mov	r0, r7
 80026d8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80026dc:	47c0      	blx	r8
 80026de:	3001      	adds	r0, #1
 80026e0:	d020      	beq.n	8002724 <_printf_common+0xa8>
 80026e2:	6823      	ldr	r3, [r4, #0]
 80026e4:	68e5      	ldr	r5, [r4, #12]
 80026e6:	f003 0306 	and.w	r3, r3, #6
 80026ea:	2b04      	cmp	r3, #4
 80026ec:	bf18      	it	ne
 80026ee:	2500      	movne	r5, #0
 80026f0:	6832      	ldr	r2, [r6, #0]
 80026f2:	f04f 0600 	mov.w	r6, #0
 80026f6:	68a3      	ldr	r3, [r4, #8]
 80026f8:	bf08      	it	eq
 80026fa:	1aad      	subeq	r5, r5, r2
 80026fc:	6922      	ldr	r2, [r4, #16]
 80026fe:	bf08      	it	eq
 8002700:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002704:	4293      	cmp	r3, r2
 8002706:	bfc4      	itt	gt
 8002708:	1a9b      	subgt	r3, r3, r2
 800270a:	18ed      	addgt	r5, r5, r3
 800270c:	341a      	adds	r4, #26
 800270e:	42b5      	cmp	r5, r6
 8002710:	d11a      	bne.n	8002748 <_printf_common+0xcc>
 8002712:	2000      	movs	r0, #0
 8002714:	e008      	b.n	8002728 <_printf_common+0xac>
 8002716:	2301      	movs	r3, #1
 8002718:	4652      	mov	r2, sl
 800271a:	4649      	mov	r1, r9
 800271c:	4638      	mov	r0, r7
 800271e:	47c0      	blx	r8
 8002720:	3001      	adds	r0, #1
 8002722:	d103      	bne.n	800272c <_printf_common+0xb0>
 8002724:	f04f 30ff 	mov.w	r0, #4294967295
 8002728:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800272c:	3501      	adds	r5, #1
 800272e:	e7c4      	b.n	80026ba <_printf_common+0x3e>
 8002730:	2030      	movs	r0, #48	; 0x30
 8002732:	18e1      	adds	r1, r4, r3
 8002734:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002738:	1c5a      	adds	r2, r3, #1
 800273a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800273e:	4422      	add	r2, r4
 8002740:	3302      	adds	r3, #2
 8002742:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002746:	e7c5      	b.n	80026d4 <_printf_common+0x58>
 8002748:	2301      	movs	r3, #1
 800274a:	4622      	mov	r2, r4
 800274c:	4649      	mov	r1, r9
 800274e:	4638      	mov	r0, r7
 8002750:	47c0      	blx	r8
 8002752:	3001      	adds	r0, #1
 8002754:	d0e6      	beq.n	8002724 <_printf_common+0xa8>
 8002756:	3601      	adds	r6, #1
 8002758:	e7d9      	b.n	800270e <_printf_common+0x92>
	...

0800275c <_printf_i>:
 800275c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002760:	7e0f      	ldrb	r7, [r1, #24]
 8002762:	4691      	mov	r9, r2
 8002764:	2f78      	cmp	r7, #120	; 0x78
 8002766:	4680      	mov	r8, r0
 8002768:	460c      	mov	r4, r1
 800276a:	469a      	mov	sl, r3
 800276c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800276e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002772:	d807      	bhi.n	8002784 <_printf_i+0x28>
 8002774:	2f62      	cmp	r7, #98	; 0x62
 8002776:	d80a      	bhi.n	800278e <_printf_i+0x32>
 8002778:	2f00      	cmp	r7, #0
 800277a:	f000 80d9 	beq.w	8002930 <_printf_i+0x1d4>
 800277e:	2f58      	cmp	r7, #88	; 0x58
 8002780:	f000 80a4 	beq.w	80028cc <_printf_i+0x170>
 8002784:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002788:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800278c:	e03a      	b.n	8002804 <_printf_i+0xa8>
 800278e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002792:	2b15      	cmp	r3, #21
 8002794:	d8f6      	bhi.n	8002784 <_printf_i+0x28>
 8002796:	a101      	add	r1, pc, #4	; (adr r1, 800279c <_printf_i+0x40>)
 8002798:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800279c:	080027f5 	.word	0x080027f5
 80027a0:	08002809 	.word	0x08002809
 80027a4:	08002785 	.word	0x08002785
 80027a8:	08002785 	.word	0x08002785
 80027ac:	08002785 	.word	0x08002785
 80027b0:	08002785 	.word	0x08002785
 80027b4:	08002809 	.word	0x08002809
 80027b8:	08002785 	.word	0x08002785
 80027bc:	08002785 	.word	0x08002785
 80027c0:	08002785 	.word	0x08002785
 80027c4:	08002785 	.word	0x08002785
 80027c8:	08002917 	.word	0x08002917
 80027cc:	08002839 	.word	0x08002839
 80027d0:	080028f9 	.word	0x080028f9
 80027d4:	08002785 	.word	0x08002785
 80027d8:	08002785 	.word	0x08002785
 80027dc:	08002939 	.word	0x08002939
 80027e0:	08002785 	.word	0x08002785
 80027e4:	08002839 	.word	0x08002839
 80027e8:	08002785 	.word	0x08002785
 80027ec:	08002785 	.word	0x08002785
 80027f0:	08002901 	.word	0x08002901
 80027f4:	682b      	ldr	r3, [r5, #0]
 80027f6:	1d1a      	adds	r2, r3, #4
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	602a      	str	r2, [r5, #0]
 80027fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002800:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002804:	2301      	movs	r3, #1
 8002806:	e0a4      	b.n	8002952 <_printf_i+0x1f6>
 8002808:	6820      	ldr	r0, [r4, #0]
 800280a:	6829      	ldr	r1, [r5, #0]
 800280c:	0606      	lsls	r6, r0, #24
 800280e:	f101 0304 	add.w	r3, r1, #4
 8002812:	d50a      	bpl.n	800282a <_printf_i+0xce>
 8002814:	680e      	ldr	r6, [r1, #0]
 8002816:	602b      	str	r3, [r5, #0]
 8002818:	2e00      	cmp	r6, #0
 800281a:	da03      	bge.n	8002824 <_printf_i+0xc8>
 800281c:	232d      	movs	r3, #45	; 0x2d
 800281e:	4276      	negs	r6, r6
 8002820:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002824:	230a      	movs	r3, #10
 8002826:	485e      	ldr	r0, [pc, #376]	; (80029a0 <_printf_i+0x244>)
 8002828:	e019      	b.n	800285e <_printf_i+0x102>
 800282a:	680e      	ldr	r6, [r1, #0]
 800282c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002830:	602b      	str	r3, [r5, #0]
 8002832:	bf18      	it	ne
 8002834:	b236      	sxthne	r6, r6
 8002836:	e7ef      	b.n	8002818 <_printf_i+0xbc>
 8002838:	682b      	ldr	r3, [r5, #0]
 800283a:	6820      	ldr	r0, [r4, #0]
 800283c:	1d19      	adds	r1, r3, #4
 800283e:	6029      	str	r1, [r5, #0]
 8002840:	0601      	lsls	r1, r0, #24
 8002842:	d501      	bpl.n	8002848 <_printf_i+0xec>
 8002844:	681e      	ldr	r6, [r3, #0]
 8002846:	e002      	b.n	800284e <_printf_i+0xf2>
 8002848:	0646      	lsls	r6, r0, #25
 800284a:	d5fb      	bpl.n	8002844 <_printf_i+0xe8>
 800284c:	881e      	ldrh	r6, [r3, #0]
 800284e:	2f6f      	cmp	r7, #111	; 0x6f
 8002850:	bf0c      	ite	eq
 8002852:	2308      	moveq	r3, #8
 8002854:	230a      	movne	r3, #10
 8002856:	4852      	ldr	r0, [pc, #328]	; (80029a0 <_printf_i+0x244>)
 8002858:	2100      	movs	r1, #0
 800285a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800285e:	6865      	ldr	r5, [r4, #4]
 8002860:	2d00      	cmp	r5, #0
 8002862:	bfa8      	it	ge
 8002864:	6821      	ldrge	r1, [r4, #0]
 8002866:	60a5      	str	r5, [r4, #8]
 8002868:	bfa4      	itt	ge
 800286a:	f021 0104 	bicge.w	r1, r1, #4
 800286e:	6021      	strge	r1, [r4, #0]
 8002870:	b90e      	cbnz	r6, 8002876 <_printf_i+0x11a>
 8002872:	2d00      	cmp	r5, #0
 8002874:	d04d      	beq.n	8002912 <_printf_i+0x1b6>
 8002876:	4615      	mov	r5, r2
 8002878:	fbb6 f1f3 	udiv	r1, r6, r3
 800287c:	fb03 6711 	mls	r7, r3, r1, r6
 8002880:	5dc7      	ldrb	r7, [r0, r7]
 8002882:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002886:	4637      	mov	r7, r6
 8002888:	42bb      	cmp	r3, r7
 800288a:	460e      	mov	r6, r1
 800288c:	d9f4      	bls.n	8002878 <_printf_i+0x11c>
 800288e:	2b08      	cmp	r3, #8
 8002890:	d10b      	bne.n	80028aa <_printf_i+0x14e>
 8002892:	6823      	ldr	r3, [r4, #0]
 8002894:	07de      	lsls	r6, r3, #31
 8002896:	d508      	bpl.n	80028aa <_printf_i+0x14e>
 8002898:	6923      	ldr	r3, [r4, #16]
 800289a:	6861      	ldr	r1, [r4, #4]
 800289c:	4299      	cmp	r1, r3
 800289e:	bfde      	ittt	le
 80028a0:	2330      	movle	r3, #48	; 0x30
 80028a2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80028a6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80028aa:	1b52      	subs	r2, r2, r5
 80028ac:	6122      	str	r2, [r4, #16]
 80028ae:	464b      	mov	r3, r9
 80028b0:	4621      	mov	r1, r4
 80028b2:	4640      	mov	r0, r8
 80028b4:	f8cd a000 	str.w	sl, [sp]
 80028b8:	aa03      	add	r2, sp, #12
 80028ba:	f7ff fedf 	bl	800267c <_printf_common>
 80028be:	3001      	adds	r0, #1
 80028c0:	d14c      	bne.n	800295c <_printf_i+0x200>
 80028c2:	f04f 30ff 	mov.w	r0, #4294967295
 80028c6:	b004      	add	sp, #16
 80028c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80028cc:	4834      	ldr	r0, [pc, #208]	; (80029a0 <_printf_i+0x244>)
 80028ce:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80028d2:	6829      	ldr	r1, [r5, #0]
 80028d4:	6823      	ldr	r3, [r4, #0]
 80028d6:	f851 6b04 	ldr.w	r6, [r1], #4
 80028da:	6029      	str	r1, [r5, #0]
 80028dc:	061d      	lsls	r5, r3, #24
 80028de:	d514      	bpl.n	800290a <_printf_i+0x1ae>
 80028e0:	07df      	lsls	r7, r3, #31
 80028e2:	bf44      	itt	mi
 80028e4:	f043 0320 	orrmi.w	r3, r3, #32
 80028e8:	6023      	strmi	r3, [r4, #0]
 80028ea:	b91e      	cbnz	r6, 80028f4 <_printf_i+0x198>
 80028ec:	6823      	ldr	r3, [r4, #0]
 80028ee:	f023 0320 	bic.w	r3, r3, #32
 80028f2:	6023      	str	r3, [r4, #0]
 80028f4:	2310      	movs	r3, #16
 80028f6:	e7af      	b.n	8002858 <_printf_i+0xfc>
 80028f8:	6823      	ldr	r3, [r4, #0]
 80028fa:	f043 0320 	orr.w	r3, r3, #32
 80028fe:	6023      	str	r3, [r4, #0]
 8002900:	2378      	movs	r3, #120	; 0x78
 8002902:	4828      	ldr	r0, [pc, #160]	; (80029a4 <_printf_i+0x248>)
 8002904:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002908:	e7e3      	b.n	80028d2 <_printf_i+0x176>
 800290a:	0659      	lsls	r1, r3, #25
 800290c:	bf48      	it	mi
 800290e:	b2b6      	uxthmi	r6, r6
 8002910:	e7e6      	b.n	80028e0 <_printf_i+0x184>
 8002912:	4615      	mov	r5, r2
 8002914:	e7bb      	b.n	800288e <_printf_i+0x132>
 8002916:	682b      	ldr	r3, [r5, #0]
 8002918:	6826      	ldr	r6, [r4, #0]
 800291a:	1d18      	adds	r0, r3, #4
 800291c:	6961      	ldr	r1, [r4, #20]
 800291e:	6028      	str	r0, [r5, #0]
 8002920:	0635      	lsls	r5, r6, #24
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	d501      	bpl.n	800292a <_printf_i+0x1ce>
 8002926:	6019      	str	r1, [r3, #0]
 8002928:	e002      	b.n	8002930 <_printf_i+0x1d4>
 800292a:	0670      	lsls	r0, r6, #25
 800292c:	d5fb      	bpl.n	8002926 <_printf_i+0x1ca>
 800292e:	8019      	strh	r1, [r3, #0]
 8002930:	2300      	movs	r3, #0
 8002932:	4615      	mov	r5, r2
 8002934:	6123      	str	r3, [r4, #16]
 8002936:	e7ba      	b.n	80028ae <_printf_i+0x152>
 8002938:	682b      	ldr	r3, [r5, #0]
 800293a:	2100      	movs	r1, #0
 800293c:	1d1a      	adds	r2, r3, #4
 800293e:	602a      	str	r2, [r5, #0]
 8002940:	681d      	ldr	r5, [r3, #0]
 8002942:	6862      	ldr	r2, [r4, #4]
 8002944:	4628      	mov	r0, r5
 8002946:	f000 feb5 	bl	80036b4 <memchr>
 800294a:	b108      	cbz	r0, 8002950 <_printf_i+0x1f4>
 800294c:	1b40      	subs	r0, r0, r5
 800294e:	6060      	str	r0, [r4, #4]
 8002950:	6863      	ldr	r3, [r4, #4]
 8002952:	6123      	str	r3, [r4, #16]
 8002954:	2300      	movs	r3, #0
 8002956:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800295a:	e7a8      	b.n	80028ae <_printf_i+0x152>
 800295c:	462a      	mov	r2, r5
 800295e:	4649      	mov	r1, r9
 8002960:	4640      	mov	r0, r8
 8002962:	6923      	ldr	r3, [r4, #16]
 8002964:	47d0      	blx	sl
 8002966:	3001      	adds	r0, #1
 8002968:	d0ab      	beq.n	80028c2 <_printf_i+0x166>
 800296a:	6823      	ldr	r3, [r4, #0]
 800296c:	079b      	lsls	r3, r3, #30
 800296e:	d413      	bmi.n	8002998 <_printf_i+0x23c>
 8002970:	68e0      	ldr	r0, [r4, #12]
 8002972:	9b03      	ldr	r3, [sp, #12]
 8002974:	4298      	cmp	r0, r3
 8002976:	bfb8      	it	lt
 8002978:	4618      	movlt	r0, r3
 800297a:	e7a4      	b.n	80028c6 <_printf_i+0x16a>
 800297c:	2301      	movs	r3, #1
 800297e:	4632      	mov	r2, r6
 8002980:	4649      	mov	r1, r9
 8002982:	4640      	mov	r0, r8
 8002984:	47d0      	blx	sl
 8002986:	3001      	adds	r0, #1
 8002988:	d09b      	beq.n	80028c2 <_printf_i+0x166>
 800298a:	3501      	adds	r5, #1
 800298c:	68e3      	ldr	r3, [r4, #12]
 800298e:	9903      	ldr	r1, [sp, #12]
 8002990:	1a5b      	subs	r3, r3, r1
 8002992:	42ab      	cmp	r3, r5
 8002994:	dcf2      	bgt.n	800297c <_printf_i+0x220>
 8002996:	e7eb      	b.n	8002970 <_printf_i+0x214>
 8002998:	2500      	movs	r5, #0
 800299a:	f104 0619 	add.w	r6, r4, #25
 800299e:	e7f5      	b.n	800298c <_printf_i+0x230>
 80029a0:	08004bbe 	.word	0x08004bbe
 80029a4:	08004bcf 	.word	0x08004bcf

080029a8 <quorem>:
 80029a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80029ac:	6903      	ldr	r3, [r0, #16]
 80029ae:	690c      	ldr	r4, [r1, #16]
 80029b0:	4607      	mov	r7, r0
 80029b2:	42a3      	cmp	r3, r4
 80029b4:	f2c0 8082 	blt.w	8002abc <quorem+0x114>
 80029b8:	3c01      	subs	r4, #1
 80029ba:	f100 0514 	add.w	r5, r0, #20
 80029be:	f101 0814 	add.w	r8, r1, #20
 80029c2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80029c6:	9301      	str	r3, [sp, #4]
 80029c8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80029cc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80029d0:	3301      	adds	r3, #1
 80029d2:	429a      	cmp	r2, r3
 80029d4:	fbb2 f6f3 	udiv	r6, r2, r3
 80029d8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80029dc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80029e0:	d331      	bcc.n	8002a46 <quorem+0x9e>
 80029e2:	f04f 0e00 	mov.w	lr, #0
 80029e6:	4640      	mov	r0, r8
 80029e8:	46ac      	mov	ip, r5
 80029ea:	46f2      	mov	sl, lr
 80029ec:	f850 2b04 	ldr.w	r2, [r0], #4
 80029f0:	b293      	uxth	r3, r2
 80029f2:	fb06 e303 	mla	r3, r6, r3, lr
 80029f6:	0c12      	lsrs	r2, r2, #16
 80029f8:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80029fc:	b29b      	uxth	r3, r3
 80029fe:	fb06 e202 	mla	r2, r6, r2, lr
 8002a02:	ebaa 0303 	sub.w	r3, sl, r3
 8002a06:	f8dc a000 	ldr.w	sl, [ip]
 8002a0a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8002a0e:	fa1f fa8a 	uxth.w	sl, sl
 8002a12:	4453      	add	r3, sl
 8002a14:	f8dc a000 	ldr.w	sl, [ip]
 8002a18:	b292      	uxth	r2, r2
 8002a1a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8002a1e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8002a22:	b29b      	uxth	r3, r3
 8002a24:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002a28:	4581      	cmp	r9, r0
 8002a2a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8002a2e:	f84c 3b04 	str.w	r3, [ip], #4
 8002a32:	d2db      	bcs.n	80029ec <quorem+0x44>
 8002a34:	f855 300b 	ldr.w	r3, [r5, fp]
 8002a38:	b92b      	cbnz	r3, 8002a46 <quorem+0x9e>
 8002a3a:	9b01      	ldr	r3, [sp, #4]
 8002a3c:	3b04      	subs	r3, #4
 8002a3e:	429d      	cmp	r5, r3
 8002a40:	461a      	mov	r2, r3
 8002a42:	d32f      	bcc.n	8002aa4 <quorem+0xfc>
 8002a44:	613c      	str	r4, [r7, #16]
 8002a46:	4638      	mov	r0, r7
 8002a48:	f001 f8ce 	bl	8003be8 <__mcmp>
 8002a4c:	2800      	cmp	r0, #0
 8002a4e:	db25      	blt.n	8002a9c <quorem+0xf4>
 8002a50:	4628      	mov	r0, r5
 8002a52:	f04f 0c00 	mov.w	ip, #0
 8002a56:	3601      	adds	r6, #1
 8002a58:	f858 1b04 	ldr.w	r1, [r8], #4
 8002a5c:	f8d0 e000 	ldr.w	lr, [r0]
 8002a60:	b28b      	uxth	r3, r1
 8002a62:	ebac 0303 	sub.w	r3, ip, r3
 8002a66:	fa1f f28e 	uxth.w	r2, lr
 8002a6a:	4413      	add	r3, r2
 8002a6c:	0c0a      	lsrs	r2, r1, #16
 8002a6e:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8002a72:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8002a76:	b29b      	uxth	r3, r3
 8002a78:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002a7c:	45c1      	cmp	r9, r8
 8002a7e:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8002a82:	f840 3b04 	str.w	r3, [r0], #4
 8002a86:	d2e7      	bcs.n	8002a58 <quorem+0xb0>
 8002a88:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8002a8c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8002a90:	b922      	cbnz	r2, 8002a9c <quorem+0xf4>
 8002a92:	3b04      	subs	r3, #4
 8002a94:	429d      	cmp	r5, r3
 8002a96:	461a      	mov	r2, r3
 8002a98:	d30a      	bcc.n	8002ab0 <quorem+0x108>
 8002a9a:	613c      	str	r4, [r7, #16]
 8002a9c:	4630      	mov	r0, r6
 8002a9e:	b003      	add	sp, #12
 8002aa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002aa4:	6812      	ldr	r2, [r2, #0]
 8002aa6:	3b04      	subs	r3, #4
 8002aa8:	2a00      	cmp	r2, #0
 8002aaa:	d1cb      	bne.n	8002a44 <quorem+0x9c>
 8002aac:	3c01      	subs	r4, #1
 8002aae:	e7c6      	b.n	8002a3e <quorem+0x96>
 8002ab0:	6812      	ldr	r2, [r2, #0]
 8002ab2:	3b04      	subs	r3, #4
 8002ab4:	2a00      	cmp	r2, #0
 8002ab6:	d1f0      	bne.n	8002a9a <quorem+0xf2>
 8002ab8:	3c01      	subs	r4, #1
 8002aba:	e7eb      	b.n	8002a94 <quorem+0xec>
 8002abc:	2000      	movs	r0, #0
 8002abe:	e7ee      	b.n	8002a9e <quorem+0xf6>

08002ac0 <_dtoa_r>:
 8002ac0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ac4:	4616      	mov	r6, r2
 8002ac6:	461f      	mov	r7, r3
 8002ac8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8002aca:	b099      	sub	sp, #100	; 0x64
 8002acc:	4605      	mov	r5, r0
 8002ace:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8002ad2:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8002ad6:	b974      	cbnz	r4, 8002af6 <_dtoa_r+0x36>
 8002ad8:	2010      	movs	r0, #16
 8002ada:	f000 fde3 	bl	80036a4 <malloc>
 8002ade:	4602      	mov	r2, r0
 8002ae0:	6268      	str	r0, [r5, #36]	; 0x24
 8002ae2:	b920      	cbnz	r0, 8002aee <_dtoa_r+0x2e>
 8002ae4:	21ea      	movs	r1, #234	; 0xea
 8002ae6:	4ba8      	ldr	r3, [pc, #672]	; (8002d88 <_dtoa_r+0x2c8>)
 8002ae8:	48a8      	ldr	r0, [pc, #672]	; (8002d8c <_dtoa_r+0x2cc>)
 8002aea:	f001 fa81 	bl	8003ff0 <__assert_func>
 8002aee:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8002af2:	6004      	str	r4, [r0, #0]
 8002af4:	60c4      	str	r4, [r0, #12]
 8002af6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8002af8:	6819      	ldr	r1, [r3, #0]
 8002afa:	b151      	cbz	r1, 8002b12 <_dtoa_r+0x52>
 8002afc:	685a      	ldr	r2, [r3, #4]
 8002afe:	2301      	movs	r3, #1
 8002b00:	4093      	lsls	r3, r2
 8002b02:	604a      	str	r2, [r1, #4]
 8002b04:	608b      	str	r3, [r1, #8]
 8002b06:	4628      	mov	r0, r5
 8002b08:	f000 fe30 	bl	800376c <_Bfree>
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8002b10:	601a      	str	r2, [r3, #0]
 8002b12:	1e3b      	subs	r3, r7, #0
 8002b14:	bfaf      	iteee	ge
 8002b16:	2300      	movge	r3, #0
 8002b18:	2201      	movlt	r2, #1
 8002b1a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8002b1e:	9305      	strlt	r3, [sp, #20]
 8002b20:	bfa8      	it	ge
 8002b22:	f8c8 3000 	strge.w	r3, [r8]
 8002b26:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8002b2a:	4b99      	ldr	r3, [pc, #612]	; (8002d90 <_dtoa_r+0x2d0>)
 8002b2c:	bfb8      	it	lt
 8002b2e:	f8c8 2000 	strlt.w	r2, [r8]
 8002b32:	ea33 0309 	bics.w	r3, r3, r9
 8002b36:	d119      	bne.n	8002b6c <_dtoa_r+0xac>
 8002b38:	f242 730f 	movw	r3, #9999	; 0x270f
 8002b3c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8002b3e:	6013      	str	r3, [r2, #0]
 8002b40:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8002b44:	4333      	orrs	r3, r6
 8002b46:	f000 857f 	beq.w	8003648 <_dtoa_r+0xb88>
 8002b4a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8002b4c:	b953      	cbnz	r3, 8002b64 <_dtoa_r+0xa4>
 8002b4e:	4b91      	ldr	r3, [pc, #580]	; (8002d94 <_dtoa_r+0x2d4>)
 8002b50:	e022      	b.n	8002b98 <_dtoa_r+0xd8>
 8002b52:	4b91      	ldr	r3, [pc, #580]	; (8002d98 <_dtoa_r+0x2d8>)
 8002b54:	9303      	str	r3, [sp, #12]
 8002b56:	3308      	adds	r3, #8
 8002b58:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8002b5a:	6013      	str	r3, [r2, #0]
 8002b5c:	9803      	ldr	r0, [sp, #12]
 8002b5e:	b019      	add	sp, #100	; 0x64
 8002b60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002b64:	4b8b      	ldr	r3, [pc, #556]	; (8002d94 <_dtoa_r+0x2d4>)
 8002b66:	9303      	str	r3, [sp, #12]
 8002b68:	3303      	adds	r3, #3
 8002b6a:	e7f5      	b.n	8002b58 <_dtoa_r+0x98>
 8002b6c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8002b70:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8002b74:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8002b78:	2200      	movs	r2, #0
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	f7fe fa18 	bl	8000fb0 <__aeabi_dcmpeq>
 8002b80:	4680      	mov	r8, r0
 8002b82:	b158      	cbz	r0, 8002b9c <_dtoa_r+0xdc>
 8002b84:	2301      	movs	r3, #1
 8002b86:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8002b88:	6013      	str	r3, [r2, #0]
 8002b8a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	f000 8558 	beq.w	8003642 <_dtoa_r+0xb82>
 8002b92:	4882      	ldr	r0, [pc, #520]	; (8002d9c <_dtoa_r+0x2dc>)
 8002b94:	6018      	str	r0, [r3, #0]
 8002b96:	1e43      	subs	r3, r0, #1
 8002b98:	9303      	str	r3, [sp, #12]
 8002b9a:	e7df      	b.n	8002b5c <_dtoa_r+0x9c>
 8002b9c:	ab16      	add	r3, sp, #88	; 0x58
 8002b9e:	9301      	str	r3, [sp, #4]
 8002ba0:	ab17      	add	r3, sp, #92	; 0x5c
 8002ba2:	9300      	str	r3, [sp, #0]
 8002ba4:	4628      	mov	r0, r5
 8002ba6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8002baa:	f001 f8c5 	bl	8003d38 <__d2b>
 8002bae:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8002bb2:	4683      	mov	fp, r0
 8002bb4:	2c00      	cmp	r4, #0
 8002bb6:	d07f      	beq.n	8002cb8 <_dtoa_r+0x1f8>
 8002bb8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8002bbc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002bbe:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8002bc2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002bc6:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8002bca:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8002bce:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	4b72      	ldr	r3, [pc, #456]	; (8002da0 <_dtoa_r+0x2e0>)
 8002bd6:	f7fd facf 	bl	8000178 <__aeabi_dsub>
 8002bda:	a365      	add	r3, pc, #404	; (adr r3, 8002d70 <_dtoa_r+0x2b0>)
 8002bdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002be0:	f7fd fc82 	bl	80004e8 <__aeabi_dmul>
 8002be4:	a364      	add	r3, pc, #400	; (adr r3, 8002d78 <_dtoa_r+0x2b8>)
 8002be6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bea:	f7fd fac7 	bl	800017c <__adddf3>
 8002bee:	4606      	mov	r6, r0
 8002bf0:	4620      	mov	r0, r4
 8002bf2:	460f      	mov	r7, r1
 8002bf4:	f7fd fc0e 	bl	8000414 <__aeabi_i2d>
 8002bf8:	a361      	add	r3, pc, #388	; (adr r3, 8002d80 <_dtoa_r+0x2c0>)
 8002bfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bfe:	f7fd fc73 	bl	80004e8 <__aeabi_dmul>
 8002c02:	4602      	mov	r2, r0
 8002c04:	460b      	mov	r3, r1
 8002c06:	4630      	mov	r0, r6
 8002c08:	4639      	mov	r1, r7
 8002c0a:	f7fd fab7 	bl	800017c <__adddf3>
 8002c0e:	4606      	mov	r6, r0
 8002c10:	460f      	mov	r7, r1
 8002c12:	f7fe fa15 	bl	8001040 <__aeabi_d2iz>
 8002c16:	2200      	movs	r2, #0
 8002c18:	4682      	mov	sl, r0
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	4630      	mov	r0, r6
 8002c1e:	4639      	mov	r1, r7
 8002c20:	f7fe f9d0 	bl	8000fc4 <__aeabi_dcmplt>
 8002c24:	b148      	cbz	r0, 8002c3a <_dtoa_r+0x17a>
 8002c26:	4650      	mov	r0, sl
 8002c28:	f7fd fbf4 	bl	8000414 <__aeabi_i2d>
 8002c2c:	4632      	mov	r2, r6
 8002c2e:	463b      	mov	r3, r7
 8002c30:	f7fe f9be 	bl	8000fb0 <__aeabi_dcmpeq>
 8002c34:	b908      	cbnz	r0, 8002c3a <_dtoa_r+0x17a>
 8002c36:	f10a 3aff 	add.w	sl, sl, #4294967295
 8002c3a:	f1ba 0f16 	cmp.w	sl, #22
 8002c3e:	d858      	bhi.n	8002cf2 <_dtoa_r+0x232>
 8002c40:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8002c44:	4b57      	ldr	r3, [pc, #348]	; (8002da4 <_dtoa_r+0x2e4>)
 8002c46:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8002c4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c4e:	f7fe f9b9 	bl	8000fc4 <__aeabi_dcmplt>
 8002c52:	2800      	cmp	r0, #0
 8002c54:	d04f      	beq.n	8002cf6 <_dtoa_r+0x236>
 8002c56:	2300      	movs	r3, #0
 8002c58:	f10a 3aff 	add.w	sl, sl, #4294967295
 8002c5c:	930f      	str	r3, [sp, #60]	; 0x3c
 8002c5e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8002c60:	1b1c      	subs	r4, r3, r4
 8002c62:	1e63      	subs	r3, r4, #1
 8002c64:	9309      	str	r3, [sp, #36]	; 0x24
 8002c66:	bf49      	itett	mi
 8002c68:	f1c4 0301 	rsbmi	r3, r4, #1
 8002c6c:	2300      	movpl	r3, #0
 8002c6e:	9306      	strmi	r3, [sp, #24]
 8002c70:	2300      	movmi	r3, #0
 8002c72:	bf54      	ite	pl
 8002c74:	9306      	strpl	r3, [sp, #24]
 8002c76:	9309      	strmi	r3, [sp, #36]	; 0x24
 8002c78:	f1ba 0f00 	cmp.w	sl, #0
 8002c7c:	db3d      	blt.n	8002cfa <_dtoa_r+0x23a>
 8002c7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002c80:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8002c84:	4453      	add	r3, sl
 8002c86:	9309      	str	r3, [sp, #36]	; 0x24
 8002c88:	2300      	movs	r3, #0
 8002c8a:	930a      	str	r3, [sp, #40]	; 0x28
 8002c8c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8002c8e:	2b09      	cmp	r3, #9
 8002c90:	f200 808c 	bhi.w	8002dac <_dtoa_r+0x2ec>
 8002c94:	2b05      	cmp	r3, #5
 8002c96:	bfc4      	itt	gt
 8002c98:	3b04      	subgt	r3, #4
 8002c9a:	9322      	strgt	r3, [sp, #136]	; 0x88
 8002c9c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8002c9e:	bfc8      	it	gt
 8002ca0:	2400      	movgt	r4, #0
 8002ca2:	f1a3 0302 	sub.w	r3, r3, #2
 8002ca6:	bfd8      	it	le
 8002ca8:	2401      	movle	r4, #1
 8002caa:	2b03      	cmp	r3, #3
 8002cac:	f200 808a 	bhi.w	8002dc4 <_dtoa_r+0x304>
 8002cb0:	e8df f003 	tbb	[pc, r3]
 8002cb4:	5b4d4f2d 	.word	0x5b4d4f2d
 8002cb8:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8002cbc:	441c      	add	r4, r3
 8002cbe:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8002cc2:	2b20      	cmp	r3, #32
 8002cc4:	bfc3      	ittte	gt
 8002cc6:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8002cca:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8002cce:	fa09 f303 	lslgt.w	r3, r9, r3
 8002cd2:	f1c3 0320 	rsble	r3, r3, #32
 8002cd6:	bfc6      	itte	gt
 8002cd8:	fa26 f000 	lsrgt.w	r0, r6, r0
 8002cdc:	4318      	orrgt	r0, r3
 8002cde:	fa06 f003 	lslle.w	r0, r6, r3
 8002ce2:	f7fd fb87 	bl	80003f4 <__aeabi_ui2d>
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8002cec:	3c01      	subs	r4, #1
 8002cee:	9313      	str	r3, [sp, #76]	; 0x4c
 8002cf0:	e76f      	b.n	8002bd2 <_dtoa_r+0x112>
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	e7b2      	b.n	8002c5c <_dtoa_r+0x19c>
 8002cf6:	900f      	str	r0, [sp, #60]	; 0x3c
 8002cf8:	e7b1      	b.n	8002c5e <_dtoa_r+0x19e>
 8002cfa:	9b06      	ldr	r3, [sp, #24]
 8002cfc:	eba3 030a 	sub.w	r3, r3, sl
 8002d00:	9306      	str	r3, [sp, #24]
 8002d02:	f1ca 0300 	rsb	r3, sl, #0
 8002d06:	930a      	str	r3, [sp, #40]	; 0x28
 8002d08:	2300      	movs	r3, #0
 8002d0a:	930e      	str	r3, [sp, #56]	; 0x38
 8002d0c:	e7be      	b.n	8002c8c <_dtoa_r+0x1cc>
 8002d0e:	2300      	movs	r3, #0
 8002d10:	930b      	str	r3, [sp, #44]	; 0x2c
 8002d12:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	dc58      	bgt.n	8002dca <_dtoa_r+0x30a>
 8002d18:	f04f 0901 	mov.w	r9, #1
 8002d1c:	464b      	mov	r3, r9
 8002d1e:	f8cd 9020 	str.w	r9, [sp, #32]
 8002d22:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8002d26:	2200      	movs	r2, #0
 8002d28:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8002d2a:	6042      	str	r2, [r0, #4]
 8002d2c:	2204      	movs	r2, #4
 8002d2e:	f102 0614 	add.w	r6, r2, #20
 8002d32:	429e      	cmp	r6, r3
 8002d34:	6841      	ldr	r1, [r0, #4]
 8002d36:	d94e      	bls.n	8002dd6 <_dtoa_r+0x316>
 8002d38:	4628      	mov	r0, r5
 8002d3a:	f000 fcd7 	bl	80036ec <_Balloc>
 8002d3e:	9003      	str	r0, [sp, #12]
 8002d40:	2800      	cmp	r0, #0
 8002d42:	d14c      	bne.n	8002dde <_dtoa_r+0x31e>
 8002d44:	4602      	mov	r2, r0
 8002d46:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8002d4a:	4b17      	ldr	r3, [pc, #92]	; (8002da8 <_dtoa_r+0x2e8>)
 8002d4c:	e6cc      	b.n	8002ae8 <_dtoa_r+0x28>
 8002d4e:	2301      	movs	r3, #1
 8002d50:	e7de      	b.n	8002d10 <_dtoa_r+0x250>
 8002d52:	2300      	movs	r3, #0
 8002d54:	930b      	str	r3, [sp, #44]	; 0x2c
 8002d56:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8002d58:	eb0a 0903 	add.w	r9, sl, r3
 8002d5c:	f109 0301 	add.w	r3, r9, #1
 8002d60:	2b01      	cmp	r3, #1
 8002d62:	9308      	str	r3, [sp, #32]
 8002d64:	bfb8      	it	lt
 8002d66:	2301      	movlt	r3, #1
 8002d68:	e7dd      	b.n	8002d26 <_dtoa_r+0x266>
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	e7f2      	b.n	8002d54 <_dtoa_r+0x294>
 8002d6e:	bf00      	nop
 8002d70:	636f4361 	.word	0x636f4361
 8002d74:	3fd287a7 	.word	0x3fd287a7
 8002d78:	8b60c8b3 	.word	0x8b60c8b3
 8002d7c:	3fc68a28 	.word	0x3fc68a28
 8002d80:	509f79fb 	.word	0x509f79fb
 8002d84:	3fd34413 	.word	0x3fd34413
 8002d88:	08004bed 	.word	0x08004bed
 8002d8c:	08004c04 	.word	0x08004c04
 8002d90:	7ff00000 	.word	0x7ff00000
 8002d94:	08004be9 	.word	0x08004be9
 8002d98:	08004be0 	.word	0x08004be0
 8002d9c:	08004bbd 	.word	0x08004bbd
 8002da0:	3ff80000 	.word	0x3ff80000
 8002da4:	08004cf8 	.word	0x08004cf8
 8002da8:	08004c5f 	.word	0x08004c5f
 8002dac:	2401      	movs	r4, #1
 8002dae:	2300      	movs	r3, #0
 8002db0:	940b      	str	r4, [sp, #44]	; 0x2c
 8002db2:	9322      	str	r3, [sp, #136]	; 0x88
 8002db4:	f04f 39ff 	mov.w	r9, #4294967295
 8002db8:	2200      	movs	r2, #0
 8002dba:	2312      	movs	r3, #18
 8002dbc:	f8cd 9020 	str.w	r9, [sp, #32]
 8002dc0:	9223      	str	r2, [sp, #140]	; 0x8c
 8002dc2:	e7b0      	b.n	8002d26 <_dtoa_r+0x266>
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	930b      	str	r3, [sp, #44]	; 0x2c
 8002dc8:	e7f4      	b.n	8002db4 <_dtoa_r+0x2f4>
 8002dca:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8002dce:	464b      	mov	r3, r9
 8002dd0:	f8cd 9020 	str.w	r9, [sp, #32]
 8002dd4:	e7a7      	b.n	8002d26 <_dtoa_r+0x266>
 8002dd6:	3101      	adds	r1, #1
 8002dd8:	6041      	str	r1, [r0, #4]
 8002dda:	0052      	lsls	r2, r2, #1
 8002ddc:	e7a7      	b.n	8002d2e <_dtoa_r+0x26e>
 8002dde:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8002de0:	9a03      	ldr	r2, [sp, #12]
 8002de2:	601a      	str	r2, [r3, #0]
 8002de4:	9b08      	ldr	r3, [sp, #32]
 8002de6:	2b0e      	cmp	r3, #14
 8002de8:	f200 80a8 	bhi.w	8002f3c <_dtoa_r+0x47c>
 8002dec:	2c00      	cmp	r4, #0
 8002dee:	f000 80a5 	beq.w	8002f3c <_dtoa_r+0x47c>
 8002df2:	f1ba 0f00 	cmp.w	sl, #0
 8002df6:	dd34      	ble.n	8002e62 <_dtoa_r+0x3a2>
 8002df8:	4a9a      	ldr	r2, [pc, #616]	; (8003064 <_dtoa_r+0x5a4>)
 8002dfa:	f00a 030f 	and.w	r3, sl, #15
 8002dfe:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8002e02:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8002e06:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002e0a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8002e0e:	ea4f 142a 	mov.w	r4, sl, asr #4
 8002e12:	d016      	beq.n	8002e42 <_dtoa_r+0x382>
 8002e14:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8002e18:	4b93      	ldr	r3, [pc, #588]	; (8003068 <_dtoa_r+0x5a8>)
 8002e1a:	2703      	movs	r7, #3
 8002e1c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8002e20:	f7fd fc8c 	bl	800073c <__aeabi_ddiv>
 8002e24:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8002e28:	f004 040f 	and.w	r4, r4, #15
 8002e2c:	4e8e      	ldr	r6, [pc, #568]	; (8003068 <_dtoa_r+0x5a8>)
 8002e2e:	b954      	cbnz	r4, 8002e46 <_dtoa_r+0x386>
 8002e30:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8002e34:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8002e38:	f7fd fc80 	bl	800073c <__aeabi_ddiv>
 8002e3c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8002e40:	e029      	b.n	8002e96 <_dtoa_r+0x3d6>
 8002e42:	2702      	movs	r7, #2
 8002e44:	e7f2      	b.n	8002e2c <_dtoa_r+0x36c>
 8002e46:	07e1      	lsls	r1, r4, #31
 8002e48:	d508      	bpl.n	8002e5c <_dtoa_r+0x39c>
 8002e4a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8002e4e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8002e52:	f7fd fb49 	bl	80004e8 <__aeabi_dmul>
 8002e56:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8002e5a:	3701      	adds	r7, #1
 8002e5c:	1064      	asrs	r4, r4, #1
 8002e5e:	3608      	adds	r6, #8
 8002e60:	e7e5      	b.n	8002e2e <_dtoa_r+0x36e>
 8002e62:	f000 80a5 	beq.w	8002fb0 <_dtoa_r+0x4f0>
 8002e66:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8002e6a:	f1ca 0400 	rsb	r4, sl, #0
 8002e6e:	4b7d      	ldr	r3, [pc, #500]	; (8003064 <_dtoa_r+0x5a4>)
 8002e70:	f004 020f 	and.w	r2, r4, #15
 8002e74:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002e78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e7c:	f7fd fb34 	bl	80004e8 <__aeabi_dmul>
 8002e80:	2702      	movs	r7, #2
 8002e82:	2300      	movs	r3, #0
 8002e84:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8002e88:	4e77      	ldr	r6, [pc, #476]	; (8003068 <_dtoa_r+0x5a8>)
 8002e8a:	1124      	asrs	r4, r4, #4
 8002e8c:	2c00      	cmp	r4, #0
 8002e8e:	f040 8084 	bne.w	8002f9a <_dtoa_r+0x4da>
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d1d2      	bne.n	8002e3c <_dtoa_r+0x37c>
 8002e96:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	f000 808b 	beq.w	8002fb4 <_dtoa_r+0x4f4>
 8002e9e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8002ea2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8002ea6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8002eaa:	2200      	movs	r2, #0
 8002eac:	4b6f      	ldr	r3, [pc, #444]	; (800306c <_dtoa_r+0x5ac>)
 8002eae:	f7fe f889 	bl	8000fc4 <__aeabi_dcmplt>
 8002eb2:	2800      	cmp	r0, #0
 8002eb4:	d07e      	beq.n	8002fb4 <_dtoa_r+0x4f4>
 8002eb6:	9b08      	ldr	r3, [sp, #32]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d07b      	beq.n	8002fb4 <_dtoa_r+0x4f4>
 8002ebc:	f1b9 0f00 	cmp.w	r9, #0
 8002ec0:	dd38      	ble.n	8002f34 <_dtoa_r+0x474>
 8002ec2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	4b69      	ldr	r3, [pc, #420]	; (8003070 <_dtoa_r+0x5b0>)
 8002eca:	f7fd fb0d 	bl	80004e8 <__aeabi_dmul>
 8002ece:	464c      	mov	r4, r9
 8002ed0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8002ed4:	f10a 38ff 	add.w	r8, sl, #4294967295
 8002ed8:	3701      	adds	r7, #1
 8002eda:	4638      	mov	r0, r7
 8002edc:	f7fd fa9a 	bl	8000414 <__aeabi_i2d>
 8002ee0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002ee4:	f7fd fb00 	bl	80004e8 <__aeabi_dmul>
 8002ee8:	2200      	movs	r2, #0
 8002eea:	4b62      	ldr	r3, [pc, #392]	; (8003074 <_dtoa_r+0x5b4>)
 8002eec:	f7fd f946 	bl	800017c <__adddf3>
 8002ef0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8002ef4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8002ef8:	9611      	str	r6, [sp, #68]	; 0x44
 8002efa:	2c00      	cmp	r4, #0
 8002efc:	d15d      	bne.n	8002fba <_dtoa_r+0x4fa>
 8002efe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8002f02:	2200      	movs	r2, #0
 8002f04:	4b5c      	ldr	r3, [pc, #368]	; (8003078 <_dtoa_r+0x5b8>)
 8002f06:	f7fd f937 	bl	8000178 <__aeabi_dsub>
 8002f0a:	4602      	mov	r2, r0
 8002f0c:	460b      	mov	r3, r1
 8002f0e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8002f12:	4633      	mov	r3, r6
 8002f14:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8002f16:	f7fe f873 	bl	8001000 <__aeabi_dcmpgt>
 8002f1a:	2800      	cmp	r0, #0
 8002f1c:	f040 829c 	bne.w	8003458 <_dtoa_r+0x998>
 8002f20:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8002f24:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8002f26:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8002f2a:	f7fe f84b 	bl	8000fc4 <__aeabi_dcmplt>
 8002f2e:	2800      	cmp	r0, #0
 8002f30:	f040 8290 	bne.w	8003454 <_dtoa_r+0x994>
 8002f34:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8002f38:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8002f3c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	f2c0 8152 	blt.w	80031e8 <_dtoa_r+0x728>
 8002f44:	f1ba 0f0e 	cmp.w	sl, #14
 8002f48:	f300 814e 	bgt.w	80031e8 <_dtoa_r+0x728>
 8002f4c:	4b45      	ldr	r3, [pc, #276]	; (8003064 <_dtoa_r+0x5a4>)
 8002f4e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8002f52:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002f56:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8002f5a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	f280 80db 	bge.w	8003118 <_dtoa_r+0x658>
 8002f62:	9b08      	ldr	r3, [sp, #32]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	f300 80d7 	bgt.w	8003118 <_dtoa_r+0x658>
 8002f6a:	f040 8272 	bne.w	8003452 <_dtoa_r+0x992>
 8002f6e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8002f72:	2200      	movs	r2, #0
 8002f74:	4b40      	ldr	r3, [pc, #256]	; (8003078 <_dtoa_r+0x5b8>)
 8002f76:	f7fd fab7 	bl	80004e8 <__aeabi_dmul>
 8002f7a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002f7e:	f7fe f835 	bl	8000fec <__aeabi_dcmpge>
 8002f82:	9c08      	ldr	r4, [sp, #32]
 8002f84:	4626      	mov	r6, r4
 8002f86:	2800      	cmp	r0, #0
 8002f88:	f040 8248 	bne.w	800341c <_dtoa_r+0x95c>
 8002f8c:	2331      	movs	r3, #49	; 0x31
 8002f8e:	9f03      	ldr	r7, [sp, #12]
 8002f90:	f10a 0a01 	add.w	sl, sl, #1
 8002f94:	f807 3b01 	strb.w	r3, [r7], #1
 8002f98:	e244      	b.n	8003424 <_dtoa_r+0x964>
 8002f9a:	07e2      	lsls	r2, r4, #31
 8002f9c:	d505      	bpl.n	8002faa <_dtoa_r+0x4ea>
 8002f9e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8002fa2:	f7fd faa1 	bl	80004e8 <__aeabi_dmul>
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	3701      	adds	r7, #1
 8002faa:	1064      	asrs	r4, r4, #1
 8002fac:	3608      	adds	r6, #8
 8002fae:	e76d      	b.n	8002e8c <_dtoa_r+0x3cc>
 8002fb0:	2702      	movs	r7, #2
 8002fb2:	e770      	b.n	8002e96 <_dtoa_r+0x3d6>
 8002fb4:	46d0      	mov	r8, sl
 8002fb6:	9c08      	ldr	r4, [sp, #32]
 8002fb8:	e78f      	b.n	8002eda <_dtoa_r+0x41a>
 8002fba:	9903      	ldr	r1, [sp, #12]
 8002fbc:	4b29      	ldr	r3, [pc, #164]	; (8003064 <_dtoa_r+0x5a4>)
 8002fbe:	4421      	add	r1, r4
 8002fc0:	9112      	str	r1, [sp, #72]	; 0x48
 8002fc2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8002fc4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8002fc8:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8002fcc:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8002fd0:	2900      	cmp	r1, #0
 8002fd2:	d055      	beq.n	8003080 <_dtoa_r+0x5c0>
 8002fd4:	2000      	movs	r0, #0
 8002fd6:	4929      	ldr	r1, [pc, #164]	; (800307c <_dtoa_r+0x5bc>)
 8002fd8:	f7fd fbb0 	bl	800073c <__aeabi_ddiv>
 8002fdc:	463b      	mov	r3, r7
 8002fde:	4632      	mov	r2, r6
 8002fe0:	f7fd f8ca 	bl	8000178 <__aeabi_dsub>
 8002fe4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8002fe8:	9f03      	ldr	r7, [sp, #12]
 8002fea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8002fee:	f7fe f827 	bl	8001040 <__aeabi_d2iz>
 8002ff2:	4604      	mov	r4, r0
 8002ff4:	f7fd fa0e 	bl	8000414 <__aeabi_i2d>
 8002ff8:	4602      	mov	r2, r0
 8002ffa:	460b      	mov	r3, r1
 8002ffc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003000:	f7fd f8ba 	bl	8000178 <__aeabi_dsub>
 8003004:	4602      	mov	r2, r0
 8003006:	460b      	mov	r3, r1
 8003008:	3430      	adds	r4, #48	; 0x30
 800300a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800300e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8003012:	f807 4b01 	strb.w	r4, [r7], #1
 8003016:	f7fd ffd5 	bl	8000fc4 <__aeabi_dcmplt>
 800301a:	2800      	cmp	r0, #0
 800301c:	d174      	bne.n	8003108 <_dtoa_r+0x648>
 800301e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003022:	2000      	movs	r0, #0
 8003024:	4911      	ldr	r1, [pc, #68]	; (800306c <_dtoa_r+0x5ac>)
 8003026:	f7fd f8a7 	bl	8000178 <__aeabi_dsub>
 800302a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800302e:	f7fd ffc9 	bl	8000fc4 <__aeabi_dcmplt>
 8003032:	2800      	cmp	r0, #0
 8003034:	f040 80b7 	bne.w	80031a6 <_dtoa_r+0x6e6>
 8003038:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800303a:	429f      	cmp	r7, r3
 800303c:	f43f af7a 	beq.w	8002f34 <_dtoa_r+0x474>
 8003040:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8003044:	2200      	movs	r2, #0
 8003046:	4b0a      	ldr	r3, [pc, #40]	; (8003070 <_dtoa_r+0x5b0>)
 8003048:	f7fd fa4e 	bl	80004e8 <__aeabi_dmul>
 800304c:	2200      	movs	r2, #0
 800304e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8003052:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003056:	4b06      	ldr	r3, [pc, #24]	; (8003070 <_dtoa_r+0x5b0>)
 8003058:	f7fd fa46 	bl	80004e8 <__aeabi_dmul>
 800305c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003060:	e7c3      	b.n	8002fea <_dtoa_r+0x52a>
 8003062:	bf00      	nop
 8003064:	08004cf8 	.word	0x08004cf8
 8003068:	08004cd0 	.word	0x08004cd0
 800306c:	3ff00000 	.word	0x3ff00000
 8003070:	40240000 	.word	0x40240000
 8003074:	401c0000 	.word	0x401c0000
 8003078:	40140000 	.word	0x40140000
 800307c:	3fe00000 	.word	0x3fe00000
 8003080:	4630      	mov	r0, r6
 8003082:	4639      	mov	r1, r7
 8003084:	f7fd fa30 	bl	80004e8 <__aeabi_dmul>
 8003088:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800308a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800308e:	9c03      	ldr	r4, [sp, #12]
 8003090:	9314      	str	r3, [sp, #80]	; 0x50
 8003092:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003096:	f7fd ffd3 	bl	8001040 <__aeabi_d2iz>
 800309a:	9015      	str	r0, [sp, #84]	; 0x54
 800309c:	f7fd f9ba 	bl	8000414 <__aeabi_i2d>
 80030a0:	4602      	mov	r2, r0
 80030a2:	460b      	mov	r3, r1
 80030a4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80030a8:	f7fd f866 	bl	8000178 <__aeabi_dsub>
 80030ac:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80030ae:	4606      	mov	r6, r0
 80030b0:	3330      	adds	r3, #48	; 0x30
 80030b2:	f804 3b01 	strb.w	r3, [r4], #1
 80030b6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80030b8:	460f      	mov	r7, r1
 80030ba:	429c      	cmp	r4, r3
 80030bc:	f04f 0200 	mov.w	r2, #0
 80030c0:	d124      	bne.n	800310c <_dtoa_r+0x64c>
 80030c2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80030c6:	4bb0      	ldr	r3, [pc, #704]	; (8003388 <_dtoa_r+0x8c8>)
 80030c8:	f7fd f858 	bl	800017c <__adddf3>
 80030cc:	4602      	mov	r2, r0
 80030ce:	460b      	mov	r3, r1
 80030d0:	4630      	mov	r0, r6
 80030d2:	4639      	mov	r1, r7
 80030d4:	f7fd ff94 	bl	8001000 <__aeabi_dcmpgt>
 80030d8:	2800      	cmp	r0, #0
 80030da:	d163      	bne.n	80031a4 <_dtoa_r+0x6e4>
 80030dc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80030e0:	2000      	movs	r0, #0
 80030e2:	49a9      	ldr	r1, [pc, #676]	; (8003388 <_dtoa_r+0x8c8>)
 80030e4:	f7fd f848 	bl	8000178 <__aeabi_dsub>
 80030e8:	4602      	mov	r2, r0
 80030ea:	460b      	mov	r3, r1
 80030ec:	4630      	mov	r0, r6
 80030ee:	4639      	mov	r1, r7
 80030f0:	f7fd ff68 	bl	8000fc4 <__aeabi_dcmplt>
 80030f4:	2800      	cmp	r0, #0
 80030f6:	f43f af1d 	beq.w	8002f34 <_dtoa_r+0x474>
 80030fa:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80030fc:	1e7b      	subs	r3, r7, #1
 80030fe:	9314      	str	r3, [sp, #80]	; 0x50
 8003100:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8003104:	2b30      	cmp	r3, #48	; 0x30
 8003106:	d0f8      	beq.n	80030fa <_dtoa_r+0x63a>
 8003108:	46c2      	mov	sl, r8
 800310a:	e03b      	b.n	8003184 <_dtoa_r+0x6c4>
 800310c:	4b9f      	ldr	r3, [pc, #636]	; (800338c <_dtoa_r+0x8cc>)
 800310e:	f7fd f9eb 	bl	80004e8 <__aeabi_dmul>
 8003112:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003116:	e7bc      	b.n	8003092 <_dtoa_r+0x5d2>
 8003118:	9f03      	ldr	r7, [sp, #12]
 800311a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800311e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003122:	4640      	mov	r0, r8
 8003124:	4649      	mov	r1, r9
 8003126:	f7fd fb09 	bl	800073c <__aeabi_ddiv>
 800312a:	f7fd ff89 	bl	8001040 <__aeabi_d2iz>
 800312e:	4604      	mov	r4, r0
 8003130:	f7fd f970 	bl	8000414 <__aeabi_i2d>
 8003134:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003138:	f7fd f9d6 	bl	80004e8 <__aeabi_dmul>
 800313c:	4602      	mov	r2, r0
 800313e:	460b      	mov	r3, r1
 8003140:	4640      	mov	r0, r8
 8003142:	4649      	mov	r1, r9
 8003144:	f7fd f818 	bl	8000178 <__aeabi_dsub>
 8003148:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800314c:	f807 6b01 	strb.w	r6, [r7], #1
 8003150:	9e03      	ldr	r6, [sp, #12]
 8003152:	f8dd c020 	ldr.w	ip, [sp, #32]
 8003156:	1bbe      	subs	r6, r7, r6
 8003158:	45b4      	cmp	ip, r6
 800315a:	4602      	mov	r2, r0
 800315c:	460b      	mov	r3, r1
 800315e:	d136      	bne.n	80031ce <_dtoa_r+0x70e>
 8003160:	f7fd f80c 	bl	800017c <__adddf3>
 8003164:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003168:	4680      	mov	r8, r0
 800316a:	4689      	mov	r9, r1
 800316c:	f7fd ff48 	bl	8001000 <__aeabi_dcmpgt>
 8003170:	bb58      	cbnz	r0, 80031ca <_dtoa_r+0x70a>
 8003172:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003176:	4640      	mov	r0, r8
 8003178:	4649      	mov	r1, r9
 800317a:	f7fd ff19 	bl	8000fb0 <__aeabi_dcmpeq>
 800317e:	b108      	cbz	r0, 8003184 <_dtoa_r+0x6c4>
 8003180:	07e1      	lsls	r1, r4, #31
 8003182:	d422      	bmi.n	80031ca <_dtoa_r+0x70a>
 8003184:	4628      	mov	r0, r5
 8003186:	4659      	mov	r1, fp
 8003188:	f000 faf0 	bl	800376c <_Bfree>
 800318c:	2300      	movs	r3, #0
 800318e:	703b      	strb	r3, [r7, #0]
 8003190:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8003192:	f10a 0001 	add.w	r0, sl, #1
 8003196:	6018      	str	r0, [r3, #0]
 8003198:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800319a:	2b00      	cmp	r3, #0
 800319c:	f43f acde 	beq.w	8002b5c <_dtoa_r+0x9c>
 80031a0:	601f      	str	r7, [r3, #0]
 80031a2:	e4db      	b.n	8002b5c <_dtoa_r+0x9c>
 80031a4:	4627      	mov	r7, r4
 80031a6:	463b      	mov	r3, r7
 80031a8:	461f      	mov	r7, r3
 80031aa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80031ae:	2a39      	cmp	r2, #57	; 0x39
 80031b0:	d107      	bne.n	80031c2 <_dtoa_r+0x702>
 80031b2:	9a03      	ldr	r2, [sp, #12]
 80031b4:	429a      	cmp	r2, r3
 80031b6:	d1f7      	bne.n	80031a8 <_dtoa_r+0x6e8>
 80031b8:	2230      	movs	r2, #48	; 0x30
 80031ba:	9903      	ldr	r1, [sp, #12]
 80031bc:	f108 0801 	add.w	r8, r8, #1
 80031c0:	700a      	strb	r2, [r1, #0]
 80031c2:	781a      	ldrb	r2, [r3, #0]
 80031c4:	3201      	adds	r2, #1
 80031c6:	701a      	strb	r2, [r3, #0]
 80031c8:	e79e      	b.n	8003108 <_dtoa_r+0x648>
 80031ca:	46d0      	mov	r8, sl
 80031cc:	e7eb      	b.n	80031a6 <_dtoa_r+0x6e6>
 80031ce:	2200      	movs	r2, #0
 80031d0:	4b6e      	ldr	r3, [pc, #440]	; (800338c <_dtoa_r+0x8cc>)
 80031d2:	f7fd f989 	bl	80004e8 <__aeabi_dmul>
 80031d6:	2200      	movs	r2, #0
 80031d8:	2300      	movs	r3, #0
 80031da:	4680      	mov	r8, r0
 80031dc:	4689      	mov	r9, r1
 80031de:	f7fd fee7 	bl	8000fb0 <__aeabi_dcmpeq>
 80031e2:	2800      	cmp	r0, #0
 80031e4:	d09b      	beq.n	800311e <_dtoa_r+0x65e>
 80031e6:	e7cd      	b.n	8003184 <_dtoa_r+0x6c4>
 80031e8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80031ea:	2a00      	cmp	r2, #0
 80031ec:	f000 80d0 	beq.w	8003390 <_dtoa_r+0x8d0>
 80031f0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80031f2:	2a01      	cmp	r2, #1
 80031f4:	f300 80ae 	bgt.w	8003354 <_dtoa_r+0x894>
 80031f8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80031fa:	2a00      	cmp	r2, #0
 80031fc:	f000 80a6 	beq.w	800334c <_dtoa_r+0x88c>
 8003200:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8003204:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8003206:	9f06      	ldr	r7, [sp, #24]
 8003208:	9a06      	ldr	r2, [sp, #24]
 800320a:	2101      	movs	r1, #1
 800320c:	441a      	add	r2, r3
 800320e:	9206      	str	r2, [sp, #24]
 8003210:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003212:	4628      	mov	r0, r5
 8003214:	441a      	add	r2, r3
 8003216:	9209      	str	r2, [sp, #36]	; 0x24
 8003218:	f000 fb5e 	bl	80038d8 <__i2b>
 800321c:	4606      	mov	r6, r0
 800321e:	2f00      	cmp	r7, #0
 8003220:	dd0c      	ble.n	800323c <_dtoa_r+0x77c>
 8003222:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003224:	2b00      	cmp	r3, #0
 8003226:	dd09      	ble.n	800323c <_dtoa_r+0x77c>
 8003228:	42bb      	cmp	r3, r7
 800322a:	bfa8      	it	ge
 800322c:	463b      	movge	r3, r7
 800322e:	9a06      	ldr	r2, [sp, #24]
 8003230:	1aff      	subs	r7, r7, r3
 8003232:	1ad2      	subs	r2, r2, r3
 8003234:	9206      	str	r2, [sp, #24]
 8003236:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003238:	1ad3      	subs	r3, r2, r3
 800323a:	9309      	str	r3, [sp, #36]	; 0x24
 800323c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800323e:	b1f3      	cbz	r3, 800327e <_dtoa_r+0x7be>
 8003240:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003242:	2b00      	cmp	r3, #0
 8003244:	f000 80a8 	beq.w	8003398 <_dtoa_r+0x8d8>
 8003248:	2c00      	cmp	r4, #0
 800324a:	dd10      	ble.n	800326e <_dtoa_r+0x7ae>
 800324c:	4631      	mov	r1, r6
 800324e:	4622      	mov	r2, r4
 8003250:	4628      	mov	r0, r5
 8003252:	f000 fbff 	bl	8003a54 <__pow5mult>
 8003256:	465a      	mov	r2, fp
 8003258:	4601      	mov	r1, r0
 800325a:	4606      	mov	r6, r0
 800325c:	4628      	mov	r0, r5
 800325e:	f000 fb51 	bl	8003904 <__multiply>
 8003262:	4680      	mov	r8, r0
 8003264:	4659      	mov	r1, fp
 8003266:	4628      	mov	r0, r5
 8003268:	f000 fa80 	bl	800376c <_Bfree>
 800326c:	46c3      	mov	fp, r8
 800326e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003270:	1b1a      	subs	r2, r3, r4
 8003272:	d004      	beq.n	800327e <_dtoa_r+0x7be>
 8003274:	4659      	mov	r1, fp
 8003276:	4628      	mov	r0, r5
 8003278:	f000 fbec 	bl	8003a54 <__pow5mult>
 800327c:	4683      	mov	fp, r0
 800327e:	2101      	movs	r1, #1
 8003280:	4628      	mov	r0, r5
 8003282:	f000 fb29 	bl	80038d8 <__i2b>
 8003286:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003288:	4604      	mov	r4, r0
 800328a:	2b00      	cmp	r3, #0
 800328c:	f340 8086 	ble.w	800339c <_dtoa_r+0x8dc>
 8003290:	461a      	mov	r2, r3
 8003292:	4601      	mov	r1, r0
 8003294:	4628      	mov	r0, r5
 8003296:	f000 fbdd 	bl	8003a54 <__pow5mult>
 800329a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800329c:	4604      	mov	r4, r0
 800329e:	2b01      	cmp	r3, #1
 80032a0:	dd7f      	ble.n	80033a2 <_dtoa_r+0x8e2>
 80032a2:	f04f 0800 	mov.w	r8, #0
 80032a6:	6923      	ldr	r3, [r4, #16]
 80032a8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80032ac:	6918      	ldr	r0, [r3, #16]
 80032ae:	f000 fac5 	bl	800383c <__hi0bits>
 80032b2:	f1c0 0020 	rsb	r0, r0, #32
 80032b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80032b8:	4418      	add	r0, r3
 80032ba:	f010 001f 	ands.w	r0, r0, #31
 80032be:	f000 8092 	beq.w	80033e6 <_dtoa_r+0x926>
 80032c2:	f1c0 0320 	rsb	r3, r0, #32
 80032c6:	2b04      	cmp	r3, #4
 80032c8:	f340 808a 	ble.w	80033e0 <_dtoa_r+0x920>
 80032cc:	f1c0 001c 	rsb	r0, r0, #28
 80032d0:	9b06      	ldr	r3, [sp, #24]
 80032d2:	4407      	add	r7, r0
 80032d4:	4403      	add	r3, r0
 80032d6:	9306      	str	r3, [sp, #24]
 80032d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80032da:	4403      	add	r3, r0
 80032dc:	9309      	str	r3, [sp, #36]	; 0x24
 80032de:	9b06      	ldr	r3, [sp, #24]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	dd05      	ble.n	80032f0 <_dtoa_r+0x830>
 80032e4:	4659      	mov	r1, fp
 80032e6:	461a      	mov	r2, r3
 80032e8:	4628      	mov	r0, r5
 80032ea:	f000 fc0d 	bl	8003b08 <__lshift>
 80032ee:	4683      	mov	fp, r0
 80032f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	dd05      	ble.n	8003302 <_dtoa_r+0x842>
 80032f6:	4621      	mov	r1, r4
 80032f8:	461a      	mov	r2, r3
 80032fa:	4628      	mov	r0, r5
 80032fc:	f000 fc04 	bl	8003b08 <__lshift>
 8003300:	4604      	mov	r4, r0
 8003302:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003304:	2b00      	cmp	r3, #0
 8003306:	d070      	beq.n	80033ea <_dtoa_r+0x92a>
 8003308:	4621      	mov	r1, r4
 800330a:	4658      	mov	r0, fp
 800330c:	f000 fc6c 	bl	8003be8 <__mcmp>
 8003310:	2800      	cmp	r0, #0
 8003312:	da6a      	bge.n	80033ea <_dtoa_r+0x92a>
 8003314:	2300      	movs	r3, #0
 8003316:	4659      	mov	r1, fp
 8003318:	220a      	movs	r2, #10
 800331a:	4628      	mov	r0, r5
 800331c:	f000 fa48 	bl	80037b0 <__multadd>
 8003320:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003322:	4683      	mov	fp, r0
 8003324:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003328:	2b00      	cmp	r3, #0
 800332a:	f000 8194 	beq.w	8003656 <_dtoa_r+0xb96>
 800332e:	4631      	mov	r1, r6
 8003330:	2300      	movs	r3, #0
 8003332:	220a      	movs	r2, #10
 8003334:	4628      	mov	r0, r5
 8003336:	f000 fa3b 	bl	80037b0 <__multadd>
 800333a:	f1b9 0f00 	cmp.w	r9, #0
 800333e:	4606      	mov	r6, r0
 8003340:	f300 8093 	bgt.w	800346a <_dtoa_r+0x9aa>
 8003344:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003346:	2b02      	cmp	r3, #2
 8003348:	dc57      	bgt.n	80033fa <_dtoa_r+0x93a>
 800334a:	e08e      	b.n	800346a <_dtoa_r+0x9aa>
 800334c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800334e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8003352:	e757      	b.n	8003204 <_dtoa_r+0x744>
 8003354:	9b08      	ldr	r3, [sp, #32]
 8003356:	1e5c      	subs	r4, r3, #1
 8003358:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800335a:	42a3      	cmp	r3, r4
 800335c:	bfb7      	itett	lt
 800335e:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8003360:	1b1c      	subge	r4, r3, r4
 8003362:	1ae2      	sublt	r2, r4, r3
 8003364:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8003366:	bfbe      	ittt	lt
 8003368:	940a      	strlt	r4, [sp, #40]	; 0x28
 800336a:	189b      	addlt	r3, r3, r2
 800336c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800336e:	9b08      	ldr	r3, [sp, #32]
 8003370:	bfb8      	it	lt
 8003372:	2400      	movlt	r4, #0
 8003374:	2b00      	cmp	r3, #0
 8003376:	bfbb      	ittet	lt
 8003378:	9b06      	ldrlt	r3, [sp, #24]
 800337a:	9a08      	ldrlt	r2, [sp, #32]
 800337c:	9f06      	ldrge	r7, [sp, #24]
 800337e:	1a9f      	sublt	r7, r3, r2
 8003380:	bfac      	ite	ge
 8003382:	9b08      	ldrge	r3, [sp, #32]
 8003384:	2300      	movlt	r3, #0
 8003386:	e73f      	b.n	8003208 <_dtoa_r+0x748>
 8003388:	3fe00000 	.word	0x3fe00000
 800338c:	40240000 	.word	0x40240000
 8003390:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8003392:	9f06      	ldr	r7, [sp, #24]
 8003394:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8003396:	e742      	b.n	800321e <_dtoa_r+0x75e>
 8003398:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800339a:	e76b      	b.n	8003274 <_dtoa_r+0x7b4>
 800339c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800339e:	2b01      	cmp	r3, #1
 80033a0:	dc19      	bgt.n	80033d6 <_dtoa_r+0x916>
 80033a2:	9b04      	ldr	r3, [sp, #16]
 80033a4:	b9bb      	cbnz	r3, 80033d6 <_dtoa_r+0x916>
 80033a6:	9b05      	ldr	r3, [sp, #20]
 80033a8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80033ac:	b99b      	cbnz	r3, 80033d6 <_dtoa_r+0x916>
 80033ae:	9b05      	ldr	r3, [sp, #20]
 80033b0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80033b4:	0d1b      	lsrs	r3, r3, #20
 80033b6:	051b      	lsls	r3, r3, #20
 80033b8:	b183      	cbz	r3, 80033dc <_dtoa_r+0x91c>
 80033ba:	f04f 0801 	mov.w	r8, #1
 80033be:	9b06      	ldr	r3, [sp, #24]
 80033c0:	3301      	adds	r3, #1
 80033c2:	9306      	str	r3, [sp, #24]
 80033c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80033c6:	3301      	adds	r3, #1
 80033c8:	9309      	str	r3, [sp, #36]	; 0x24
 80033ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	f47f af6a 	bne.w	80032a6 <_dtoa_r+0x7e6>
 80033d2:	2001      	movs	r0, #1
 80033d4:	e76f      	b.n	80032b6 <_dtoa_r+0x7f6>
 80033d6:	f04f 0800 	mov.w	r8, #0
 80033da:	e7f6      	b.n	80033ca <_dtoa_r+0x90a>
 80033dc:	4698      	mov	r8, r3
 80033de:	e7f4      	b.n	80033ca <_dtoa_r+0x90a>
 80033e0:	f43f af7d 	beq.w	80032de <_dtoa_r+0x81e>
 80033e4:	4618      	mov	r0, r3
 80033e6:	301c      	adds	r0, #28
 80033e8:	e772      	b.n	80032d0 <_dtoa_r+0x810>
 80033ea:	9b08      	ldr	r3, [sp, #32]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	dc36      	bgt.n	800345e <_dtoa_r+0x99e>
 80033f0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80033f2:	2b02      	cmp	r3, #2
 80033f4:	dd33      	ble.n	800345e <_dtoa_r+0x99e>
 80033f6:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80033fa:	f1b9 0f00 	cmp.w	r9, #0
 80033fe:	d10d      	bne.n	800341c <_dtoa_r+0x95c>
 8003400:	4621      	mov	r1, r4
 8003402:	464b      	mov	r3, r9
 8003404:	2205      	movs	r2, #5
 8003406:	4628      	mov	r0, r5
 8003408:	f000 f9d2 	bl	80037b0 <__multadd>
 800340c:	4601      	mov	r1, r0
 800340e:	4604      	mov	r4, r0
 8003410:	4658      	mov	r0, fp
 8003412:	f000 fbe9 	bl	8003be8 <__mcmp>
 8003416:	2800      	cmp	r0, #0
 8003418:	f73f adb8 	bgt.w	8002f8c <_dtoa_r+0x4cc>
 800341c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800341e:	9f03      	ldr	r7, [sp, #12]
 8003420:	ea6f 0a03 	mvn.w	sl, r3
 8003424:	f04f 0800 	mov.w	r8, #0
 8003428:	4621      	mov	r1, r4
 800342a:	4628      	mov	r0, r5
 800342c:	f000 f99e 	bl	800376c <_Bfree>
 8003430:	2e00      	cmp	r6, #0
 8003432:	f43f aea7 	beq.w	8003184 <_dtoa_r+0x6c4>
 8003436:	f1b8 0f00 	cmp.w	r8, #0
 800343a:	d005      	beq.n	8003448 <_dtoa_r+0x988>
 800343c:	45b0      	cmp	r8, r6
 800343e:	d003      	beq.n	8003448 <_dtoa_r+0x988>
 8003440:	4641      	mov	r1, r8
 8003442:	4628      	mov	r0, r5
 8003444:	f000 f992 	bl	800376c <_Bfree>
 8003448:	4631      	mov	r1, r6
 800344a:	4628      	mov	r0, r5
 800344c:	f000 f98e 	bl	800376c <_Bfree>
 8003450:	e698      	b.n	8003184 <_dtoa_r+0x6c4>
 8003452:	2400      	movs	r4, #0
 8003454:	4626      	mov	r6, r4
 8003456:	e7e1      	b.n	800341c <_dtoa_r+0x95c>
 8003458:	46c2      	mov	sl, r8
 800345a:	4626      	mov	r6, r4
 800345c:	e596      	b.n	8002f8c <_dtoa_r+0x4cc>
 800345e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003460:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003464:	2b00      	cmp	r3, #0
 8003466:	f000 80fd 	beq.w	8003664 <_dtoa_r+0xba4>
 800346a:	2f00      	cmp	r7, #0
 800346c:	dd05      	ble.n	800347a <_dtoa_r+0x9ba>
 800346e:	4631      	mov	r1, r6
 8003470:	463a      	mov	r2, r7
 8003472:	4628      	mov	r0, r5
 8003474:	f000 fb48 	bl	8003b08 <__lshift>
 8003478:	4606      	mov	r6, r0
 800347a:	f1b8 0f00 	cmp.w	r8, #0
 800347e:	d05c      	beq.n	800353a <_dtoa_r+0xa7a>
 8003480:	4628      	mov	r0, r5
 8003482:	6871      	ldr	r1, [r6, #4]
 8003484:	f000 f932 	bl	80036ec <_Balloc>
 8003488:	4607      	mov	r7, r0
 800348a:	b928      	cbnz	r0, 8003498 <_dtoa_r+0x9d8>
 800348c:	4602      	mov	r2, r0
 800348e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8003492:	4b7f      	ldr	r3, [pc, #508]	; (8003690 <_dtoa_r+0xbd0>)
 8003494:	f7ff bb28 	b.w	8002ae8 <_dtoa_r+0x28>
 8003498:	6932      	ldr	r2, [r6, #16]
 800349a:	f106 010c 	add.w	r1, r6, #12
 800349e:	3202      	adds	r2, #2
 80034a0:	0092      	lsls	r2, r2, #2
 80034a2:	300c      	adds	r0, #12
 80034a4:	f000 f914 	bl	80036d0 <memcpy>
 80034a8:	2201      	movs	r2, #1
 80034aa:	4639      	mov	r1, r7
 80034ac:	4628      	mov	r0, r5
 80034ae:	f000 fb2b 	bl	8003b08 <__lshift>
 80034b2:	46b0      	mov	r8, r6
 80034b4:	4606      	mov	r6, r0
 80034b6:	9b03      	ldr	r3, [sp, #12]
 80034b8:	3301      	adds	r3, #1
 80034ba:	9308      	str	r3, [sp, #32]
 80034bc:	9b03      	ldr	r3, [sp, #12]
 80034be:	444b      	add	r3, r9
 80034c0:	930a      	str	r3, [sp, #40]	; 0x28
 80034c2:	9b04      	ldr	r3, [sp, #16]
 80034c4:	f003 0301 	and.w	r3, r3, #1
 80034c8:	9309      	str	r3, [sp, #36]	; 0x24
 80034ca:	9b08      	ldr	r3, [sp, #32]
 80034cc:	4621      	mov	r1, r4
 80034ce:	3b01      	subs	r3, #1
 80034d0:	4658      	mov	r0, fp
 80034d2:	9304      	str	r3, [sp, #16]
 80034d4:	f7ff fa68 	bl	80029a8 <quorem>
 80034d8:	4603      	mov	r3, r0
 80034da:	4641      	mov	r1, r8
 80034dc:	3330      	adds	r3, #48	; 0x30
 80034de:	9006      	str	r0, [sp, #24]
 80034e0:	4658      	mov	r0, fp
 80034e2:	930b      	str	r3, [sp, #44]	; 0x2c
 80034e4:	f000 fb80 	bl	8003be8 <__mcmp>
 80034e8:	4632      	mov	r2, r6
 80034ea:	4681      	mov	r9, r0
 80034ec:	4621      	mov	r1, r4
 80034ee:	4628      	mov	r0, r5
 80034f0:	f000 fb96 	bl	8003c20 <__mdiff>
 80034f4:	68c2      	ldr	r2, [r0, #12]
 80034f6:	4607      	mov	r7, r0
 80034f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80034fa:	bb02      	cbnz	r2, 800353e <_dtoa_r+0xa7e>
 80034fc:	4601      	mov	r1, r0
 80034fe:	4658      	mov	r0, fp
 8003500:	f000 fb72 	bl	8003be8 <__mcmp>
 8003504:	4602      	mov	r2, r0
 8003506:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003508:	4639      	mov	r1, r7
 800350a:	4628      	mov	r0, r5
 800350c:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8003510:	f000 f92c 	bl	800376c <_Bfree>
 8003514:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003516:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003518:	9f08      	ldr	r7, [sp, #32]
 800351a:	ea43 0102 	orr.w	r1, r3, r2
 800351e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003520:	430b      	orrs	r3, r1
 8003522:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003524:	d10d      	bne.n	8003542 <_dtoa_r+0xa82>
 8003526:	2b39      	cmp	r3, #57	; 0x39
 8003528:	d029      	beq.n	800357e <_dtoa_r+0xabe>
 800352a:	f1b9 0f00 	cmp.w	r9, #0
 800352e:	dd01      	ble.n	8003534 <_dtoa_r+0xa74>
 8003530:	9b06      	ldr	r3, [sp, #24]
 8003532:	3331      	adds	r3, #49	; 0x31
 8003534:	9a04      	ldr	r2, [sp, #16]
 8003536:	7013      	strb	r3, [r2, #0]
 8003538:	e776      	b.n	8003428 <_dtoa_r+0x968>
 800353a:	4630      	mov	r0, r6
 800353c:	e7b9      	b.n	80034b2 <_dtoa_r+0x9f2>
 800353e:	2201      	movs	r2, #1
 8003540:	e7e2      	b.n	8003508 <_dtoa_r+0xa48>
 8003542:	f1b9 0f00 	cmp.w	r9, #0
 8003546:	db06      	blt.n	8003556 <_dtoa_r+0xa96>
 8003548:	9922      	ldr	r1, [sp, #136]	; 0x88
 800354a:	ea41 0909 	orr.w	r9, r1, r9
 800354e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003550:	ea59 0101 	orrs.w	r1, r9, r1
 8003554:	d120      	bne.n	8003598 <_dtoa_r+0xad8>
 8003556:	2a00      	cmp	r2, #0
 8003558:	ddec      	ble.n	8003534 <_dtoa_r+0xa74>
 800355a:	4659      	mov	r1, fp
 800355c:	2201      	movs	r2, #1
 800355e:	4628      	mov	r0, r5
 8003560:	9308      	str	r3, [sp, #32]
 8003562:	f000 fad1 	bl	8003b08 <__lshift>
 8003566:	4621      	mov	r1, r4
 8003568:	4683      	mov	fp, r0
 800356a:	f000 fb3d 	bl	8003be8 <__mcmp>
 800356e:	2800      	cmp	r0, #0
 8003570:	9b08      	ldr	r3, [sp, #32]
 8003572:	dc02      	bgt.n	800357a <_dtoa_r+0xaba>
 8003574:	d1de      	bne.n	8003534 <_dtoa_r+0xa74>
 8003576:	07da      	lsls	r2, r3, #31
 8003578:	d5dc      	bpl.n	8003534 <_dtoa_r+0xa74>
 800357a:	2b39      	cmp	r3, #57	; 0x39
 800357c:	d1d8      	bne.n	8003530 <_dtoa_r+0xa70>
 800357e:	2339      	movs	r3, #57	; 0x39
 8003580:	9a04      	ldr	r2, [sp, #16]
 8003582:	7013      	strb	r3, [r2, #0]
 8003584:	463b      	mov	r3, r7
 8003586:	461f      	mov	r7, r3
 8003588:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800358c:	3b01      	subs	r3, #1
 800358e:	2a39      	cmp	r2, #57	; 0x39
 8003590:	d050      	beq.n	8003634 <_dtoa_r+0xb74>
 8003592:	3201      	adds	r2, #1
 8003594:	701a      	strb	r2, [r3, #0]
 8003596:	e747      	b.n	8003428 <_dtoa_r+0x968>
 8003598:	2a00      	cmp	r2, #0
 800359a:	dd03      	ble.n	80035a4 <_dtoa_r+0xae4>
 800359c:	2b39      	cmp	r3, #57	; 0x39
 800359e:	d0ee      	beq.n	800357e <_dtoa_r+0xabe>
 80035a0:	3301      	adds	r3, #1
 80035a2:	e7c7      	b.n	8003534 <_dtoa_r+0xa74>
 80035a4:	9a08      	ldr	r2, [sp, #32]
 80035a6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80035a8:	f802 3c01 	strb.w	r3, [r2, #-1]
 80035ac:	428a      	cmp	r2, r1
 80035ae:	d02a      	beq.n	8003606 <_dtoa_r+0xb46>
 80035b0:	4659      	mov	r1, fp
 80035b2:	2300      	movs	r3, #0
 80035b4:	220a      	movs	r2, #10
 80035b6:	4628      	mov	r0, r5
 80035b8:	f000 f8fa 	bl	80037b0 <__multadd>
 80035bc:	45b0      	cmp	r8, r6
 80035be:	4683      	mov	fp, r0
 80035c0:	f04f 0300 	mov.w	r3, #0
 80035c4:	f04f 020a 	mov.w	r2, #10
 80035c8:	4641      	mov	r1, r8
 80035ca:	4628      	mov	r0, r5
 80035cc:	d107      	bne.n	80035de <_dtoa_r+0xb1e>
 80035ce:	f000 f8ef 	bl	80037b0 <__multadd>
 80035d2:	4680      	mov	r8, r0
 80035d4:	4606      	mov	r6, r0
 80035d6:	9b08      	ldr	r3, [sp, #32]
 80035d8:	3301      	adds	r3, #1
 80035da:	9308      	str	r3, [sp, #32]
 80035dc:	e775      	b.n	80034ca <_dtoa_r+0xa0a>
 80035de:	f000 f8e7 	bl	80037b0 <__multadd>
 80035e2:	4631      	mov	r1, r6
 80035e4:	4680      	mov	r8, r0
 80035e6:	2300      	movs	r3, #0
 80035e8:	220a      	movs	r2, #10
 80035ea:	4628      	mov	r0, r5
 80035ec:	f000 f8e0 	bl	80037b0 <__multadd>
 80035f0:	4606      	mov	r6, r0
 80035f2:	e7f0      	b.n	80035d6 <_dtoa_r+0xb16>
 80035f4:	f1b9 0f00 	cmp.w	r9, #0
 80035f8:	bfcc      	ite	gt
 80035fa:	464f      	movgt	r7, r9
 80035fc:	2701      	movle	r7, #1
 80035fe:	f04f 0800 	mov.w	r8, #0
 8003602:	9a03      	ldr	r2, [sp, #12]
 8003604:	4417      	add	r7, r2
 8003606:	4659      	mov	r1, fp
 8003608:	2201      	movs	r2, #1
 800360a:	4628      	mov	r0, r5
 800360c:	9308      	str	r3, [sp, #32]
 800360e:	f000 fa7b 	bl	8003b08 <__lshift>
 8003612:	4621      	mov	r1, r4
 8003614:	4683      	mov	fp, r0
 8003616:	f000 fae7 	bl	8003be8 <__mcmp>
 800361a:	2800      	cmp	r0, #0
 800361c:	dcb2      	bgt.n	8003584 <_dtoa_r+0xac4>
 800361e:	d102      	bne.n	8003626 <_dtoa_r+0xb66>
 8003620:	9b08      	ldr	r3, [sp, #32]
 8003622:	07db      	lsls	r3, r3, #31
 8003624:	d4ae      	bmi.n	8003584 <_dtoa_r+0xac4>
 8003626:	463b      	mov	r3, r7
 8003628:	461f      	mov	r7, r3
 800362a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800362e:	2a30      	cmp	r2, #48	; 0x30
 8003630:	d0fa      	beq.n	8003628 <_dtoa_r+0xb68>
 8003632:	e6f9      	b.n	8003428 <_dtoa_r+0x968>
 8003634:	9a03      	ldr	r2, [sp, #12]
 8003636:	429a      	cmp	r2, r3
 8003638:	d1a5      	bne.n	8003586 <_dtoa_r+0xac6>
 800363a:	2331      	movs	r3, #49	; 0x31
 800363c:	f10a 0a01 	add.w	sl, sl, #1
 8003640:	e779      	b.n	8003536 <_dtoa_r+0xa76>
 8003642:	4b14      	ldr	r3, [pc, #80]	; (8003694 <_dtoa_r+0xbd4>)
 8003644:	f7ff baa8 	b.w	8002b98 <_dtoa_r+0xd8>
 8003648:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800364a:	2b00      	cmp	r3, #0
 800364c:	f47f aa81 	bne.w	8002b52 <_dtoa_r+0x92>
 8003650:	4b11      	ldr	r3, [pc, #68]	; (8003698 <_dtoa_r+0xbd8>)
 8003652:	f7ff baa1 	b.w	8002b98 <_dtoa_r+0xd8>
 8003656:	f1b9 0f00 	cmp.w	r9, #0
 800365a:	dc03      	bgt.n	8003664 <_dtoa_r+0xba4>
 800365c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800365e:	2b02      	cmp	r3, #2
 8003660:	f73f aecb 	bgt.w	80033fa <_dtoa_r+0x93a>
 8003664:	9f03      	ldr	r7, [sp, #12]
 8003666:	4621      	mov	r1, r4
 8003668:	4658      	mov	r0, fp
 800366a:	f7ff f99d 	bl	80029a8 <quorem>
 800366e:	9a03      	ldr	r2, [sp, #12]
 8003670:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8003674:	f807 3b01 	strb.w	r3, [r7], #1
 8003678:	1aba      	subs	r2, r7, r2
 800367a:	4591      	cmp	r9, r2
 800367c:	ddba      	ble.n	80035f4 <_dtoa_r+0xb34>
 800367e:	4659      	mov	r1, fp
 8003680:	2300      	movs	r3, #0
 8003682:	220a      	movs	r2, #10
 8003684:	4628      	mov	r0, r5
 8003686:	f000 f893 	bl	80037b0 <__multadd>
 800368a:	4683      	mov	fp, r0
 800368c:	e7eb      	b.n	8003666 <_dtoa_r+0xba6>
 800368e:	bf00      	nop
 8003690:	08004c5f 	.word	0x08004c5f
 8003694:	08004bbc 	.word	0x08004bbc
 8003698:	08004be0 	.word	0x08004be0

0800369c <_localeconv_r>:
 800369c:	4800      	ldr	r0, [pc, #0]	; (80036a0 <_localeconv_r+0x4>)
 800369e:	4770      	bx	lr
 80036a0:	200003cc 	.word	0x200003cc

080036a4 <malloc>:
 80036a4:	4b02      	ldr	r3, [pc, #8]	; (80036b0 <malloc+0xc>)
 80036a6:	4601      	mov	r1, r0
 80036a8:	6818      	ldr	r0, [r3, #0]
 80036aa:	f000 bc1d 	b.w	8003ee8 <_malloc_r>
 80036ae:	bf00      	nop
 80036b0:	20000278 	.word	0x20000278

080036b4 <memchr>:
 80036b4:	4603      	mov	r3, r0
 80036b6:	b510      	push	{r4, lr}
 80036b8:	b2c9      	uxtb	r1, r1
 80036ba:	4402      	add	r2, r0
 80036bc:	4293      	cmp	r3, r2
 80036be:	4618      	mov	r0, r3
 80036c0:	d101      	bne.n	80036c6 <memchr+0x12>
 80036c2:	2000      	movs	r0, #0
 80036c4:	e003      	b.n	80036ce <memchr+0x1a>
 80036c6:	7804      	ldrb	r4, [r0, #0]
 80036c8:	3301      	adds	r3, #1
 80036ca:	428c      	cmp	r4, r1
 80036cc:	d1f6      	bne.n	80036bc <memchr+0x8>
 80036ce:	bd10      	pop	{r4, pc}

080036d0 <memcpy>:
 80036d0:	440a      	add	r2, r1
 80036d2:	4291      	cmp	r1, r2
 80036d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80036d8:	d100      	bne.n	80036dc <memcpy+0xc>
 80036da:	4770      	bx	lr
 80036dc:	b510      	push	{r4, lr}
 80036de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80036e2:	4291      	cmp	r1, r2
 80036e4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80036e8:	d1f9      	bne.n	80036de <memcpy+0xe>
 80036ea:	bd10      	pop	{r4, pc}

080036ec <_Balloc>:
 80036ec:	b570      	push	{r4, r5, r6, lr}
 80036ee:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80036f0:	4604      	mov	r4, r0
 80036f2:	460d      	mov	r5, r1
 80036f4:	b976      	cbnz	r6, 8003714 <_Balloc+0x28>
 80036f6:	2010      	movs	r0, #16
 80036f8:	f7ff ffd4 	bl	80036a4 <malloc>
 80036fc:	4602      	mov	r2, r0
 80036fe:	6260      	str	r0, [r4, #36]	; 0x24
 8003700:	b920      	cbnz	r0, 800370c <_Balloc+0x20>
 8003702:	2166      	movs	r1, #102	; 0x66
 8003704:	4b17      	ldr	r3, [pc, #92]	; (8003764 <_Balloc+0x78>)
 8003706:	4818      	ldr	r0, [pc, #96]	; (8003768 <_Balloc+0x7c>)
 8003708:	f000 fc72 	bl	8003ff0 <__assert_func>
 800370c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8003710:	6006      	str	r6, [r0, #0]
 8003712:	60c6      	str	r6, [r0, #12]
 8003714:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8003716:	68f3      	ldr	r3, [r6, #12]
 8003718:	b183      	cbz	r3, 800373c <_Balloc+0x50>
 800371a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800371c:	68db      	ldr	r3, [r3, #12]
 800371e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8003722:	b9b8      	cbnz	r0, 8003754 <_Balloc+0x68>
 8003724:	2101      	movs	r1, #1
 8003726:	fa01 f605 	lsl.w	r6, r1, r5
 800372a:	1d72      	adds	r2, r6, #5
 800372c:	4620      	mov	r0, r4
 800372e:	0092      	lsls	r2, r2, #2
 8003730:	f000 fb5e 	bl	8003df0 <_calloc_r>
 8003734:	b160      	cbz	r0, 8003750 <_Balloc+0x64>
 8003736:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800373a:	e00e      	b.n	800375a <_Balloc+0x6e>
 800373c:	2221      	movs	r2, #33	; 0x21
 800373e:	2104      	movs	r1, #4
 8003740:	4620      	mov	r0, r4
 8003742:	f000 fb55 	bl	8003df0 <_calloc_r>
 8003746:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003748:	60f0      	str	r0, [r6, #12]
 800374a:	68db      	ldr	r3, [r3, #12]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d1e4      	bne.n	800371a <_Balloc+0x2e>
 8003750:	2000      	movs	r0, #0
 8003752:	bd70      	pop	{r4, r5, r6, pc}
 8003754:	6802      	ldr	r2, [r0, #0]
 8003756:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800375a:	2300      	movs	r3, #0
 800375c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8003760:	e7f7      	b.n	8003752 <_Balloc+0x66>
 8003762:	bf00      	nop
 8003764:	08004bed 	.word	0x08004bed
 8003768:	08004c70 	.word	0x08004c70

0800376c <_Bfree>:
 800376c:	b570      	push	{r4, r5, r6, lr}
 800376e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8003770:	4605      	mov	r5, r0
 8003772:	460c      	mov	r4, r1
 8003774:	b976      	cbnz	r6, 8003794 <_Bfree+0x28>
 8003776:	2010      	movs	r0, #16
 8003778:	f7ff ff94 	bl	80036a4 <malloc>
 800377c:	4602      	mov	r2, r0
 800377e:	6268      	str	r0, [r5, #36]	; 0x24
 8003780:	b920      	cbnz	r0, 800378c <_Bfree+0x20>
 8003782:	218a      	movs	r1, #138	; 0x8a
 8003784:	4b08      	ldr	r3, [pc, #32]	; (80037a8 <_Bfree+0x3c>)
 8003786:	4809      	ldr	r0, [pc, #36]	; (80037ac <_Bfree+0x40>)
 8003788:	f000 fc32 	bl	8003ff0 <__assert_func>
 800378c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8003790:	6006      	str	r6, [r0, #0]
 8003792:	60c6      	str	r6, [r0, #12]
 8003794:	b13c      	cbz	r4, 80037a6 <_Bfree+0x3a>
 8003796:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003798:	6862      	ldr	r2, [r4, #4]
 800379a:	68db      	ldr	r3, [r3, #12]
 800379c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80037a0:	6021      	str	r1, [r4, #0]
 80037a2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80037a6:	bd70      	pop	{r4, r5, r6, pc}
 80037a8:	08004bed 	.word	0x08004bed
 80037ac:	08004c70 	.word	0x08004c70

080037b0 <__multadd>:
 80037b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80037b4:	4607      	mov	r7, r0
 80037b6:	460c      	mov	r4, r1
 80037b8:	461e      	mov	r6, r3
 80037ba:	2000      	movs	r0, #0
 80037bc:	690d      	ldr	r5, [r1, #16]
 80037be:	f101 0c14 	add.w	ip, r1, #20
 80037c2:	f8dc 3000 	ldr.w	r3, [ip]
 80037c6:	3001      	adds	r0, #1
 80037c8:	b299      	uxth	r1, r3
 80037ca:	fb02 6101 	mla	r1, r2, r1, r6
 80037ce:	0c1e      	lsrs	r6, r3, #16
 80037d0:	0c0b      	lsrs	r3, r1, #16
 80037d2:	fb02 3306 	mla	r3, r2, r6, r3
 80037d6:	b289      	uxth	r1, r1
 80037d8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80037dc:	4285      	cmp	r5, r0
 80037de:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80037e2:	f84c 1b04 	str.w	r1, [ip], #4
 80037e6:	dcec      	bgt.n	80037c2 <__multadd+0x12>
 80037e8:	b30e      	cbz	r6, 800382e <__multadd+0x7e>
 80037ea:	68a3      	ldr	r3, [r4, #8]
 80037ec:	42ab      	cmp	r3, r5
 80037ee:	dc19      	bgt.n	8003824 <__multadd+0x74>
 80037f0:	6861      	ldr	r1, [r4, #4]
 80037f2:	4638      	mov	r0, r7
 80037f4:	3101      	adds	r1, #1
 80037f6:	f7ff ff79 	bl	80036ec <_Balloc>
 80037fa:	4680      	mov	r8, r0
 80037fc:	b928      	cbnz	r0, 800380a <__multadd+0x5a>
 80037fe:	4602      	mov	r2, r0
 8003800:	21b5      	movs	r1, #181	; 0xb5
 8003802:	4b0c      	ldr	r3, [pc, #48]	; (8003834 <__multadd+0x84>)
 8003804:	480c      	ldr	r0, [pc, #48]	; (8003838 <__multadd+0x88>)
 8003806:	f000 fbf3 	bl	8003ff0 <__assert_func>
 800380a:	6922      	ldr	r2, [r4, #16]
 800380c:	f104 010c 	add.w	r1, r4, #12
 8003810:	3202      	adds	r2, #2
 8003812:	0092      	lsls	r2, r2, #2
 8003814:	300c      	adds	r0, #12
 8003816:	f7ff ff5b 	bl	80036d0 <memcpy>
 800381a:	4621      	mov	r1, r4
 800381c:	4638      	mov	r0, r7
 800381e:	f7ff ffa5 	bl	800376c <_Bfree>
 8003822:	4644      	mov	r4, r8
 8003824:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8003828:	3501      	adds	r5, #1
 800382a:	615e      	str	r6, [r3, #20]
 800382c:	6125      	str	r5, [r4, #16]
 800382e:	4620      	mov	r0, r4
 8003830:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003834:	08004c5f 	.word	0x08004c5f
 8003838:	08004c70 	.word	0x08004c70

0800383c <__hi0bits>:
 800383c:	0c02      	lsrs	r2, r0, #16
 800383e:	0412      	lsls	r2, r2, #16
 8003840:	4603      	mov	r3, r0
 8003842:	b9ca      	cbnz	r2, 8003878 <__hi0bits+0x3c>
 8003844:	0403      	lsls	r3, r0, #16
 8003846:	2010      	movs	r0, #16
 8003848:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800384c:	bf04      	itt	eq
 800384e:	021b      	lsleq	r3, r3, #8
 8003850:	3008      	addeq	r0, #8
 8003852:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8003856:	bf04      	itt	eq
 8003858:	011b      	lsleq	r3, r3, #4
 800385a:	3004      	addeq	r0, #4
 800385c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8003860:	bf04      	itt	eq
 8003862:	009b      	lsleq	r3, r3, #2
 8003864:	3002      	addeq	r0, #2
 8003866:	2b00      	cmp	r3, #0
 8003868:	db05      	blt.n	8003876 <__hi0bits+0x3a>
 800386a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800386e:	f100 0001 	add.w	r0, r0, #1
 8003872:	bf08      	it	eq
 8003874:	2020      	moveq	r0, #32
 8003876:	4770      	bx	lr
 8003878:	2000      	movs	r0, #0
 800387a:	e7e5      	b.n	8003848 <__hi0bits+0xc>

0800387c <__lo0bits>:
 800387c:	6803      	ldr	r3, [r0, #0]
 800387e:	4602      	mov	r2, r0
 8003880:	f013 0007 	ands.w	r0, r3, #7
 8003884:	d00b      	beq.n	800389e <__lo0bits+0x22>
 8003886:	07d9      	lsls	r1, r3, #31
 8003888:	d421      	bmi.n	80038ce <__lo0bits+0x52>
 800388a:	0798      	lsls	r0, r3, #30
 800388c:	bf49      	itett	mi
 800388e:	085b      	lsrmi	r3, r3, #1
 8003890:	089b      	lsrpl	r3, r3, #2
 8003892:	2001      	movmi	r0, #1
 8003894:	6013      	strmi	r3, [r2, #0]
 8003896:	bf5c      	itt	pl
 8003898:	2002      	movpl	r0, #2
 800389a:	6013      	strpl	r3, [r2, #0]
 800389c:	4770      	bx	lr
 800389e:	b299      	uxth	r1, r3
 80038a0:	b909      	cbnz	r1, 80038a6 <__lo0bits+0x2a>
 80038a2:	2010      	movs	r0, #16
 80038a4:	0c1b      	lsrs	r3, r3, #16
 80038a6:	b2d9      	uxtb	r1, r3
 80038a8:	b909      	cbnz	r1, 80038ae <__lo0bits+0x32>
 80038aa:	3008      	adds	r0, #8
 80038ac:	0a1b      	lsrs	r3, r3, #8
 80038ae:	0719      	lsls	r1, r3, #28
 80038b0:	bf04      	itt	eq
 80038b2:	091b      	lsreq	r3, r3, #4
 80038b4:	3004      	addeq	r0, #4
 80038b6:	0799      	lsls	r1, r3, #30
 80038b8:	bf04      	itt	eq
 80038ba:	089b      	lsreq	r3, r3, #2
 80038bc:	3002      	addeq	r0, #2
 80038be:	07d9      	lsls	r1, r3, #31
 80038c0:	d403      	bmi.n	80038ca <__lo0bits+0x4e>
 80038c2:	085b      	lsrs	r3, r3, #1
 80038c4:	f100 0001 	add.w	r0, r0, #1
 80038c8:	d003      	beq.n	80038d2 <__lo0bits+0x56>
 80038ca:	6013      	str	r3, [r2, #0]
 80038cc:	4770      	bx	lr
 80038ce:	2000      	movs	r0, #0
 80038d0:	4770      	bx	lr
 80038d2:	2020      	movs	r0, #32
 80038d4:	4770      	bx	lr
	...

080038d8 <__i2b>:
 80038d8:	b510      	push	{r4, lr}
 80038da:	460c      	mov	r4, r1
 80038dc:	2101      	movs	r1, #1
 80038de:	f7ff ff05 	bl	80036ec <_Balloc>
 80038e2:	4602      	mov	r2, r0
 80038e4:	b928      	cbnz	r0, 80038f2 <__i2b+0x1a>
 80038e6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80038ea:	4b04      	ldr	r3, [pc, #16]	; (80038fc <__i2b+0x24>)
 80038ec:	4804      	ldr	r0, [pc, #16]	; (8003900 <__i2b+0x28>)
 80038ee:	f000 fb7f 	bl	8003ff0 <__assert_func>
 80038f2:	2301      	movs	r3, #1
 80038f4:	6144      	str	r4, [r0, #20]
 80038f6:	6103      	str	r3, [r0, #16]
 80038f8:	bd10      	pop	{r4, pc}
 80038fa:	bf00      	nop
 80038fc:	08004c5f 	.word	0x08004c5f
 8003900:	08004c70 	.word	0x08004c70

08003904 <__multiply>:
 8003904:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003908:	4691      	mov	r9, r2
 800390a:	690a      	ldr	r2, [r1, #16]
 800390c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8003910:	460c      	mov	r4, r1
 8003912:	429a      	cmp	r2, r3
 8003914:	bfbe      	ittt	lt
 8003916:	460b      	movlt	r3, r1
 8003918:	464c      	movlt	r4, r9
 800391a:	4699      	movlt	r9, r3
 800391c:	6927      	ldr	r7, [r4, #16]
 800391e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8003922:	68a3      	ldr	r3, [r4, #8]
 8003924:	6861      	ldr	r1, [r4, #4]
 8003926:	eb07 060a 	add.w	r6, r7, sl
 800392a:	42b3      	cmp	r3, r6
 800392c:	b085      	sub	sp, #20
 800392e:	bfb8      	it	lt
 8003930:	3101      	addlt	r1, #1
 8003932:	f7ff fedb 	bl	80036ec <_Balloc>
 8003936:	b930      	cbnz	r0, 8003946 <__multiply+0x42>
 8003938:	4602      	mov	r2, r0
 800393a:	f240 115d 	movw	r1, #349	; 0x15d
 800393e:	4b43      	ldr	r3, [pc, #268]	; (8003a4c <__multiply+0x148>)
 8003940:	4843      	ldr	r0, [pc, #268]	; (8003a50 <__multiply+0x14c>)
 8003942:	f000 fb55 	bl	8003ff0 <__assert_func>
 8003946:	f100 0514 	add.w	r5, r0, #20
 800394a:	462b      	mov	r3, r5
 800394c:	2200      	movs	r2, #0
 800394e:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8003952:	4543      	cmp	r3, r8
 8003954:	d321      	bcc.n	800399a <__multiply+0x96>
 8003956:	f104 0314 	add.w	r3, r4, #20
 800395a:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800395e:	f109 0314 	add.w	r3, r9, #20
 8003962:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8003966:	9202      	str	r2, [sp, #8]
 8003968:	1b3a      	subs	r2, r7, r4
 800396a:	3a15      	subs	r2, #21
 800396c:	f022 0203 	bic.w	r2, r2, #3
 8003970:	3204      	adds	r2, #4
 8003972:	f104 0115 	add.w	r1, r4, #21
 8003976:	428f      	cmp	r7, r1
 8003978:	bf38      	it	cc
 800397a:	2204      	movcc	r2, #4
 800397c:	9201      	str	r2, [sp, #4]
 800397e:	9a02      	ldr	r2, [sp, #8]
 8003980:	9303      	str	r3, [sp, #12]
 8003982:	429a      	cmp	r2, r3
 8003984:	d80c      	bhi.n	80039a0 <__multiply+0x9c>
 8003986:	2e00      	cmp	r6, #0
 8003988:	dd03      	ble.n	8003992 <__multiply+0x8e>
 800398a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800398e:	2b00      	cmp	r3, #0
 8003990:	d059      	beq.n	8003a46 <__multiply+0x142>
 8003992:	6106      	str	r6, [r0, #16]
 8003994:	b005      	add	sp, #20
 8003996:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800399a:	f843 2b04 	str.w	r2, [r3], #4
 800399e:	e7d8      	b.n	8003952 <__multiply+0x4e>
 80039a0:	f8b3 a000 	ldrh.w	sl, [r3]
 80039a4:	f1ba 0f00 	cmp.w	sl, #0
 80039a8:	d023      	beq.n	80039f2 <__multiply+0xee>
 80039aa:	46a9      	mov	r9, r5
 80039ac:	f04f 0c00 	mov.w	ip, #0
 80039b0:	f104 0e14 	add.w	lr, r4, #20
 80039b4:	f85e 2b04 	ldr.w	r2, [lr], #4
 80039b8:	f8d9 1000 	ldr.w	r1, [r9]
 80039bc:	fa1f fb82 	uxth.w	fp, r2
 80039c0:	b289      	uxth	r1, r1
 80039c2:	fb0a 110b 	mla	r1, sl, fp, r1
 80039c6:	4461      	add	r1, ip
 80039c8:	f8d9 c000 	ldr.w	ip, [r9]
 80039cc:	0c12      	lsrs	r2, r2, #16
 80039ce:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80039d2:	fb0a c202 	mla	r2, sl, r2, ip
 80039d6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80039da:	b289      	uxth	r1, r1
 80039dc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80039e0:	4577      	cmp	r7, lr
 80039e2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80039e6:	f849 1b04 	str.w	r1, [r9], #4
 80039ea:	d8e3      	bhi.n	80039b4 <__multiply+0xb0>
 80039ec:	9a01      	ldr	r2, [sp, #4]
 80039ee:	f845 c002 	str.w	ip, [r5, r2]
 80039f2:	9a03      	ldr	r2, [sp, #12]
 80039f4:	3304      	adds	r3, #4
 80039f6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80039fa:	f1b9 0f00 	cmp.w	r9, #0
 80039fe:	d020      	beq.n	8003a42 <__multiply+0x13e>
 8003a00:	46ae      	mov	lr, r5
 8003a02:	f04f 0a00 	mov.w	sl, #0
 8003a06:	6829      	ldr	r1, [r5, #0]
 8003a08:	f104 0c14 	add.w	ip, r4, #20
 8003a0c:	f8bc b000 	ldrh.w	fp, [ip]
 8003a10:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8003a14:	b289      	uxth	r1, r1
 8003a16:	fb09 220b 	mla	r2, r9, fp, r2
 8003a1a:	4492      	add	sl, r2
 8003a1c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8003a20:	f84e 1b04 	str.w	r1, [lr], #4
 8003a24:	f85c 2b04 	ldr.w	r2, [ip], #4
 8003a28:	f8be 1000 	ldrh.w	r1, [lr]
 8003a2c:	0c12      	lsrs	r2, r2, #16
 8003a2e:	fb09 1102 	mla	r1, r9, r2, r1
 8003a32:	4567      	cmp	r7, ip
 8003a34:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8003a38:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8003a3c:	d8e6      	bhi.n	8003a0c <__multiply+0x108>
 8003a3e:	9a01      	ldr	r2, [sp, #4]
 8003a40:	50a9      	str	r1, [r5, r2]
 8003a42:	3504      	adds	r5, #4
 8003a44:	e79b      	b.n	800397e <__multiply+0x7a>
 8003a46:	3e01      	subs	r6, #1
 8003a48:	e79d      	b.n	8003986 <__multiply+0x82>
 8003a4a:	bf00      	nop
 8003a4c:	08004c5f 	.word	0x08004c5f
 8003a50:	08004c70 	.word	0x08004c70

08003a54 <__pow5mult>:
 8003a54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003a58:	4615      	mov	r5, r2
 8003a5a:	f012 0203 	ands.w	r2, r2, #3
 8003a5e:	4606      	mov	r6, r0
 8003a60:	460f      	mov	r7, r1
 8003a62:	d007      	beq.n	8003a74 <__pow5mult+0x20>
 8003a64:	4c25      	ldr	r4, [pc, #148]	; (8003afc <__pow5mult+0xa8>)
 8003a66:	3a01      	subs	r2, #1
 8003a68:	2300      	movs	r3, #0
 8003a6a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8003a6e:	f7ff fe9f 	bl	80037b0 <__multadd>
 8003a72:	4607      	mov	r7, r0
 8003a74:	10ad      	asrs	r5, r5, #2
 8003a76:	d03d      	beq.n	8003af4 <__pow5mult+0xa0>
 8003a78:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8003a7a:	b97c      	cbnz	r4, 8003a9c <__pow5mult+0x48>
 8003a7c:	2010      	movs	r0, #16
 8003a7e:	f7ff fe11 	bl	80036a4 <malloc>
 8003a82:	4602      	mov	r2, r0
 8003a84:	6270      	str	r0, [r6, #36]	; 0x24
 8003a86:	b928      	cbnz	r0, 8003a94 <__pow5mult+0x40>
 8003a88:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8003a8c:	4b1c      	ldr	r3, [pc, #112]	; (8003b00 <__pow5mult+0xac>)
 8003a8e:	481d      	ldr	r0, [pc, #116]	; (8003b04 <__pow5mult+0xb0>)
 8003a90:	f000 faae 	bl	8003ff0 <__assert_func>
 8003a94:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8003a98:	6004      	str	r4, [r0, #0]
 8003a9a:	60c4      	str	r4, [r0, #12]
 8003a9c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8003aa0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8003aa4:	b94c      	cbnz	r4, 8003aba <__pow5mult+0x66>
 8003aa6:	f240 2171 	movw	r1, #625	; 0x271
 8003aaa:	4630      	mov	r0, r6
 8003aac:	f7ff ff14 	bl	80038d8 <__i2b>
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	4604      	mov	r4, r0
 8003ab4:	f8c8 0008 	str.w	r0, [r8, #8]
 8003ab8:	6003      	str	r3, [r0, #0]
 8003aba:	f04f 0900 	mov.w	r9, #0
 8003abe:	07eb      	lsls	r3, r5, #31
 8003ac0:	d50a      	bpl.n	8003ad8 <__pow5mult+0x84>
 8003ac2:	4639      	mov	r1, r7
 8003ac4:	4622      	mov	r2, r4
 8003ac6:	4630      	mov	r0, r6
 8003ac8:	f7ff ff1c 	bl	8003904 <__multiply>
 8003acc:	4680      	mov	r8, r0
 8003ace:	4639      	mov	r1, r7
 8003ad0:	4630      	mov	r0, r6
 8003ad2:	f7ff fe4b 	bl	800376c <_Bfree>
 8003ad6:	4647      	mov	r7, r8
 8003ad8:	106d      	asrs	r5, r5, #1
 8003ada:	d00b      	beq.n	8003af4 <__pow5mult+0xa0>
 8003adc:	6820      	ldr	r0, [r4, #0]
 8003ade:	b938      	cbnz	r0, 8003af0 <__pow5mult+0x9c>
 8003ae0:	4622      	mov	r2, r4
 8003ae2:	4621      	mov	r1, r4
 8003ae4:	4630      	mov	r0, r6
 8003ae6:	f7ff ff0d 	bl	8003904 <__multiply>
 8003aea:	6020      	str	r0, [r4, #0]
 8003aec:	f8c0 9000 	str.w	r9, [r0]
 8003af0:	4604      	mov	r4, r0
 8003af2:	e7e4      	b.n	8003abe <__pow5mult+0x6a>
 8003af4:	4638      	mov	r0, r7
 8003af6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003afa:	bf00      	nop
 8003afc:	08004dc0 	.word	0x08004dc0
 8003b00:	08004bed 	.word	0x08004bed
 8003b04:	08004c70 	.word	0x08004c70

08003b08 <__lshift>:
 8003b08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003b0c:	460c      	mov	r4, r1
 8003b0e:	4607      	mov	r7, r0
 8003b10:	4691      	mov	r9, r2
 8003b12:	6923      	ldr	r3, [r4, #16]
 8003b14:	6849      	ldr	r1, [r1, #4]
 8003b16:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8003b1a:	68a3      	ldr	r3, [r4, #8]
 8003b1c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8003b20:	f108 0601 	add.w	r6, r8, #1
 8003b24:	42b3      	cmp	r3, r6
 8003b26:	db0b      	blt.n	8003b40 <__lshift+0x38>
 8003b28:	4638      	mov	r0, r7
 8003b2a:	f7ff fddf 	bl	80036ec <_Balloc>
 8003b2e:	4605      	mov	r5, r0
 8003b30:	b948      	cbnz	r0, 8003b46 <__lshift+0x3e>
 8003b32:	4602      	mov	r2, r0
 8003b34:	f240 11d9 	movw	r1, #473	; 0x1d9
 8003b38:	4b29      	ldr	r3, [pc, #164]	; (8003be0 <__lshift+0xd8>)
 8003b3a:	482a      	ldr	r0, [pc, #168]	; (8003be4 <__lshift+0xdc>)
 8003b3c:	f000 fa58 	bl	8003ff0 <__assert_func>
 8003b40:	3101      	adds	r1, #1
 8003b42:	005b      	lsls	r3, r3, #1
 8003b44:	e7ee      	b.n	8003b24 <__lshift+0x1c>
 8003b46:	2300      	movs	r3, #0
 8003b48:	f100 0114 	add.w	r1, r0, #20
 8003b4c:	f100 0210 	add.w	r2, r0, #16
 8003b50:	4618      	mov	r0, r3
 8003b52:	4553      	cmp	r3, sl
 8003b54:	db37      	blt.n	8003bc6 <__lshift+0xbe>
 8003b56:	6920      	ldr	r0, [r4, #16]
 8003b58:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8003b5c:	f104 0314 	add.w	r3, r4, #20
 8003b60:	f019 091f 	ands.w	r9, r9, #31
 8003b64:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8003b68:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8003b6c:	d02f      	beq.n	8003bce <__lshift+0xc6>
 8003b6e:	468a      	mov	sl, r1
 8003b70:	f04f 0c00 	mov.w	ip, #0
 8003b74:	f1c9 0e20 	rsb	lr, r9, #32
 8003b78:	681a      	ldr	r2, [r3, #0]
 8003b7a:	fa02 f209 	lsl.w	r2, r2, r9
 8003b7e:	ea42 020c 	orr.w	r2, r2, ip
 8003b82:	f84a 2b04 	str.w	r2, [sl], #4
 8003b86:	f853 2b04 	ldr.w	r2, [r3], #4
 8003b8a:	4298      	cmp	r0, r3
 8003b8c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8003b90:	d8f2      	bhi.n	8003b78 <__lshift+0x70>
 8003b92:	1b03      	subs	r3, r0, r4
 8003b94:	3b15      	subs	r3, #21
 8003b96:	f023 0303 	bic.w	r3, r3, #3
 8003b9a:	3304      	adds	r3, #4
 8003b9c:	f104 0215 	add.w	r2, r4, #21
 8003ba0:	4290      	cmp	r0, r2
 8003ba2:	bf38      	it	cc
 8003ba4:	2304      	movcc	r3, #4
 8003ba6:	f841 c003 	str.w	ip, [r1, r3]
 8003baa:	f1bc 0f00 	cmp.w	ip, #0
 8003bae:	d001      	beq.n	8003bb4 <__lshift+0xac>
 8003bb0:	f108 0602 	add.w	r6, r8, #2
 8003bb4:	3e01      	subs	r6, #1
 8003bb6:	4638      	mov	r0, r7
 8003bb8:	4621      	mov	r1, r4
 8003bba:	612e      	str	r6, [r5, #16]
 8003bbc:	f7ff fdd6 	bl	800376c <_Bfree>
 8003bc0:	4628      	mov	r0, r5
 8003bc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003bc6:	f842 0f04 	str.w	r0, [r2, #4]!
 8003bca:	3301      	adds	r3, #1
 8003bcc:	e7c1      	b.n	8003b52 <__lshift+0x4a>
 8003bce:	3904      	subs	r1, #4
 8003bd0:	f853 2b04 	ldr.w	r2, [r3], #4
 8003bd4:	4298      	cmp	r0, r3
 8003bd6:	f841 2f04 	str.w	r2, [r1, #4]!
 8003bda:	d8f9      	bhi.n	8003bd0 <__lshift+0xc8>
 8003bdc:	e7ea      	b.n	8003bb4 <__lshift+0xac>
 8003bde:	bf00      	nop
 8003be0:	08004c5f 	.word	0x08004c5f
 8003be4:	08004c70 	.word	0x08004c70

08003be8 <__mcmp>:
 8003be8:	4603      	mov	r3, r0
 8003bea:	690a      	ldr	r2, [r1, #16]
 8003bec:	6900      	ldr	r0, [r0, #16]
 8003bee:	b530      	push	{r4, r5, lr}
 8003bf0:	1a80      	subs	r0, r0, r2
 8003bf2:	d10d      	bne.n	8003c10 <__mcmp+0x28>
 8003bf4:	3314      	adds	r3, #20
 8003bf6:	3114      	adds	r1, #20
 8003bf8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8003bfc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8003c00:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8003c04:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8003c08:	4295      	cmp	r5, r2
 8003c0a:	d002      	beq.n	8003c12 <__mcmp+0x2a>
 8003c0c:	d304      	bcc.n	8003c18 <__mcmp+0x30>
 8003c0e:	2001      	movs	r0, #1
 8003c10:	bd30      	pop	{r4, r5, pc}
 8003c12:	42a3      	cmp	r3, r4
 8003c14:	d3f4      	bcc.n	8003c00 <__mcmp+0x18>
 8003c16:	e7fb      	b.n	8003c10 <__mcmp+0x28>
 8003c18:	f04f 30ff 	mov.w	r0, #4294967295
 8003c1c:	e7f8      	b.n	8003c10 <__mcmp+0x28>
	...

08003c20 <__mdiff>:
 8003c20:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c24:	460d      	mov	r5, r1
 8003c26:	4607      	mov	r7, r0
 8003c28:	4611      	mov	r1, r2
 8003c2a:	4628      	mov	r0, r5
 8003c2c:	4614      	mov	r4, r2
 8003c2e:	f7ff ffdb 	bl	8003be8 <__mcmp>
 8003c32:	1e06      	subs	r6, r0, #0
 8003c34:	d111      	bne.n	8003c5a <__mdiff+0x3a>
 8003c36:	4631      	mov	r1, r6
 8003c38:	4638      	mov	r0, r7
 8003c3a:	f7ff fd57 	bl	80036ec <_Balloc>
 8003c3e:	4602      	mov	r2, r0
 8003c40:	b928      	cbnz	r0, 8003c4e <__mdiff+0x2e>
 8003c42:	f240 2132 	movw	r1, #562	; 0x232
 8003c46:	4b3a      	ldr	r3, [pc, #232]	; (8003d30 <__mdiff+0x110>)
 8003c48:	483a      	ldr	r0, [pc, #232]	; (8003d34 <__mdiff+0x114>)
 8003c4a:	f000 f9d1 	bl	8003ff0 <__assert_func>
 8003c4e:	2301      	movs	r3, #1
 8003c50:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8003c54:	4610      	mov	r0, r2
 8003c56:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c5a:	bfa4      	itt	ge
 8003c5c:	4623      	movge	r3, r4
 8003c5e:	462c      	movge	r4, r5
 8003c60:	4638      	mov	r0, r7
 8003c62:	6861      	ldr	r1, [r4, #4]
 8003c64:	bfa6      	itte	ge
 8003c66:	461d      	movge	r5, r3
 8003c68:	2600      	movge	r6, #0
 8003c6a:	2601      	movlt	r6, #1
 8003c6c:	f7ff fd3e 	bl	80036ec <_Balloc>
 8003c70:	4602      	mov	r2, r0
 8003c72:	b918      	cbnz	r0, 8003c7c <__mdiff+0x5c>
 8003c74:	f44f 7110 	mov.w	r1, #576	; 0x240
 8003c78:	4b2d      	ldr	r3, [pc, #180]	; (8003d30 <__mdiff+0x110>)
 8003c7a:	e7e5      	b.n	8003c48 <__mdiff+0x28>
 8003c7c:	f102 0814 	add.w	r8, r2, #20
 8003c80:	46c2      	mov	sl, r8
 8003c82:	f04f 0c00 	mov.w	ip, #0
 8003c86:	6927      	ldr	r7, [r4, #16]
 8003c88:	60c6      	str	r6, [r0, #12]
 8003c8a:	692e      	ldr	r6, [r5, #16]
 8003c8c:	f104 0014 	add.w	r0, r4, #20
 8003c90:	f105 0914 	add.w	r9, r5, #20
 8003c94:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8003c98:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8003c9c:	3410      	adds	r4, #16
 8003c9e:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8003ca2:	f859 3b04 	ldr.w	r3, [r9], #4
 8003ca6:	fa1f f18b 	uxth.w	r1, fp
 8003caa:	448c      	add	ip, r1
 8003cac:	b299      	uxth	r1, r3
 8003cae:	0c1b      	lsrs	r3, r3, #16
 8003cb0:	ebac 0101 	sub.w	r1, ip, r1
 8003cb4:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8003cb8:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8003cbc:	b289      	uxth	r1, r1
 8003cbe:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8003cc2:	454e      	cmp	r6, r9
 8003cc4:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8003cc8:	f84a 3b04 	str.w	r3, [sl], #4
 8003ccc:	d8e7      	bhi.n	8003c9e <__mdiff+0x7e>
 8003cce:	1b73      	subs	r3, r6, r5
 8003cd0:	3b15      	subs	r3, #21
 8003cd2:	f023 0303 	bic.w	r3, r3, #3
 8003cd6:	3515      	adds	r5, #21
 8003cd8:	3304      	adds	r3, #4
 8003cda:	42ae      	cmp	r6, r5
 8003cdc:	bf38      	it	cc
 8003cde:	2304      	movcc	r3, #4
 8003ce0:	4418      	add	r0, r3
 8003ce2:	4443      	add	r3, r8
 8003ce4:	461e      	mov	r6, r3
 8003ce6:	4605      	mov	r5, r0
 8003ce8:	4575      	cmp	r5, lr
 8003cea:	d30e      	bcc.n	8003d0a <__mdiff+0xea>
 8003cec:	f10e 0103 	add.w	r1, lr, #3
 8003cf0:	1a09      	subs	r1, r1, r0
 8003cf2:	f021 0103 	bic.w	r1, r1, #3
 8003cf6:	3803      	subs	r0, #3
 8003cf8:	4586      	cmp	lr, r0
 8003cfa:	bf38      	it	cc
 8003cfc:	2100      	movcc	r1, #0
 8003cfe:	4419      	add	r1, r3
 8003d00:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8003d04:	b18b      	cbz	r3, 8003d2a <__mdiff+0x10a>
 8003d06:	6117      	str	r7, [r2, #16]
 8003d08:	e7a4      	b.n	8003c54 <__mdiff+0x34>
 8003d0a:	f855 8b04 	ldr.w	r8, [r5], #4
 8003d0e:	fa1f f188 	uxth.w	r1, r8
 8003d12:	4461      	add	r1, ip
 8003d14:	140c      	asrs	r4, r1, #16
 8003d16:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8003d1a:	b289      	uxth	r1, r1
 8003d1c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8003d20:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8003d24:	f846 1b04 	str.w	r1, [r6], #4
 8003d28:	e7de      	b.n	8003ce8 <__mdiff+0xc8>
 8003d2a:	3f01      	subs	r7, #1
 8003d2c:	e7e8      	b.n	8003d00 <__mdiff+0xe0>
 8003d2e:	bf00      	nop
 8003d30:	08004c5f 	.word	0x08004c5f
 8003d34:	08004c70 	.word	0x08004c70

08003d38 <__d2b>:
 8003d38:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8003d3c:	2101      	movs	r1, #1
 8003d3e:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8003d42:	4690      	mov	r8, r2
 8003d44:	461d      	mov	r5, r3
 8003d46:	f7ff fcd1 	bl	80036ec <_Balloc>
 8003d4a:	4604      	mov	r4, r0
 8003d4c:	b930      	cbnz	r0, 8003d5c <__d2b+0x24>
 8003d4e:	4602      	mov	r2, r0
 8003d50:	f240 310a 	movw	r1, #778	; 0x30a
 8003d54:	4b24      	ldr	r3, [pc, #144]	; (8003de8 <__d2b+0xb0>)
 8003d56:	4825      	ldr	r0, [pc, #148]	; (8003dec <__d2b+0xb4>)
 8003d58:	f000 f94a 	bl	8003ff0 <__assert_func>
 8003d5c:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8003d60:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8003d64:	bb2d      	cbnz	r5, 8003db2 <__d2b+0x7a>
 8003d66:	9301      	str	r3, [sp, #4]
 8003d68:	f1b8 0300 	subs.w	r3, r8, #0
 8003d6c:	d026      	beq.n	8003dbc <__d2b+0x84>
 8003d6e:	4668      	mov	r0, sp
 8003d70:	9300      	str	r3, [sp, #0]
 8003d72:	f7ff fd83 	bl	800387c <__lo0bits>
 8003d76:	9900      	ldr	r1, [sp, #0]
 8003d78:	b1f0      	cbz	r0, 8003db8 <__d2b+0x80>
 8003d7a:	9a01      	ldr	r2, [sp, #4]
 8003d7c:	f1c0 0320 	rsb	r3, r0, #32
 8003d80:	fa02 f303 	lsl.w	r3, r2, r3
 8003d84:	430b      	orrs	r3, r1
 8003d86:	40c2      	lsrs	r2, r0
 8003d88:	6163      	str	r3, [r4, #20]
 8003d8a:	9201      	str	r2, [sp, #4]
 8003d8c:	9b01      	ldr	r3, [sp, #4]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	bf14      	ite	ne
 8003d92:	2102      	movne	r1, #2
 8003d94:	2101      	moveq	r1, #1
 8003d96:	61a3      	str	r3, [r4, #24]
 8003d98:	6121      	str	r1, [r4, #16]
 8003d9a:	b1c5      	cbz	r5, 8003dce <__d2b+0x96>
 8003d9c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8003da0:	4405      	add	r5, r0
 8003da2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8003da6:	603d      	str	r5, [r7, #0]
 8003da8:	6030      	str	r0, [r6, #0]
 8003daa:	4620      	mov	r0, r4
 8003dac:	b002      	add	sp, #8
 8003dae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003db2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003db6:	e7d6      	b.n	8003d66 <__d2b+0x2e>
 8003db8:	6161      	str	r1, [r4, #20]
 8003dba:	e7e7      	b.n	8003d8c <__d2b+0x54>
 8003dbc:	a801      	add	r0, sp, #4
 8003dbe:	f7ff fd5d 	bl	800387c <__lo0bits>
 8003dc2:	2101      	movs	r1, #1
 8003dc4:	9b01      	ldr	r3, [sp, #4]
 8003dc6:	6121      	str	r1, [r4, #16]
 8003dc8:	6163      	str	r3, [r4, #20]
 8003dca:	3020      	adds	r0, #32
 8003dcc:	e7e5      	b.n	8003d9a <__d2b+0x62>
 8003dce:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8003dd2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8003dd6:	6038      	str	r0, [r7, #0]
 8003dd8:	6918      	ldr	r0, [r3, #16]
 8003dda:	f7ff fd2f 	bl	800383c <__hi0bits>
 8003dde:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8003de2:	6031      	str	r1, [r6, #0]
 8003de4:	e7e1      	b.n	8003daa <__d2b+0x72>
 8003de6:	bf00      	nop
 8003de8:	08004c5f 	.word	0x08004c5f
 8003dec:	08004c70 	.word	0x08004c70

08003df0 <_calloc_r>:
 8003df0:	b570      	push	{r4, r5, r6, lr}
 8003df2:	fba1 5402 	umull	r5, r4, r1, r2
 8003df6:	b934      	cbnz	r4, 8003e06 <_calloc_r+0x16>
 8003df8:	4629      	mov	r1, r5
 8003dfa:	f000 f875 	bl	8003ee8 <_malloc_r>
 8003dfe:	4606      	mov	r6, r0
 8003e00:	b928      	cbnz	r0, 8003e0e <_calloc_r+0x1e>
 8003e02:	4630      	mov	r0, r6
 8003e04:	bd70      	pop	{r4, r5, r6, pc}
 8003e06:	220c      	movs	r2, #12
 8003e08:	2600      	movs	r6, #0
 8003e0a:	6002      	str	r2, [r0, #0]
 8003e0c:	e7f9      	b.n	8003e02 <_calloc_r+0x12>
 8003e0e:	462a      	mov	r2, r5
 8003e10:	4621      	mov	r1, r4
 8003e12:	f7fe f961 	bl	80020d8 <memset>
 8003e16:	e7f4      	b.n	8003e02 <_calloc_r+0x12>

08003e18 <_free_r>:
 8003e18:	b538      	push	{r3, r4, r5, lr}
 8003e1a:	4605      	mov	r5, r0
 8003e1c:	2900      	cmp	r1, #0
 8003e1e:	d040      	beq.n	8003ea2 <_free_r+0x8a>
 8003e20:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003e24:	1f0c      	subs	r4, r1, #4
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	bfb8      	it	lt
 8003e2a:	18e4      	addlt	r4, r4, r3
 8003e2c:	f000 f922 	bl	8004074 <__malloc_lock>
 8003e30:	4a1c      	ldr	r2, [pc, #112]	; (8003ea4 <_free_r+0x8c>)
 8003e32:	6813      	ldr	r3, [r2, #0]
 8003e34:	b933      	cbnz	r3, 8003e44 <_free_r+0x2c>
 8003e36:	6063      	str	r3, [r4, #4]
 8003e38:	6014      	str	r4, [r2, #0]
 8003e3a:	4628      	mov	r0, r5
 8003e3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003e40:	f000 b91e 	b.w	8004080 <__malloc_unlock>
 8003e44:	42a3      	cmp	r3, r4
 8003e46:	d908      	bls.n	8003e5a <_free_r+0x42>
 8003e48:	6820      	ldr	r0, [r4, #0]
 8003e4a:	1821      	adds	r1, r4, r0
 8003e4c:	428b      	cmp	r3, r1
 8003e4e:	bf01      	itttt	eq
 8003e50:	6819      	ldreq	r1, [r3, #0]
 8003e52:	685b      	ldreq	r3, [r3, #4]
 8003e54:	1809      	addeq	r1, r1, r0
 8003e56:	6021      	streq	r1, [r4, #0]
 8003e58:	e7ed      	b.n	8003e36 <_free_r+0x1e>
 8003e5a:	461a      	mov	r2, r3
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	b10b      	cbz	r3, 8003e64 <_free_r+0x4c>
 8003e60:	42a3      	cmp	r3, r4
 8003e62:	d9fa      	bls.n	8003e5a <_free_r+0x42>
 8003e64:	6811      	ldr	r1, [r2, #0]
 8003e66:	1850      	adds	r0, r2, r1
 8003e68:	42a0      	cmp	r0, r4
 8003e6a:	d10b      	bne.n	8003e84 <_free_r+0x6c>
 8003e6c:	6820      	ldr	r0, [r4, #0]
 8003e6e:	4401      	add	r1, r0
 8003e70:	1850      	adds	r0, r2, r1
 8003e72:	4283      	cmp	r3, r0
 8003e74:	6011      	str	r1, [r2, #0]
 8003e76:	d1e0      	bne.n	8003e3a <_free_r+0x22>
 8003e78:	6818      	ldr	r0, [r3, #0]
 8003e7a:	685b      	ldr	r3, [r3, #4]
 8003e7c:	4401      	add	r1, r0
 8003e7e:	6011      	str	r1, [r2, #0]
 8003e80:	6053      	str	r3, [r2, #4]
 8003e82:	e7da      	b.n	8003e3a <_free_r+0x22>
 8003e84:	d902      	bls.n	8003e8c <_free_r+0x74>
 8003e86:	230c      	movs	r3, #12
 8003e88:	602b      	str	r3, [r5, #0]
 8003e8a:	e7d6      	b.n	8003e3a <_free_r+0x22>
 8003e8c:	6820      	ldr	r0, [r4, #0]
 8003e8e:	1821      	adds	r1, r4, r0
 8003e90:	428b      	cmp	r3, r1
 8003e92:	bf01      	itttt	eq
 8003e94:	6819      	ldreq	r1, [r3, #0]
 8003e96:	685b      	ldreq	r3, [r3, #4]
 8003e98:	1809      	addeq	r1, r1, r0
 8003e9a:	6021      	streq	r1, [r4, #0]
 8003e9c:	6063      	str	r3, [r4, #4]
 8003e9e:	6054      	str	r4, [r2, #4]
 8003ea0:	e7cb      	b.n	8003e3a <_free_r+0x22>
 8003ea2:	bd38      	pop	{r3, r4, r5, pc}
 8003ea4:	2000067c 	.word	0x2000067c

08003ea8 <sbrk_aligned>:
 8003ea8:	b570      	push	{r4, r5, r6, lr}
 8003eaa:	4e0e      	ldr	r6, [pc, #56]	; (8003ee4 <sbrk_aligned+0x3c>)
 8003eac:	460c      	mov	r4, r1
 8003eae:	6831      	ldr	r1, [r6, #0]
 8003eb0:	4605      	mov	r5, r0
 8003eb2:	b911      	cbnz	r1, 8003eba <sbrk_aligned+0x12>
 8003eb4:	f000 f88c 	bl	8003fd0 <_sbrk_r>
 8003eb8:	6030      	str	r0, [r6, #0]
 8003eba:	4621      	mov	r1, r4
 8003ebc:	4628      	mov	r0, r5
 8003ebe:	f000 f887 	bl	8003fd0 <_sbrk_r>
 8003ec2:	1c43      	adds	r3, r0, #1
 8003ec4:	d00a      	beq.n	8003edc <sbrk_aligned+0x34>
 8003ec6:	1cc4      	adds	r4, r0, #3
 8003ec8:	f024 0403 	bic.w	r4, r4, #3
 8003ecc:	42a0      	cmp	r0, r4
 8003ece:	d007      	beq.n	8003ee0 <sbrk_aligned+0x38>
 8003ed0:	1a21      	subs	r1, r4, r0
 8003ed2:	4628      	mov	r0, r5
 8003ed4:	f000 f87c 	bl	8003fd0 <_sbrk_r>
 8003ed8:	3001      	adds	r0, #1
 8003eda:	d101      	bne.n	8003ee0 <sbrk_aligned+0x38>
 8003edc:	f04f 34ff 	mov.w	r4, #4294967295
 8003ee0:	4620      	mov	r0, r4
 8003ee2:	bd70      	pop	{r4, r5, r6, pc}
 8003ee4:	20000680 	.word	0x20000680

08003ee8 <_malloc_r>:
 8003ee8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003eec:	1ccd      	adds	r5, r1, #3
 8003eee:	f025 0503 	bic.w	r5, r5, #3
 8003ef2:	3508      	adds	r5, #8
 8003ef4:	2d0c      	cmp	r5, #12
 8003ef6:	bf38      	it	cc
 8003ef8:	250c      	movcc	r5, #12
 8003efa:	2d00      	cmp	r5, #0
 8003efc:	4607      	mov	r7, r0
 8003efe:	db01      	blt.n	8003f04 <_malloc_r+0x1c>
 8003f00:	42a9      	cmp	r1, r5
 8003f02:	d905      	bls.n	8003f10 <_malloc_r+0x28>
 8003f04:	230c      	movs	r3, #12
 8003f06:	2600      	movs	r6, #0
 8003f08:	603b      	str	r3, [r7, #0]
 8003f0a:	4630      	mov	r0, r6
 8003f0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003f10:	4e2e      	ldr	r6, [pc, #184]	; (8003fcc <_malloc_r+0xe4>)
 8003f12:	f000 f8af 	bl	8004074 <__malloc_lock>
 8003f16:	6833      	ldr	r3, [r6, #0]
 8003f18:	461c      	mov	r4, r3
 8003f1a:	bb34      	cbnz	r4, 8003f6a <_malloc_r+0x82>
 8003f1c:	4629      	mov	r1, r5
 8003f1e:	4638      	mov	r0, r7
 8003f20:	f7ff ffc2 	bl	8003ea8 <sbrk_aligned>
 8003f24:	1c43      	adds	r3, r0, #1
 8003f26:	4604      	mov	r4, r0
 8003f28:	d14d      	bne.n	8003fc6 <_malloc_r+0xde>
 8003f2a:	6834      	ldr	r4, [r6, #0]
 8003f2c:	4626      	mov	r6, r4
 8003f2e:	2e00      	cmp	r6, #0
 8003f30:	d140      	bne.n	8003fb4 <_malloc_r+0xcc>
 8003f32:	6823      	ldr	r3, [r4, #0]
 8003f34:	4631      	mov	r1, r6
 8003f36:	4638      	mov	r0, r7
 8003f38:	eb04 0803 	add.w	r8, r4, r3
 8003f3c:	f000 f848 	bl	8003fd0 <_sbrk_r>
 8003f40:	4580      	cmp	r8, r0
 8003f42:	d13a      	bne.n	8003fba <_malloc_r+0xd2>
 8003f44:	6821      	ldr	r1, [r4, #0]
 8003f46:	3503      	adds	r5, #3
 8003f48:	1a6d      	subs	r5, r5, r1
 8003f4a:	f025 0503 	bic.w	r5, r5, #3
 8003f4e:	3508      	adds	r5, #8
 8003f50:	2d0c      	cmp	r5, #12
 8003f52:	bf38      	it	cc
 8003f54:	250c      	movcc	r5, #12
 8003f56:	4638      	mov	r0, r7
 8003f58:	4629      	mov	r1, r5
 8003f5a:	f7ff ffa5 	bl	8003ea8 <sbrk_aligned>
 8003f5e:	3001      	adds	r0, #1
 8003f60:	d02b      	beq.n	8003fba <_malloc_r+0xd2>
 8003f62:	6823      	ldr	r3, [r4, #0]
 8003f64:	442b      	add	r3, r5
 8003f66:	6023      	str	r3, [r4, #0]
 8003f68:	e00e      	b.n	8003f88 <_malloc_r+0xa0>
 8003f6a:	6822      	ldr	r2, [r4, #0]
 8003f6c:	1b52      	subs	r2, r2, r5
 8003f6e:	d41e      	bmi.n	8003fae <_malloc_r+0xc6>
 8003f70:	2a0b      	cmp	r2, #11
 8003f72:	d916      	bls.n	8003fa2 <_malloc_r+0xba>
 8003f74:	1961      	adds	r1, r4, r5
 8003f76:	42a3      	cmp	r3, r4
 8003f78:	6025      	str	r5, [r4, #0]
 8003f7a:	bf18      	it	ne
 8003f7c:	6059      	strne	r1, [r3, #4]
 8003f7e:	6863      	ldr	r3, [r4, #4]
 8003f80:	bf08      	it	eq
 8003f82:	6031      	streq	r1, [r6, #0]
 8003f84:	5162      	str	r2, [r4, r5]
 8003f86:	604b      	str	r3, [r1, #4]
 8003f88:	4638      	mov	r0, r7
 8003f8a:	f104 060b 	add.w	r6, r4, #11
 8003f8e:	f000 f877 	bl	8004080 <__malloc_unlock>
 8003f92:	f026 0607 	bic.w	r6, r6, #7
 8003f96:	1d23      	adds	r3, r4, #4
 8003f98:	1af2      	subs	r2, r6, r3
 8003f9a:	d0b6      	beq.n	8003f0a <_malloc_r+0x22>
 8003f9c:	1b9b      	subs	r3, r3, r6
 8003f9e:	50a3      	str	r3, [r4, r2]
 8003fa0:	e7b3      	b.n	8003f0a <_malloc_r+0x22>
 8003fa2:	6862      	ldr	r2, [r4, #4]
 8003fa4:	42a3      	cmp	r3, r4
 8003fa6:	bf0c      	ite	eq
 8003fa8:	6032      	streq	r2, [r6, #0]
 8003faa:	605a      	strne	r2, [r3, #4]
 8003fac:	e7ec      	b.n	8003f88 <_malloc_r+0xa0>
 8003fae:	4623      	mov	r3, r4
 8003fb0:	6864      	ldr	r4, [r4, #4]
 8003fb2:	e7b2      	b.n	8003f1a <_malloc_r+0x32>
 8003fb4:	4634      	mov	r4, r6
 8003fb6:	6876      	ldr	r6, [r6, #4]
 8003fb8:	e7b9      	b.n	8003f2e <_malloc_r+0x46>
 8003fba:	230c      	movs	r3, #12
 8003fbc:	4638      	mov	r0, r7
 8003fbe:	603b      	str	r3, [r7, #0]
 8003fc0:	f000 f85e 	bl	8004080 <__malloc_unlock>
 8003fc4:	e7a1      	b.n	8003f0a <_malloc_r+0x22>
 8003fc6:	6025      	str	r5, [r4, #0]
 8003fc8:	e7de      	b.n	8003f88 <_malloc_r+0xa0>
 8003fca:	bf00      	nop
 8003fcc:	2000067c 	.word	0x2000067c

08003fd0 <_sbrk_r>:
 8003fd0:	b538      	push	{r3, r4, r5, lr}
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	4d05      	ldr	r5, [pc, #20]	; (8003fec <_sbrk_r+0x1c>)
 8003fd6:	4604      	mov	r4, r0
 8003fd8:	4608      	mov	r0, r1
 8003fda:	602b      	str	r3, [r5, #0]
 8003fdc:	f7fd fff2 	bl	8001fc4 <_sbrk>
 8003fe0:	1c43      	adds	r3, r0, #1
 8003fe2:	d102      	bne.n	8003fea <_sbrk_r+0x1a>
 8003fe4:	682b      	ldr	r3, [r5, #0]
 8003fe6:	b103      	cbz	r3, 8003fea <_sbrk_r+0x1a>
 8003fe8:	6023      	str	r3, [r4, #0]
 8003fea:	bd38      	pop	{r3, r4, r5, pc}
 8003fec:	20000684 	.word	0x20000684

08003ff0 <__assert_func>:
 8003ff0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003ff2:	4614      	mov	r4, r2
 8003ff4:	461a      	mov	r2, r3
 8003ff6:	4b09      	ldr	r3, [pc, #36]	; (800401c <__assert_func+0x2c>)
 8003ff8:	4605      	mov	r5, r0
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	68d8      	ldr	r0, [r3, #12]
 8003ffe:	b14c      	cbz	r4, 8004014 <__assert_func+0x24>
 8004000:	4b07      	ldr	r3, [pc, #28]	; (8004020 <__assert_func+0x30>)
 8004002:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004006:	9100      	str	r1, [sp, #0]
 8004008:	462b      	mov	r3, r5
 800400a:	4906      	ldr	r1, [pc, #24]	; (8004024 <__assert_func+0x34>)
 800400c:	f000 f80e 	bl	800402c <fiprintf>
 8004010:	f000 fa62 	bl	80044d8 <abort>
 8004014:	4b04      	ldr	r3, [pc, #16]	; (8004028 <__assert_func+0x38>)
 8004016:	461c      	mov	r4, r3
 8004018:	e7f3      	b.n	8004002 <__assert_func+0x12>
 800401a:	bf00      	nop
 800401c:	20000278 	.word	0x20000278
 8004020:	08004dcc 	.word	0x08004dcc
 8004024:	08004dd9 	.word	0x08004dd9
 8004028:	08004e07 	.word	0x08004e07

0800402c <fiprintf>:
 800402c:	b40e      	push	{r1, r2, r3}
 800402e:	b503      	push	{r0, r1, lr}
 8004030:	4601      	mov	r1, r0
 8004032:	ab03      	add	r3, sp, #12
 8004034:	4805      	ldr	r0, [pc, #20]	; (800404c <fiprintf+0x20>)
 8004036:	f853 2b04 	ldr.w	r2, [r3], #4
 800403a:	6800      	ldr	r0, [r0, #0]
 800403c:	9301      	str	r3, [sp, #4]
 800403e:	f000 f84d 	bl	80040dc <_vfiprintf_r>
 8004042:	b002      	add	sp, #8
 8004044:	f85d eb04 	ldr.w	lr, [sp], #4
 8004048:	b003      	add	sp, #12
 800404a:	4770      	bx	lr
 800404c:	20000278 	.word	0x20000278

08004050 <__ascii_mbtowc>:
 8004050:	b082      	sub	sp, #8
 8004052:	b901      	cbnz	r1, 8004056 <__ascii_mbtowc+0x6>
 8004054:	a901      	add	r1, sp, #4
 8004056:	b142      	cbz	r2, 800406a <__ascii_mbtowc+0x1a>
 8004058:	b14b      	cbz	r3, 800406e <__ascii_mbtowc+0x1e>
 800405a:	7813      	ldrb	r3, [r2, #0]
 800405c:	600b      	str	r3, [r1, #0]
 800405e:	7812      	ldrb	r2, [r2, #0]
 8004060:	1e10      	subs	r0, r2, #0
 8004062:	bf18      	it	ne
 8004064:	2001      	movne	r0, #1
 8004066:	b002      	add	sp, #8
 8004068:	4770      	bx	lr
 800406a:	4610      	mov	r0, r2
 800406c:	e7fb      	b.n	8004066 <__ascii_mbtowc+0x16>
 800406e:	f06f 0001 	mvn.w	r0, #1
 8004072:	e7f8      	b.n	8004066 <__ascii_mbtowc+0x16>

08004074 <__malloc_lock>:
 8004074:	4801      	ldr	r0, [pc, #4]	; (800407c <__malloc_lock+0x8>)
 8004076:	f000 bbeb 	b.w	8004850 <__retarget_lock_acquire_recursive>
 800407a:	bf00      	nop
 800407c:	20000688 	.word	0x20000688

08004080 <__malloc_unlock>:
 8004080:	4801      	ldr	r0, [pc, #4]	; (8004088 <__malloc_unlock+0x8>)
 8004082:	f000 bbe6 	b.w	8004852 <__retarget_lock_release_recursive>
 8004086:	bf00      	nop
 8004088:	20000688 	.word	0x20000688

0800408c <__sfputc_r>:
 800408c:	6893      	ldr	r3, [r2, #8]
 800408e:	b410      	push	{r4}
 8004090:	3b01      	subs	r3, #1
 8004092:	2b00      	cmp	r3, #0
 8004094:	6093      	str	r3, [r2, #8]
 8004096:	da07      	bge.n	80040a8 <__sfputc_r+0x1c>
 8004098:	6994      	ldr	r4, [r2, #24]
 800409a:	42a3      	cmp	r3, r4
 800409c:	db01      	blt.n	80040a2 <__sfputc_r+0x16>
 800409e:	290a      	cmp	r1, #10
 80040a0:	d102      	bne.n	80040a8 <__sfputc_r+0x1c>
 80040a2:	bc10      	pop	{r4}
 80040a4:	f000 b94a 	b.w	800433c <__swbuf_r>
 80040a8:	6813      	ldr	r3, [r2, #0]
 80040aa:	1c58      	adds	r0, r3, #1
 80040ac:	6010      	str	r0, [r2, #0]
 80040ae:	7019      	strb	r1, [r3, #0]
 80040b0:	4608      	mov	r0, r1
 80040b2:	bc10      	pop	{r4}
 80040b4:	4770      	bx	lr

080040b6 <__sfputs_r>:
 80040b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040b8:	4606      	mov	r6, r0
 80040ba:	460f      	mov	r7, r1
 80040bc:	4614      	mov	r4, r2
 80040be:	18d5      	adds	r5, r2, r3
 80040c0:	42ac      	cmp	r4, r5
 80040c2:	d101      	bne.n	80040c8 <__sfputs_r+0x12>
 80040c4:	2000      	movs	r0, #0
 80040c6:	e007      	b.n	80040d8 <__sfputs_r+0x22>
 80040c8:	463a      	mov	r2, r7
 80040ca:	4630      	mov	r0, r6
 80040cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80040d0:	f7ff ffdc 	bl	800408c <__sfputc_r>
 80040d4:	1c43      	adds	r3, r0, #1
 80040d6:	d1f3      	bne.n	80040c0 <__sfputs_r+0xa>
 80040d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080040dc <_vfiprintf_r>:
 80040dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040e0:	460d      	mov	r5, r1
 80040e2:	4614      	mov	r4, r2
 80040e4:	4698      	mov	r8, r3
 80040e6:	4606      	mov	r6, r0
 80040e8:	b09d      	sub	sp, #116	; 0x74
 80040ea:	b118      	cbz	r0, 80040f4 <_vfiprintf_r+0x18>
 80040ec:	6983      	ldr	r3, [r0, #24]
 80040ee:	b90b      	cbnz	r3, 80040f4 <_vfiprintf_r+0x18>
 80040f0:	f000 fb10 	bl	8004714 <__sinit>
 80040f4:	4b89      	ldr	r3, [pc, #548]	; (800431c <_vfiprintf_r+0x240>)
 80040f6:	429d      	cmp	r5, r3
 80040f8:	d11b      	bne.n	8004132 <_vfiprintf_r+0x56>
 80040fa:	6875      	ldr	r5, [r6, #4]
 80040fc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80040fe:	07d9      	lsls	r1, r3, #31
 8004100:	d405      	bmi.n	800410e <_vfiprintf_r+0x32>
 8004102:	89ab      	ldrh	r3, [r5, #12]
 8004104:	059a      	lsls	r2, r3, #22
 8004106:	d402      	bmi.n	800410e <_vfiprintf_r+0x32>
 8004108:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800410a:	f000 fba1 	bl	8004850 <__retarget_lock_acquire_recursive>
 800410e:	89ab      	ldrh	r3, [r5, #12]
 8004110:	071b      	lsls	r3, r3, #28
 8004112:	d501      	bpl.n	8004118 <_vfiprintf_r+0x3c>
 8004114:	692b      	ldr	r3, [r5, #16]
 8004116:	b9eb      	cbnz	r3, 8004154 <_vfiprintf_r+0x78>
 8004118:	4629      	mov	r1, r5
 800411a:	4630      	mov	r0, r6
 800411c:	f000 f96e 	bl	80043fc <__swsetup_r>
 8004120:	b1c0      	cbz	r0, 8004154 <_vfiprintf_r+0x78>
 8004122:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004124:	07dc      	lsls	r4, r3, #31
 8004126:	d50e      	bpl.n	8004146 <_vfiprintf_r+0x6a>
 8004128:	f04f 30ff 	mov.w	r0, #4294967295
 800412c:	b01d      	add	sp, #116	; 0x74
 800412e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004132:	4b7b      	ldr	r3, [pc, #492]	; (8004320 <_vfiprintf_r+0x244>)
 8004134:	429d      	cmp	r5, r3
 8004136:	d101      	bne.n	800413c <_vfiprintf_r+0x60>
 8004138:	68b5      	ldr	r5, [r6, #8]
 800413a:	e7df      	b.n	80040fc <_vfiprintf_r+0x20>
 800413c:	4b79      	ldr	r3, [pc, #484]	; (8004324 <_vfiprintf_r+0x248>)
 800413e:	429d      	cmp	r5, r3
 8004140:	bf08      	it	eq
 8004142:	68f5      	ldreq	r5, [r6, #12]
 8004144:	e7da      	b.n	80040fc <_vfiprintf_r+0x20>
 8004146:	89ab      	ldrh	r3, [r5, #12]
 8004148:	0598      	lsls	r0, r3, #22
 800414a:	d4ed      	bmi.n	8004128 <_vfiprintf_r+0x4c>
 800414c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800414e:	f000 fb80 	bl	8004852 <__retarget_lock_release_recursive>
 8004152:	e7e9      	b.n	8004128 <_vfiprintf_r+0x4c>
 8004154:	2300      	movs	r3, #0
 8004156:	9309      	str	r3, [sp, #36]	; 0x24
 8004158:	2320      	movs	r3, #32
 800415a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800415e:	2330      	movs	r3, #48	; 0x30
 8004160:	f04f 0901 	mov.w	r9, #1
 8004164:	f8cd 800c 	str.w	r8, [sp, #12]
 8004168:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8004328 <_vfiprintf_r+0x24c>
 800416c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004170:	4623      	mov	r3, r4
 8004172:	469a      	mov	sl, r3
 8004174:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004178:	b10a      	cbz	r2, 800417e <_vfiprintf_r+0xa2>
 800417a:	2a25      	cmp	r2, #37	; 0x25
 800417c:	d1f9      	bne.n	8004172 <_vfiprintf_r+0x96>
 800417e:	ebba 0b04 	subs.w	fp, sl, r4
 8004182:	d00b      	beq.n	800419c <_vfiprintf_r+0xc0>
 8004184:	465b      	mov	r3, fp
 8004186:	4622      	mov	r2, r4
 8004188:	4629      	mov	r1, r5
 800418a:	4630      	mov	r0, r6
 800418c:	f7ff ff93 	bl	80040b6 <__sfputs_r>
 8004190:	3001      	adds	r0, #1
 8004192:	f000 80aa 	beq.w	80042ea <_vfiprintf_r+0x20e>
 8004196:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004198:	445a      	add	r2, fp
 800419a:	9209      	str	r2, [sp, #36]	; 0x24
 800419c:	f89a 3000 	ldrb.w	r3, [sl]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	f000 80a2 	beq.w	80042ea <_vfiprintf_r+0x20e>
 80041a6:	2300      	movs	r3, #0
 80041a8:	f04f 32ff 	mov.w	r2, #4294967295
 80041ac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80041b0:	f10a 0a01 	add.w	sl, sl, #1
 80041b4:	9304      	str	r3, [sp, #16]
 80041b6:	9307      	str	r3, [sp, #28]
 80041b8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80041bc:	931a      	str	r3, [sp, #104]	; 0x68
 80041be:	4654      	mov	r4, sl
 80041c0:	2205      	movs	r2, #5
 80041c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80041c6:	4858      	ldr	r0, [pc, #352]	; (8004328 <_vfiprintf_r+0x24c>)
 80041c8:	f7ff fa74 	bl	80036b4 <memchr>
 80041cc:	9a04      	ldr	r2, [sp, #16]
 80041ce:	b9d8      	cbnz	r0, 8004208 <_vfiprintf_r+0x12c>
 80041d0:	06d1      	lsls	r1, r2, #27
 80041d2:	bf44      	itt	mi
 80041d4:	2320      	movmi	r3, #32
 80041d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80041da:	0713      	lsls	r3, r2, #28
 80041dc:	bf44      	itt	mi
 80041de:	232b      	movmi	r3, #43	; 0x2b
 80041e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80041e4:	f89a 3000 	ldrb.w	r3, [sl]
 80041e8:	2b2a      	cmp	r3, #42	; 0x2a
 80041ea:	d015      	beq.n	8004218 <_vfiprintf_r+0x13c>
 80041ec:	4654      	mov	r4, sl
 80041ee:	2000      	movs	r0, #0
 80041f0:	f04f 0c0a 	mov.w	ip, #10
 80041f4:	9a07      	ldr	r2, [sp, #28]
 80041f6:	4621      	mov	r1, r4
 80041f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80041fc:	3b30      	subs	r3, #48	; 0x30
 80041fe:	2b09      	cmp	r3, #9
 8004200:	d94e      	bls.n	80042a0 <_vfiprintf_r+0x1c4>
 8004202:	b1b0      	cbz	r0, 8004232 <_vfiprintf_r+0x156>
 8004204:	9207      	str	r2, [sp, #28]
 8004206:	e014      	b.n	8004232 <_vfiprintf_r+0x156>
 8004208:	eba0 0308 	sub.w	r3, r0, r8
 800420c:	fa09 f303 	lsl.w	r3, r9, r3
 8004210:	4313      	orrs	r3, r2
 8004212:	46a2      	mov	sl, r4
 8004214:	9304      	str	r3, [sp, #16]
 8004216:	e7d2      	b.n	80041be <_vfiprintf_r+0xe2>
 8004218:	9b03      	ldr	r3, [sp, #12]
 800421a:	1d19      	adds	r1, r3, #4
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	9103      	str	r1, [sp, #12]
 8004220:	2b00      	cmp	r3, #0
 8004222:	bfbb      	ittet	lt
 8004224:	425b      	neglt	r3, r3
 8004226:	f042 0202 	orrlt.w	r2, r2, #2
 800422a:	9307      	strge	r3, [sp, #28]
 800422c:	9307      	strlt	r3, [sp, #28]
 800422e:	bfb8      	it	lt
 8004230:	9204      	strlt	r2, [sp, #16]
 8004232:	7823      	ldrb	r3, [r4, #0]
 8004234:	2b2e      	cmp	r3, #46	; 0x2e
 8004236:	d10c      	bne.n	8004252 <_vfiprintf_r+0x176>
 8004238:	7863      	ldrb	r3, [r4, #1]
 800423a:	2b2a      	cmp	r3, #42	; 0x2a
 800423c:	d135      	bne.n	80042aa <_vfiprintf_r+0x1ce>
 800423e:	9b03      	ldr	r3, [sp, #12]
 8004240:	3402      	adds	r4, #2
 8004242:	1d1a      	adds	r2, r3, #4
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	9203      	str	r2, [sp, #12]
 8004248:	2b00      	cmp	r3, #0
 800424a:	bfb8      	it	lt
 800424c:	f04f 33ff 	movlt.w	r3, #4294967295
 8004250:	9305      	str	r3, [sp, #20]
 8004252:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800432c <_vfiprintf_r+0x250>
 8004256:	2203      	movs	r2, #3
 8004258:	4650      	mov	r0, sl
 800425a:	7821      	ldrb	r1, [r4, #0]
 800425c:	f7ff fa2a 	bl	80036b4 <memchr>
 8004260:	b140      	cbz	r0, 8004274 <_vfiprintf_r+0x198>
 8004262:	2340      	movs	r3, #64	; 0x40
 8004264:	eba0 000a 	sub.w	r0, r0, sl
 8004268:	fa03 f000 	lsl.w	r0, r3, r0
 800426c:	9b04      	ldr	r3, [sp, #16]
 800426e:	3401      	adds	r4, #1
 8004270:	4303      	orrs	r3, r0
 8004272:	9304      	str	r3, [sp, #16]
 8004274:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004278:	2206      	movs	r2, #6
 800427a:	482d      	ldr	r0, [pc, #180]	; (8004330 <_vfiprintf_r+0x254>)
 800427c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004280:	f7ff fa18 	bl	80036b4 <memchr>
 8004284:	2800      	cmp	r0, #0
 8004286:	d03f      	beq.n	8004308 <_vfiprintf_r+0x22c>
 8004288:	4b2a      	ldr	r3, [pc, #168]	; (8004334 <_vfiprintf_r+0x258>)
 800428a:	bb1b      	cbnz	r3, 80042d4 <_vfiprintf_r+0x1f8>
 800428c:	9b03      	ldr	r3, [sp, #12]
 800428e:	3307      	adds	r3, #7
 8004290:	f023 0307 	bic.w	r3, r3, #7
 8004294:	3308      	adds	r3, #8
 8004296:	9303      	str	r3, [sp, #12]
 8004298:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800429a:	443b      	add	r3, r7
 800429c:	9309      	str	r3, [sp, #36]	; 0x24
 800429e:	e767      	b.n	8004170 <_vfiprintf_r+0x94>
 80042a0:	460c      	mov	r4, r1
 80042a2:	2001      	movs	r0, #1
 80042a4:	fb0c 3202 	mla	r2, ip, r2, r3
 80042a8:	e7a5      	b.n	80041f6 <_vfiprintf_r+0x11a>
 80042aa:	2300      	movs	r3, #0
 80042ac:	f04f 0c0a 	mov.w	ip, #10
 80042b0:	4619      	mov	r1, r3
 80042b2:	3401      	adds	r4, #1
 80042b4:	9305      	str	r3, [sp, #20]
 80042b6:	4620      	mov	r0, r4
 80042b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80042bc:	3a30      	subs	r2, #48	; 0x30
 80042be:	2a09      	cmp	r2, #9
 80042c0:	d903      	bls.n	80042ca <_vfiprintf_r+0x1ee>
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d0c5      	beq.n	8004252 <_vfiprintf_r+0x176>
 80042c6:	9105      	str	r1, [sp, #20]
 80042c8:	e7c3      	b.n	8004252 <_vfiprintf_r+0x176>
 80042ca:	4604      	mov	r4, r0
 80042cc:	2301      	movs	r3, #1
 80042ce:	fb0c 2101 	mla	r1, ip, r1, r2
 80042d2:	e7f0      	b.n	80042b6 <_vfiprintf_r+0x1da>
 80042d4:	ab03      	add	r3, sp, #12
 80042d6:	9300      	str	r3, [sp, #0]
 80042d8:	462a      	mov	r2, r5
 80042da:	4630      	mov	r0, r6
 80042dc:	4b16      	ldr	r3, [pc, #88]	; (8004338 <_vfiprintf_r+0x25c>)
 80042de:	a904      	add	r1, sp, #16
 80042e0:	f7fd ffa0 	bl	8002224 <_printf_float>
 80042e4:	4607      	mov	r7, r0
 80042e6:	1c78      	adds	r0, r7, #1
 80042e8:	d1d6      	bne.n	8004298 <_vfiprintf_r+0x1bc>
 80042ea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80042ec:	07d9      	lsls	r1, r3, #31
 80042ee:	d405      	bmi.n	80042fc <_vfiprintf_r+0x220>
 80042f0:	89ab      	ldrh	r3, [r5, #12]
 80042f2:	059a      	lsls	r2, r3, #22
 80042f4:	d402      	bmi.n	80042fc <_vfiprintf_r+0x220>
 80042f6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80042f8:	f000 faab 	bl	8004852 <__retarget_lock_release_recursive>
 80042fc:	89ab      	ldrh	r3, [r5, #12]
 80042fe:	065b      	lsls	r3, r3, #25
 8004300:	f53f af12 	bmi.w	8004128 <_vfiprintf_r+0x4c>
 8004304:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004306:	e711      	b.n	800412c <_vfiprintf_r+0x50>
 8004308:	ab03      	add	r3, sp, #12
 800430a:	9300      	str	r3, [sp, #0]
 800430c:	462a      	mov	r2, r5
 800430e:	4630      	mov	r0, r6
 8004310:	4b09      	ldr	r3, [pc, #36]	; (8004338 <_vfiprintf_r+0x25c>)
 8004312:	a904      	add	r1, sp, #16
 8004314:	f7fe fa22 	bl	800275c <_printf_i>
 8004318:	e7e4      	b.n	80042e4 <_vfiprintf_r+0x208>
 800431a:	bf00      	nop
 800431c:	08004f44 	.word	0x08004f44
 8004320:	08004f64 	.word	0x08004f64
 8004324:	08004f24 	.word	0x08004f24
 8004328:	08004e12 	.word	0x08004e12
 800432c:	08004e18 	.word	0x08004e18
 8004330:	08004e1c 	.word	0x08004e1c
 8004334:	08002225 	.word	0x08002225
 8004338:	080040b7 	.word	0x080040b7

0800433c <__swbuf_r>:
 800433c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800433e:	460e      	mov	r6, r1
 8004340:	4614      	mov	r4, r2
 8004342:	4605      	mov	r5, r0
 8004344:	b118      	cbz	r0, 800434e <__swbuf_r+0x12>
 8004346:	6983      	ldr	r3, [r0, #24]
 8004348:	b90b      	cbnz	r3, 800434e <__swbuf_r+0x12>
 800434a:	f000 f9e3 	bl	8004714 <__sinit>
 800434e:	4b21      	ldr	r3, [pc, #132]	; (80043d4 <__swbuf_r+0x98>)
 8004350:	429c      	cmp	r4, r3
 8004352:	d12b      	bne.n	80043ac <__swbuf_r+0x70>
 8004354:	686c      	ldr	r4, [r5, #4]
 8004356:	69a3      	ldr	r3, [r4, #24]
 8004358:	60a3      	str	r3, [r4, #8]
 800435a:	89a3      	ldrh	r3, [r4, #12]
 800435c:	071a      	lsls	r2, r3, #28
 800435e:	d52f      	bpl.n	80043c0 <__swbuf_r+0x84>
 8004360:	6923      	ldr	r3, [r4, #16]
 8004362:	b36b      	cbz	r3, 80043c0 <__swbuf_r+0x84>
 8004364:	6923      	ldr	r3, [r4, #16]
 8004366:	6820      	ldr	r0, [r4, #0]
 8004368:	b2f6      	uxtb	r6, r6
 800436a:	1ac0      	subs	r0, r0, r3
 800436c:	6963      	ldr	r3, [r4, #20]
 800436e:	4637      	mov	r7, r6
 8004370:	4283      	cmp	r3, r0
 8004372:	dc04      	bgt.n	800437e <__swbuf_r+0x42>
 8004374:	4621      	mov	r1, r4
 8004376:	4628      	mov	r0, r5
 8004378:	f000 f938 	bl	80045ec <_fflush_r>
 800437c:	bb30      	cbnz	r0, 80043cc <__swbuf_r+0x90>
 800437e:	68a3      	ldr	r3, [r4, #8]
 8004380:	3001      	adds	r0, #1
 8004382:	3b01      	subs	r3, #1
 8004384:	60a3      	str	r3, [r4, #8]
 8004386:	6823      	ldr	r3, [r4, #0]
 8004388:	1c5a      	adds	r2, r3, #1
 800438a:	6022      	str	r2, [r4, #0]
 800438c:	701e      	strb	r6, [r3, #0]
 800438e:	6963      	ldr	r3, [r4, #20]
 8004390:	4283      	cmp	r3, r0
 8004392:	d004      	beq.n	800439e <__swbuf_r+0x62>
 8004394:	89a3      	ldrh	r3, [r4, #12]
 8004396:	07db      	lsls	r3, r3, #31
 8004398:	d506      	bpl.n	80043a8 <__swbuf_r+0x6c>
 800439a:	2e0a      	cmp	r6, #10
 800439c:	d104      	bne.n	80043a8 <__swbuf_r+0x6c>
 800439e:	4621      	mov	r1, r4
 80043a0:	4628      	mov	r0, r5
 80043a2:	f000 f923 	bl	80045ec <_fflush_r>
 80043a6:	b988      	cbnz	r0, 80043cc <__swbuf_r+0x90>
 80043a8:	4638      	mov	r0, r7
 80043aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80043ac:	4b0a      	ldr	r3, [pc, #40]	; (80043d8 <__swbuf_r+0x9c>)
 80043ae:	429c      	cmp	r4, r3
 80043b0:	d101      	bne.n	80043b6 <__swbuf_r+0x7a>
 80043b2:	68ac      	ldr	r4, [r5, #8]
 80043b4:	e7cf      	b.n	8004356 <__swbuf_r+0x1a>
 80043b6:	4b09      	ldr	r3, [pc, #36]	; (80043dc <__swbuf_r+0xa0>)
 80043b8:	429c      	cmp	r4, r3
 80043ba:	bf08      	it	eq
 80043bc:	68ec      	ldreq	r4, [r5, #12]
 80043be:	e7ca      	b.n	8004356 <__swbuf_r+0x1a>
 80043c0:	4621      	mov	r1, r4
 80043c2:	4628      	mov	r0, r5
 80043c4:	f000 f81a 	bl	80043fc <__swsetup_r>
 80043c8:	2800      	cmp	r0, #0
 80043ca:	d0cb      	beq.n	8004364 <__swbuf_r+0x28>
 80043cc:	f04f 37ff 	mov.w	r7, #4294967295
 80043d0:	e7ea      	b.n	80043a8 <__swbuf_r+0x6c>
 80043d2:	bf00      	nop
 80043d4:	08004f44 	.word	0x08004f44
 80043d8:	08004f64 	.word	0x08004f64
 80043dc:	08004f24 	.word	0x08004f24

080043e0 <__ascii_wctomb>:
 80043e0:	4603      	mov	r3, r0
 80043e2:	4608      	mov	r0, r1
 80043e4:	b141      	cbz	r1, 80043f8 <__ascii_wctomb+0x18>
 80043e6:	2aff      	cmp	r2, #255	; 0xff
 80043e8:	d904      	bls.n	80043f4 <__ascii_wctomb+0x14>
 80043ea:	228a      	movs	r2, #138	; 0x8a
 80043ec:	f04f 30ff 	mov.w	r0, #4294967295
 80043f0:	601a      	str	r2, [r3, #0]
 80043f2:	4770      	bx	lr
 80043f4:	2001      	movs	r0, #1
 80043f6:	700a      	strb	r2, [r1, #0]
 80043f8:	4770      	bx	lr
	...

080043fc <__swsetup_r>:
 80043fc:	4b32      	ldr	r3, [pc, #200]	; (80044c8 <__swsetup_r+0xcc>)
 80043fe:	b570      	push	{r4, r5, r6, lr}
 8004400:	681d      	ldr	r5, [r3, #0]
 8004402:	4606      	mov	r6, r0
 8004404:	460c      	mov	r4, r1
 8004406:	b125      	cbz	r5, 8004412 <__swsetup_r+0x16>
 8004408:	69ab      	ldr	r3, [r5, #24]
 800440a:	b913      	cbnz	r3, 8004412 <__swsetup_r+0x16>
 800440c:	4628      	mov	r0, r5
 800440e:	f000 f981 	bl	8004714 <__sinit>
 8004412:	4b2e      	ldr	r3, [pc, #184]	; (80044cc <__swsetup_r+0xd0>)
 8004414:	429c      	cmp	r4, r3
 8004416:	d10f      	bne.n	8004438 <__swsetup_r+0x3c>
 8004418:	686c      	ldr	r4, [r5, #4]
 800441a:	89a3      	ldrh	r3, [r4, #12]
 800441c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004420:	0719      	lsls	r1, r3, #28
 8004422:	d42c      	bmi.n	800447e <__swsetup_r+0x82>
 8004424:	06dd      	lsls	r5, r3, #27
 8004426:	d411      	bmi.n	800444c <__swsetup_r+0x50>
 8004428:	2309      	movs	r3, #9
 800442a:	6033      	str	r3, [r6, #0]
 800442c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004430:	f04f 30ff 	mov.w	r0, #4294967295
 8004434:	81a3      	strh	r3, [r4, #12]
 8004436:	e03e      	b.n	80044b6 <__swsetup_r+0xba>
 8004438:	4b25      	ldr	r3, [pc, #148]	; (80044d0 <__swsetup_r+0xd4>)
 800443a:	429c      	cmp	r4, r3
 800443c:	d101      	bne.n	8004442 <__swsetup_r+0x46>
 800443e:	68ac      	ldr	r4, [r5, #8]
 8004440:	e7eb      	b.n	800441a <__swsetup_r+0x1e>
 8004442:	4b24      	ldr	r3, [pc, #144]	; (80044d4 <__swsetup_r+0xd8>)
 8004444:	429c      	cmp	r4, r3
 8004446:	bf08      	it	eq
 8004448:	68ec      	ldreq	r4, [r5, #12]
 800444a:	e7e6      	b.n	800441a <__swsetup_r+0x1e>
 800444c:	0758      	lsls	r0, r3, #29
 800444e:	d512      	bpl.n	8004476 <__swsetup_r+0x7a>
 8004450:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004452:	b141      	cbz	r1, 8004466 <__swsetup_r+0x6a>
 8004454:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004458:	4299      	cmp	r1, r3
 800445a:	d002      	beq.n	8004462 <__swsetup_r+0x66>
 800445c:	4630      	mov	r0, r6
 800445e:	f7ff fcdb 	bl	8003e18 <_free_r>
 8004462:	2300      	movs	r3, #0
 8004464:	6363      	str	r3, [r4, #52]	; 0x34
 8004466:	89a3      	ldrh	r3, [r4, #12]
 8004468:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800446c:	81a3      	strh	r3, [r4, #12]
 800446e:	2300      	movs	r3, #0
 8004470:	6063      	str	r3, [r4, #4]
 8004472:	6923      	ldr	r3, [r4, #16]
 8004474:	6023      	str	r3, [r4, #0]
 8004476:	89a3      	ldrh	r3, [r4, #12]
 8004478:	f043 0308 	orr.w	r3, r3, #8
 800447c:	81a3      	strh	r3, [r4, #12]
 800447e:	6923      	ldr	r3, [r4, #16]
 8004480:	b94b      	cbnz	r3, 8004496 <__swsetup_r+0x9a>
 8004482:	89a3      	ldrh	r3, [r4, #12]
 8004484:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004488:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800448c:	d003      	beq.n	8004496 <__swsetup_r+0x9a>
 800448e:	4621      	mov	r1, r4
 8004490:	4630      	mov	r0, r6
 8004492:	f000 fa05 	bl	80048a0 <__smakebuf_r>
 8004496:	89a0      	ldrh	r0, [r4, #12]
 8004498:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800449c:	f010 0301 	ands.w	r3, r0, #1
 80044a0:	d00a      	beq.n	80044b8 <__swsetup_r+0xbc>
 80044a2:	2300      	movs	r3, #0
 80044a4:	60a3      	str	r3, [r4, #8]
 80044a6:	6963      	ldr	r3, [r4, #20]
 80044a8:	425b      	negs	r3, r3
 80044aa:	61a3      	str	r3, [r4, #24]
 80044ac:	6923      	ldr	r3, [r4, #16]
 80044ae:	b943      	cbnz	r3, 80044c2 <__swsetup_r+0xc6>
 80044b0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80044b4:	d1ba      	bne.n	800442c <__swsetup_r+0x30>
 80044b6:	bd70      	pop	{r4, r5, r6, pc}
 80044b8:	0781      	lsls	r1, r0, #30
 80044ba:	bf58      	it	pl
 80044bc:	6963      	ldrpl	r3, [r4, #20]
 80044be:	60a3      	str	r3, [r4, #8]
 80044c0:	e7f4      	b.n	80044ac <__swsetup_r+0xb0>
 80044c2:	2000      	movs	r0, #0
 80044c4:	e7f7      	b.n	80044b6 <__swsetup_r+0xba>
 80044c6:	bf00      	nop
 80044c8:	20000278 	.word	0x20000278
 80044cc:	08004f44 	.word	0x08004f44
 80044d0:	08004f64 	.word	0x08004f64
 80044d4:	08004f24 	.word	0x08004f24

080044d8 <abort>:
 80044d8:	2006      	movs	r0, #6
 80044da:	b508      	push	{r3, lr}
 80044dc:	f000 fa48 	bl	8004970 <raise>
 80044e0:	2001      	movs	r0, #1
 80044e2:	f7fd fcfc 	bl	8001ede <_exit>
	...

080044e8 <__sflush_r>:
 80044e8:	898a      	ldrh	r2, [r1, #12]
 80044ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044ec:	4605      	mov	r5, r0
 80044ee:	0710      	lsls	r0, r2, #28
 80044f0:	460c      	mov	r4, r1
 80044f2:	d457      	bmi.n	80045a4 <__sflush_r+0xbc>
 80044f4:	684b      	ldr	r3, [r1, #4]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	dc04      	bgt.n	8004504 <__sflush_r+0x1c>
 80044fa:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	dc01      	bgt.n	8004504 <__sflush_r+0x1c>
 8004500:	2000      	movs	r0, #0
 8004502:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004504:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004506:	2e00      	cmp	r6, #0
 8004508:	d0fa      	beq.n	8004500 <__sflush_r+0x18>
 800450a:	2300      	movs	r3, #0
 800450c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004510:	682f      	ldr	r7, [r5, #0]
 8004512:	602b      	str	r3, [r5, #0]
 8004514:	d032      	beq.n	800457c <__sflush_r+0x94>
 8004516:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004518:	89a3      	ldrh	r3, [r4, #12]
 800451a:	075a      	lsls	r2, r3, #29
 800451c:	d505      	bpl.n	800452a <__sflush_r+0x42>
 800451e:	6863      	ldr	r3, [r4, #4]
 8004520:	1ac0      	subs	r0, r0, r3
 8004522:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004524:	b10b      	cbz	r3, 800452a <__sflush_r+0x42>
 8004526:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004528:	1ac0      	subs	r0, r0, r3
 800452a:	2300      	movs	r3, #0
 800452c:	4602      	mov	r2, r0
 800452e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004530:	4628      	mov	r0, r5
 8004532:	6a21      	ldr	r1, [r4, #32]
 8004534:	47b0      	blx	r6
 8004536:	1c43      	adds	r3, r0, #1
 8004538:	89a3      	ldrh	r3, [r4, #12]
 800453a:	d106      	bne.n	800454a <__sflush_r+0x62>
 800453c:	6829      	ldr	r1, [r5, #0]
 800453e:	291d      	cmp	r1, #29
 8004540:	d82c      	bhi.n	800459c <__sflush_r+0xb4>
 8004542:	4a29      	ldr	r2, [pc, #164]	; (80045e8 <__sflush_r+0x100>)
 8004544:	40ca      	lsrs	r2, r1
 8004546:	07d6      	lsls	r6, r2, #31
 8004548:	d528      	bpl.n	800459c <__sflush_r+0xb4>
 800454a:	2200      	movs	r2, #0
 800454c:	6062      	str	r2, [r4, #4]
 800454e:	6922      	ldr	r2, [r4, #16]
 8004550:	04d9      	lsls	r1, r3, #19
 8004552:	6022      	str	r2, [r4, #0]
 8004554:	d504      	bpl.n	8004560 <__sflush_r+0x78>
 8004556:	1c42      	adds	r2, r0, #1
 8004558:	d101      	bne.n	800455e <__sflush_r+0x76>
 800455a:	682b      	ldr	r3, [r5, #0]
 800455c:	b903      	cbnz	r3, 8004560 <__sflush_r+0x78>
 800455e:	6560      	str	r0, [r4, #84]	; 0x54
 8004560:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004562:	602f      	str	r7, [r5, #0]
 8004564:	2900      	cmp	r1, #0
 8004566:	d0cb      	beq.n	8004500 <__sflush_r+0x18>
 8004568:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800456c:	4299      	cmp	r1, r3
 800456e:	d002      	beq.n	8004576 <__sflush_r+0x8e>
 8004570:	4628      	mov	r0, r5
 8004572:	f7ff fc51 	bl	8003e18 <_free_r>
 8004576:	2000      	movs	r0, #0
 8004578:	6360      	str	r0, [r4, #52]	; 0x34
 800457a:	e7c2      	b.n	8004502 <__sflush_r+0x1a>
 800457c:	6a21      	ldr	r1, [r4, #32]
 800457e:	2301      	movs	r3, #1
 8004580:	4628      	mov	r0, r5
 8004582:	47b0      	blx	r6
 8004584:	1c41      	adds	r1, r0, #1
 8004586:	d1c7      	bne.n	8004518 <__sflush_r+0x30>
 8004588:	682b      	ldr	r3, [r5, #0]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d0c4      	beq.n	8004518 <__sflush_r+0x30>
 800458e:	2b1d      	cmp	r3, #29
 8004590:	d001      	beq.n	8004596 <__sflush_r+0xae>
 8004592:	2b16      	cmp	r3, #22
 8004594:	d101      	bne.n	800459a <__sflush_r+0xb2>
 8004596:	602f      	str	r7, [r5, #0]
 8004598:	e7b2      	b.n	8004500 <__sflush_r+0x18>
 800459a:	89a3      	ldrh	r3, [r4, #12]
 800459c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80045a0:	81a3      	strh	r3, [r4, #12]
 80045a2:	e7ae      	b.n	8004502 <__sflush_r+0x1a>
 80045a4:	690f      	ldr	r7, [r1, #16]
 80045a6:	2f00      	cmp	r7, #0
 80045a8:	d0aa      	beq.n	8004500 <__sflush_r+0x18>
 80045aa:	0793      	lsls	r3, r2, #30
 80045ac:	bf18      	it	ne
 80045ae:	2300      	movne	r3, #0
 80045b0:	680e      	ldr	r6, [r1, #0]
 80045b2:	bf08      	it	eq
 80045b4:	694b      	ldreq	r3, [r1, #20]
 80045b6:	1bf6      	subs	r6, r6, r7
 80045b8:	600f      	str	r7, [r1, #0]
 80045ba:	608b      	str	r3, [r1, #8]
 80045bc:	2e00      	cmp	r6, #0
 80045be:	dd9f      	ble.n	8004500 <__sflush_r+0x18>
 80045c0:	4633      	mov	r3, r6
 80045c2:	463a      	mov	r2, r7
 80045c4:	4628      	mov	r0, r5
 80045c6:	6a21      	ldr	r1, [r4, #32]
 80045c8:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80045cc:	47e0      	blx	ip
 80045ce:	2800      	cmp	r0, #0
 80045d0:	dc06      	bgt.n	80045e0 <__sflush_r+0xf8>
 80045d2:	89a3      	ldrh	r3, [r4, #12]
 80045d4:	f04f 30ff 	mov.w	r0, #4294967295
 80045d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80045dc:	81a3      	strh	r3, [r4, #12]
 80045de:	e790      	b.n	8004502 <__sflush_r+0x1a>
 80045e0:	4407      	add	r7, r0
 80045e2:	1a36      	subs	r6, r6, r0
 80045e4:	e7ea      	b.n	80045bc <__sflush_r+0xd4>
 80045e6:	bf00      	nop
 80045e8:	20400001 	.word	0x20400001

080045ec <_fflush_r>:
 80045ec:	b538      	push	{r3, r4, r5, lr}
 80045ee:	690b      	ldr	r3, [r1, #16]
 80045f0:	4605      	mov	r5, r0
 80045f2:	460c      	mov	r4, r1
 80045f4:	b913      	cbnz	r3, 80045fc <_fflush_r+0x10>
 80045f6:	2500      	movs	r5, #0
 80045f8:	4628      	mov	r0, r5
 80045fa:	bd38      	pop	{r3, r4, r5, pc}
 80045fc:	b118      	cbz	r0, 8004606 <_fflush_r+0x1a>
 80045fe:	6983      	ldr	r3, [r0, #24]
 8004600:	b90b      	cbnz	r3, 8004606 <_fflush_r+0x1a>
 8004602:	f000 f887 	bl	8004714 <__sinit>
 8004606:	4b14      	ldr	r3, [pc, #80]	; (8004658 <_fflush_r+0x6c>)
 8004608:	429c      	cmp	r4, r3
 800460a:	d11b      	bne.n	8004644 <_fflush_r+0x58>
 800460c:	686c      	ldr	r4, [r5, #4]
 800460e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d0ef      	beq.n	80045f6 <_fflush_r+0xa>
 8004616:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004618:	07d0      	lsls	r0, r2, #31
 800461a:	d404      	bmi.n	8004626 <_fflush_r+0x3a>
 800461c:	0599      	lsls	r1, r3, #22
 800461e:	d402      	bmi.n	8004626 <_fflush_r+0x3a>
 8004620:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004622:	f000 f915 	bl	8004850 <__retarget_lock_acquire_recursive>
 8004626:	4628      	mov	r0, r5
 8004628:	4621      	mov	r1, r4
 800462a:	f7ff ff5d 	bl	80044e8 <__sflush_r>
 800462e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004630:	4605      	mov	r5, r0
 8004632:	07da      	lsls	r2, r3, #31
 8004634:	d4e0      	bmi.n	80045f8 <_fflush_r+0xc>
 8004636:	89a3      	ldrh	r3, [r4, #12]
 8004638:	059b      	lsls	r3, r3, #22
 800463a:	d4dd      	bmi.n	80045f8 <_fflush_r+0xc>
 800463c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800463e:	f000 f908 	bl	8004852 <__retarget_lock_release_recursive>
 8004642:	e7d9      	b.n	80045f8 <_fflush_r+0xc>
 8004644:	4b05      	ldr	r3, [pc, #20]	; (800465c <_fflush_r+0x70>)
 8004646:	429c      	cmp	r4, r3
 8004648:	d101      	bne.n	800464e <_fflush_r+0x62>
 800464a:	68ac      	ldr	r4, [r5, #8]
 800464c:	e7df      	b.n	800460e <_fflush_r+0x22>
 800464e:	4b04      	ldr	r3, [pc, #16]	; (8004660 <_fflush_r+0x74>)
 8004650:	429c      	cmp	r4, r3
 8004652:	bf08      	it	eq
 8004654:	68ec      	ldreq	r4, [r5, #12]
 8004656:	e7da      	b.n	800460e <_fflush_r+0x22>
 8004658:	08004f44 	.word	0x08004f44
 800465c:	08004f64 	.word	0x08004f64
 8004660:	08004f24 	.word	0x08004f24

08004664 <std>:
 8004664:	2300      	movs	r3, #0
 8004666:	b510      	push	{r4, lr}
 8004668:	4604      	mov	r4, r0
 800466a:	e9c0 3300 	strd	r3, r3, [r0]
 800466e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004672:	6083      	str	r3, [r0, #8]
 8004674:	8181      	strh	r1, [r0, #12]
 8004676:	6643      	str	r3, [r0, #100]	; 0x64
 8004678:	81c2      	strh	r2, [r0, #14]
 800467a:	6183      	str	r3, [r0, #24]
 800467c:	4619      	mov	r1, r3
 800467e:	2208      	movs	r2, #8
 8004680:	305c      	adds	r0, #92	; 0x5c
 8004682:	f7fd fd29 	bl	80020d8 <memset>
 8004686:	4b05      	ldr	r3, [pc, #20]	; (800469c <std+0x38>)
 8004688:	6224      	str	r4, [r4, #32]
 800468a:	6263      	str	r3, [r4, #36]	; 0x24
 800468c:	4b04      	ldr	r3, [pc, #16]	; (80046a0 <std+0x3c>)
 800468e:	62a3      	str	r3, [r4, #40]	; 0x28
 8004690:	4b04      	ldr	r3, [pc, #16]	; (80046a4 <std+0x40>)
 8004692:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004694:	4b04      	ldr	r3, [pc, #16]	; (80046a8 <std+0x44>)
 8004696:	6323      	str	r3, [r4, #48]	; 0x30
 8004698:	bd10      	pop	{r4, pc}
 800469a:	bf00      	nop
 800469c:	080049a9 	.word	0x080049a9
 80046a0:	080049cb 	.word	0x080049cb
 80046a4:	08004a03 	.word	0x08004a03
 80046a8:	08004a27 	.word	0x08004a27

080046ac <_cleanup_r>:
 80046ac:	4901      	ldr	r1, [pc, #4]	; (80046b4 <_cleanup_r+0x8>)
 80046ae:	f000 b8af 	b.w	8004810 <_fwalk_reent>
 80046b2:	bf00      	nop
 80046b4:	080045ed 	.word	0x080045ed

080046b8 <__sfmoreglue>:
 80046b8:	2268      	movs	r2, #104	; 0x68
 80046ba:	b570      	push	{r4, r5, r6, lr}
 80046bc:	1e4d      	subs	r5, r1, #1
 80046be:	4355      	muls	r5, r2
 80046c0:	460e      	mov	r6, r1
 80046c2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80046c6:	f7ff fc0f 	bl	8003ee8 <_malloc_r>
 80046ca:	4604      	mov	r4, r0
 80046cc:	b140      	cbz	r0, 80046e0 <__sfmoreglue+0x28>
 80046ce:	2100      	movs	r1, #0
 80046d0:	e9c0 1600 	strd	r1, r6, [r0]
 80046d4:	300c      	adds	r0, #12
 80046d6:	60a0      	str	r0, [r4, #8]
 80046d8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80046dc:	f7fd fcfc 	bl	80020d8 <memset>
 80046e0:	4620      	mov	r0, r4
 80046e2:	bd70      	pop	{r4, r5, r6, pc}

080046e4 <__sfp_lock_acquire>:
 80046e4:	4801      	ldr	r0, [pc, #4]	; (80046ec <__sfp_lock_acquire+0x8>)
 80046e6:	f000 b8b3 	b.w	8004850 <__retarget_lock_acquire_recursive>
 80046ea:	bf00      	nop
 80046ec:	20000689 	.word	0x20000689

080046f0 <__sfp_lock_release>:
 80046f0:	4801      	ldr	r0, [pc, #4]	; (80046f8 <__sfp_lock_release+0x8>)
 80046f2:	f000 b8ae 	b.w	8004852 <__retarget_lock_release_recursive>
 80046f6:	bf00      	nop
 80046f8:	20000689 	.word	0x20000689

080046fc <__sinit_lock_acquire>:
 80046fc:	4801      	ldr	r0, [pc, #4]	; (8004704 <__sinit_lock_acquire+0x8>)
 80046fe:	f000 b8a7 	b.w	8004850 <__retarget_lock_acquire_recursive>
 8004702:	bf00      	nop
 8004704:	2000068a 	.word	0x2000068a

08004708 <__sinit_lock_release>:
 8004708:	4801      	ldr	r0, [pc, #4]	; (8004710 <__sinit_lock_release+0x8>)
 800470a:	f000 b8a2 	b.w	8004852 <__retarget_lock_release_recursive>
 800470e:	bf00      	nop
 8004710:	2000068a 	.word	0x2000068a

08004714 <__sinit>:
 8004714:	b510      	push	{r4, lr}
 8004716:	4604      	mov	r4, r0
 8004718:	f7ff fff0 	bl	80046fc <__sinit_lock_acquire>
 800471c:	69a3      	ldr	r3, [r4, #24]
 800471e:	b11b      	cbz	r3, 8004728 <__sinit+0x14>
 8004720:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004724:	f7ff bff0 	b.w	8004708 <__sinit_lock_release>
 8004728:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800472c:	6523      	str	r3, [r4, #80]	; 0x50
 800472e:	4b13      	ldr	r3, [pc, #76]	; (800477c <__sinit+0x68>)
 8004730:	4a13      	ldr	r2, [pc, #76]	; (8004780 <__sinit+0x6c>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	62a2      	str	r2, [r4, #40]	; 0x28
 8004736:	42a3      	cmp	r3, r4
 8004738:	bf08      	it	eq
 800473a:	2301      	moveq	r3, #1
 800473c:	4620      	mov	r0, r4
 800473e:	bf08      	it	eq
 8004740:	61a3      	streq	r3, [r4, #24]
 8004742:	f000 f81f 	bl	8004784 <__sfp>
 8004746:	6060      	str	r0, [r4, #4]
 8004748:	4620      	mov	r0, r4
 800474a:	f000 f81b 	bl	8004784 <__sfp>
 800474e:	60a0      	str	r0, [r4, #8]
 8004750:	4620      	mov	r0, r4
 8004752:	f000 f817 	bl	8004784 <__sfp>
 8004756:	2200      	movs	r2, #0
 8004758:	2104      	movs	r1, #4
 800475a:	60e0      	str	r0, [r4, #12]
 800475c:	6860      	ldr	r0, [r4, #4]
 800475e:	f7ff ff81 	bl	8004664 <std>
 8004762:	2201      	movs	r2, #1
 8004764:	2109      	movs	r1, #9
 8004766:	68a0      	ldr	r0, [r4, #8]
 8004768:	f7ff ff7c 	bl	8004664 <std>
 800476c:	2202      	movs	r2, #2
 800476e:	2112      	movs	r1, #18
 8004770:	68e0      	ldr	r0, [r4, #12]
 8004772:	f7ff ff77 	bl	8004664 <std>
 8004776:	2301      	movs	r3, #1
 8004778:	61a3      	str	r3, [r4, #24]
 800477a:	e7d1      	b.n	8004720 <__sinit+0xc>
 800477c:	08004ba8 	.word	0x08004ba8
 8004780:	080046ad 	.word	0x080046ad

08004784 <__sfp>:
 8004784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004786:	4607      	mov	r7, r0
 8004788:	f7ff ffac 	bl	80046e4 <__sfp_lock_acquire>
 800478c:	4b1e      	ldr	r3, [pc, #120]	; (8004808 <__sfp+0x84>)
 800478e:	681e      	ldr	r6, [r3, #0]
 8004790:	69b3      	ldr	r3, [r6, #24]
 8004792:	b913      	cbnz	r3, 800479a <__sfp+0x16>
 8004794:	4630      	mov	r0, r6
 8004796:	f7ff ffbd 	bl	8004714 <__sinit>
 800479a:	3648      	adds	r6, #72	; 0x48
 800479c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80047a0:	3b01      	subs	r3, #1
 80047a2:	d503      	bpl.n	80047ac <__sfp+0x28>
 80047a4:	6833      	ldr	r3, [r6, #0]
 80047a6:	b30b      	cbz	r3, 80047ec <__sfp+0x68>
 80047a8:	6836      	ldr	r6, [r6, #0]
 80047aa:	e7f7      	b.n	800479c <__sfp+0x18>
 80047ac:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80047b0:	b9d5      	cbnz	r5, 80047e8 <__sfp+0x64>
 80047b2:	4b16      	ldr	r3, [pc, #88]	; (800480c <__sfp+0x88>)
 80047b4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80047b8:	60e3      	str	r3, [r4, #12]
 80047ba:	6665      	str	r5, [r4, #100]	; 0x64
 80047bc:	f000 f847 	bl	800484e <__retarget_lock_init_recursive>
 80047c0:	f7ff ff96 	bl	80046f0 <__sfp_lock_release>
 80047c4:	2208      	movs	r2, #8
 80047c6:	4629      	mov	r1, r5
 80047c8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80047cc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80047d0:	6025      	str	r5, [r4, #0]
 80047d2:	61a5      	str	r5, [r4, #24]
 80047d4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80047d8:	f7fd fc7e 	bl	80020d8 <memset>
 80047dc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80047e0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80047e4:	4620      	mov	r0, r4
 80047e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80047e8:	3468      	adds	r4, #104	; 0x68
 80047ea:	e7d9      	b.n	80047a0 <__sfp+0x1c>
 80047ec:	2104      	movs	r1, #4
 80047ee:	4638      	mov	r0, r7
 80047f0:	f7ff ff62 	bl	80046b8 <__sfmoreglue>
 80047f4:	4604      	mov	r4, r0
 80047f6:	6030      	str	r0, [r6, #0]
 80047f8:	2800      	cmp	r0, #0
 80047fa:	d1d5      	bne.n	80047a8 <__sfp+0x24>
 80047fc:	f7ff ff78 	bl	80046f0 <__sfp_lock_release>
 8004800:	230c      	movs	r3, #12
 8004802:	603b      	str	r3, [r7, #0]
 8004804:	e7ee      	b.n	80047e4 <__sfp+0x60>
 8004806:	bf00      	nop
 8004808:	08004ba8 	.word	0x08004ba8
 800480c:	ffff0001 	.word	0xffff0001

08004810 <_fwalk_reent>:
 8004810:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004814:	4606      	mov	r6, r0
 8004816:	4688      	mov	r8, r1
 8004818:	2700      	movs	r7, #0
 800481a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800481e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004822:	f1b9 0901 	subs.w	r9, r9, #1
 8004826:	d505      	bpl.n	8004834 <_fwalk_reent+0x24>
 8004828:	6824      	ldr	r4, [r4, #0]
 800482a:	2c00      	cmp	r4, #0
 800482c:	d1f7      	bne.n	800481e <_fwalk_reent+0xe>
 800482e:	4638      	mov	r0, r7
 8004830:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004834:	89ab      	ldrh	r3, [r5, #12]
 8004836:	2b01      	cmp	r3, #1
 8004838:	d907      	bls.n	800484a <_fwalk_reent+0x3a>
 800483a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800483e:	3301      	adds	r3, #1
 8004840:	d003      	beq.n	800484a <_fwalk_reent+0x3a>
 8004842:	4629      	mov	r1, r5
 8004844:	4630      	mov	r0, r6
 8004846:	47c0      	blx	r8
 8004848:	4307      	orrs	r7, r0
 800484a:	3568      	adds	r5, #104	; 0x68
 800484c:	e7e9      	b.n	8004822 <_fwalk_reent+0x12>

0800484e <__retarget_lock_init_recursive>:
 800484e:	4770      	bx	lr

08004850 <__retarget_lock_acquire_recursive>:
 8004850:	4770      	bx	lr

08004852 <__retarget_lock_release_recursive>:
 8004852:	4770      	bx	lr

08004854 <__swhatbuf_r>:
 8004854:	b570      	push	{r4, r5, r6, lr}
 8004856:	460e      	mov	r6, r1
 8004858:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800485c:	4614      	mov	r4, r2
 800485e:	2900      	cmp	r1, #0
 8004860:	461d      	mov	r5, r3
 8004862:	b096      	sub	sp, #88	; 0x58
 8004864:	da08      	bge.n	8004878 <__swhatbuf_r+0x24>
 8004866:	2200      	movs	r2, #0
 8004868:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800486c:	602a      	str	r2, [r5, #0]
 800486e:	061a      	lsls	r2, r3, #24
 8004870:	d410      	bmi.n	8004894 <__swhatbuf_r+0x40>
 8004872:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004876:	e00e      	b.n	8004896 <__swhatbuf_r+0x42>
 8004878:	466a      	mov	r2, sp
 800487a:	f000 f8fb 	bl	8004a74 <_fstat_r>
 800487e:	2800      	cmp	r0, #0
 8004880:	dbf1      	blt.n	8004866 <__swhatbuf_r+0x12>
 8004882:	9a01      	ldr	r2, [sp, #4]
 8004884:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004888:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800488c:	425a      	negs	r2, r3
 800488e:	415a      	adcs	r2, r3
 8004890:	602a      	str	r2, [r5, #0]
 8004892:	e7ee      	b.n	8004872 <__swhatbuf_r+0x1e>
 8004894:	2340      	movs	r3, #64	; 0x40
 8004896:	2000      	movs	r0, #0
 8004898:	6023      	str	r3, [r4, #0]
 800489a:	b016      	add	sp, #88	; 0x58
 800489c:	bd70      	pop	{r4, r5, r6, pc}
	...

080048a0 <__smakebuf_r>:
 80048a0:	898b      	ldrh	r3, [r1, #12]
 80048a2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80048a4:	079d      	lsls	r5, r3, #30
 80048a6:	4606      	mov	r6, r0
 80048a8:	460c      	mov	r4, r1
 80048aa:	d507      	bpl.n	80048bc <__smakebuf_r+0x1c>
 80048ac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80048b0:	6023      	str	r3, [r4, #0]
 80048b2:	6123      	str	r3, [r4, #16]
 80048b4:	2301      	movs	r3, #1
 80048b6:	6163      	str	r3, [r4, #20]
 80048b8:	b002      	add	sp, #8
 80048ba:	bd70      	pop	{r4, r5, r6, pc}
 80048bc:	466a      	mov	r2, sp
 80048be:	ab01      	add	r3, sp, #4
 80048c0:	f7ff ffc8 	bl	8004854 <__swhatbuf_r>
 80048c4:	9900      	ldr	r1, [sp, #0]
 80048c6:	4605      	mov	r5, r0
 80048c8:	4630      	mov	r0, r6
 80048ca:	f7ff fb0d 	bl	8003ee8 <_malloc_r>
 80048ce:	b948      	cbnz	r0, 80048e4 <__smakebuf_r+0x44>
 80048d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80048d4:	059a      	lsls	r2, r3, #22
 80048d6:	d4ef      	bmi.n	80048b8 <__smakebuf_r+0x18>
 80048d8:	f023 0303 	bic.w	r3, r3, #3
 80048dc:	f043 0302 	orr.w	r3, r3, #2
 80048e0:	81a3      	strh	r3, [r4, #12]
 80048e2:	e7e3      	b.n	80048ac <__smakebuf_r+0xc>
 80048e4:	4b0d      	ldr	r3, [pc, #52]	; (800491c <__smakebuf_r+0x7c>)
 80048e6:	62b3      	str	r3, [r6, #40]	; 0x28
 80048e8:	89a3      	ldrh	r3, [r4, #12]
 80048ea:	6020      	str	r0, [r4, #0]
 80048ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048f0:	81a3      	strh	r3, [r4, #12]
 80048f2:	9b00      	ldr	r3, [sp, #0]
 80048f4:	6120      	str	r0, [r4, #16]
 80048f6:	6163      	str	r3, [r4, #20]
 80048f8:	9b01      	ldr	r3, [sp, #4]
 80048fa:	b15b      	cbz	r3, 8004914 <__smakebuf_r+0x74>
 80048fc:	4630      	mov	r0, r6
 80048fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004902:	f000 f8c9 	bl	8004a98 <_isatty_r>
 8004906:	b128      	cbz	r0, 8004914 <__smakebuf_r+0x74>
 8004908:	89a3      	ldrh	r3, [r4, #12]
 800490a:	f023 0303 	bic.w	r3, r3, #3
 800490e:	f043 0301 	orr.w	r3, r3, #1
 8004912:	81a3      	strh	r3, [r4, #12]
 8004914:	89a0      	ldrh	r0, [r4, #12]
 8004916:	4305      	orrs	r5, r0
 8004918:	81a5      	strh	r5, [r4, #12]
 800491a:	e7cd      	b.n	80048b8 <__smakebuf_r+0x18>
 800491c:	080046ad 	.word	0x080046ad

08004920 <_raise_r>:
 8004920:	291f      	cmp	r1, #31
 8004922:	b538      	push	{r3, r4, r5, lr}
 8004924:	4604      	mov	r4, r0
 8004926:	460d      	mov	r5, r1
 8004928:	d904      	bls.n	8004934 <_raise_r+0x14>
 800492a:	2316      	movs	r3, #22
 800492c:	6003      	str	r3, [r0, #0]
 800492e:	f04f 30ff 	mov.w	r0, #4294967295
 8004932:	bd38      	pop	{r3, r4, r5, pc}
 8004934:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8004936:	b112      	cbz	r2, 800493e <_raise_r+0x1e>
 8004938:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800493c:	b94b      	cbnz	r3, 8004952 <_raise_r+0x32>
 800493e:	4620      	mov	r0, r4
 8004940:	f000 f830 	bl	80049a4 <_getpid_r>
 8004944:	462a      	mov	r2, r5
 8004946:	4601      	mov	r1, r0
 8004948:	4620      	mov	r0, r4
 800494a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800494e:	f000 b817 	b.w	8004980 <_kill_r>
 8004952:	2b01      	cmp	r3, #1
 8004954:	d00a      	beq.n	800496c <_raise_r+0x4c>
 8004956:	1c59      	adds	r1, r3, #1
 8004958:	d103      	bne.n	8004962 <_raise_r+0x42>
 800495a:	2316      	movs	r3, #22
 800495c:	6003      	str	r3, [r0, #0]
 800495e:	2001      	movs	r0, #1
 8004960:	e7e7      	b.n	8004932 <_raise_r+0x12>
 8004962:	2400      	movs	r4, #0
 8004964:	4628      	mov	r0, r5
 8004966:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800496a:	4798      	blx	r3
 800496c:	2000      	movs	r0, #0
 800496e:	e7e0      	b.n	8004932 <_raise_r+0x12>

08004970 <raise>:
 8004970:	4b02      	ldr	r3, [pc, #8]	; (800497c <raise+0xc>)
 8004972:	4601      	mov	r1, r0
 8004974:	6818      	ldr	r0, [r3, #0]
 8004976:	f7ff bfd3 	b.w	8004920 <_raise_r>
 800497a:	bf00      	nop
 800497c:	20000278 	.word	0x20000278

08004980 <_kill_r>:
 8004980:	b538      	push	{r3, r4, r5, lr}
 8004982:	2300      	movs	r3, #0
 8004984:	4d06      	ldr	r5, [pc, #24]	; (80049a0 <_kill_r+0x20>)
 8004986:	4604      	mov	r4, r0
 8004988:	4608      	mov	r0, r1
 800498a:	4611      	mov	r1, r2
 800498c:	602b      	str	r3, [r5, #0]
 800498e:	f7fd fa96 	bl	8001ebe <_kill>
 8004992:	1c43      	adds	r3, r0, #1
 8004994:	d102      	bne.n	800499c <_kill_r+0x1c>
 8004996:	682b      	ldr	r3, [r5, #0]
 8004998:	b103      	cbz	r3, 800499c <_kill_r+0x1c>
 800499a:	6023      	str	r3, [r4, #0]
 800499c:	bd38      	pop	{r3, r4, r5, pc}
 800499e:	bf00      	nop
 80049a0:	20000684 	.word	0x20000684

080049a4 <_getpid_r>:
 80049a4:	f7fd ba84 	b.w	8001eb0 <_getpid>

080049a8 <__sread>:
 80049a8:	b510      	push	{r4, lr}
 80049aa:	460c      	mov	r4, r1
 80049ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80049b0:	f000 f894 	bl	8004adc <_read_r>
 80049b4:	2800      	cmp	r0, #0
 80049b6:	bfab      	itete	ge
 80049b8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80049ba:	89a3      	ldrhlt	r3, [r4, #12]
 80049bc:	181b      	addge	r3, r3, r0
 80049be:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80049c2:	bfac      	ite	ge
 80049c4:	6563      	strge	r3, [r4, #84]	; 0x54
 80049c6:	81a3      	strhlt	r3, [r4, #12]
 80049c8:	bd10      	pop	{r4, pc}

080049ca <__swrite>:
 80049ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80049ce:	461f      	mov	r7, r3
 80049d0:	898b      	ldrh	r3, [r1, #12]
 80049d2:	4605      	mov	r5, r0
 80049d4:	05db      	lsls	r3, r3, #23
 80049d6:	460c      	mov	r4, r1
 80049d8:	4616      	mov	r6, r2
 80049da:	d505      	bpl.n	80049e8 <__swrite+0x1e>
 80049dc:	2302      	movs	r3, #2
 80049de:	2200      	movs	r2, #0
 80049e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80049e4:	f000 f868 	bl	8004ab8 <_lseek_r>
 80049e8:	89a3      	ldrh	r3, [r4, #12]
 80049ea:	4632      	mov	r2, r6
 80049ec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80049f0:	81a3      	strh	r3, [r4, #12]
 80049f2:	4628      	mov	r0, r5
 80049f4:	463b      	mov	r3, r7
 80049f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80049fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80049fe:	f000 b817 	b.w	8004a30 <_write_r>

08004a02 <__sseek>:
 8004a02:	b510      	push	{r4, lr}
 8004a04:	460c      	mov	r4, r1
 8004a06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a0a:	f000 f855 	bl	8004ab8 <_lseek_r>
 8004a0e:	1c43      	adds	r3, r0, #1
 8004a10:	89a3      	ldrh	r3, [r4, #12]
 8004a12:	bf15      	itete	ne
 8004a14:	6560      	strne	r0, [r4, #84]	; 0x54
 8004a16:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004a1a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004a1e:	81a3      	strheq	r3, [r4, #12]
 8004a20:	bf18      	it	ne
 8004a22:	81a3      	strhne	r3, [r4, #12]
 8004a24:	bd10      	pop	{r4, pc}

08004a26 <__sclose>:
 8004a26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a2a:	f000 b813 	b.w	8004a54 <_close_r>
	...

08004a30 <_write_r>:
 8004a30:	b538      	push	{r3, r4, r5, lr}
 8004a32:	4604      	mov	r4, r0
 8004a34:	4608      	mov	r0, r1
 8004a36:	4611      	mov	r1, r2
 8004a38:	2200      	movs	r2, #0
 8004a3a:	4d05      	ldr	r5, [pc, #20]	; (8004a50 <_write_r+0x20>)
 8004a3c:	602a      	str	r2, [r5, #0]
 8004a3e:	461a      	mov	r2, r3
 8004a40:	f7fd fa74 	bl	8001f2c <_write>
 8004a44:	1c43      	adds	r3, r0, #1
 8004a46:	d102      	bne.n	8004a4e <_write_r+0x1e>
 8004a48:	682b      	ldr	r3, [r5, #0]
 8004a4a:	b103      	cbz	r3, 8004a4e <_write_r+0x1e>
 8004a4c:	6023      	str	r3, [r4, #0]
 8004a4e:	bd38      	pop	{r3, r4, r5, pc}
 8004a50:	20000684 	.word	0x20000684

08004a54 <_close_r>:
 8004a54:	b538      	push	{r3, r4, r5, lr}
 8004a56:	2300      	movs	r3, #0
 8004a58:	4d05      	ldr	r5, [pc, #20]	; (8004a70 <_close_r+0x1c>)
 8004a5a:	4604      	mov	r4, r0
 8004a5c:	4608      	mov	r0, r1
 8004a5e:	602b      	str	r3, [r5, #0]
 8004a60:	f7fd fa80 	bl	8001f64 <_close>
 8004a64:	1c43      	adds	r3, r0, #1
 8004a66:	d102      	bne.n	8004a6e <_close_r+0x1a>
 8004a68:	682b      	ldr	r3, [r5, #0]
 8004a6a:	b103      	cbz	r3, 8004a6e <_close_r+0x1a>
 8004a6c:	6023      	str	r3, [r4, #0]
 8004a6e:	bd38      	pop	{r3, r4, r5, pc}
 8004a70:	20000684 	.word	0x20000684

08004a74 <_fstat_r>:
 8004a74:	b538      	push	{r3, r4, r5, lr}
 8004a76:	2300      	movs	r3, #0
 8004a78:	4d06      	ldr	r5, [pc, #24]	; (8004a94 <_fstat_r+0x20>)
 8004a7a:	4604      	mov	r4, r0
 8004a7c:	4608      	mov	r0, r1
 8004a7e:	4611      	mov	r1, r2
 8004a80:	602b      	str	r3, [r5, #0]
 8004a82:	f7fd fa7a 	bl	8001f7a <_fstat>
 8004a86:	1c43      	adds	r3, r0, #1
 8004a88:	d102      	bne.n	8004a90 <_fstat_r+0x1c>
 8004a8a:	682b      	ldr	r3, [r5, #0]
 8004a8c:	b103      	cbz	r3, 8004a90 <_fstat_r+0x1c>
 8004a8e:	6023      	str	r3, [r4, #0]
 8004a90:	bd38      	pop	{r3, r4, r5, pc}
 8004a92:	bf00      	nop
 8004a94:	20000684 	.word	0x20000684

08004a98 <_isatty_r>:
 8004a98:	b538      	push	{r3, r4, r5, lr}
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	4d05      	ldr	r5, [pc, #20]	; (8004ab4 <_isatty_r+0x1c>)
 8004a9e:	4604      	mov	r4, r0
 8004aa0:	4608      	mov	r0, r1
 8004aa2:	602b      	str	r3, [r5, #0]
 8004aa4:	f7fd fa78 	bl	8001f98 <_isatty>
 8004aa8:	1c43      	adds	r3, r0, #1
 8004aaa:	d102      	bne.n	8004ab2 <_isatty_r+0x1a>
 8004aac:	682b      	ldr	r3, [r5, #0]
 8004aae:	b103      	cbz	r3, 8004ab2 <_isatty_r+0x1a>
 8004ab0:	6023      	str	r3, [r4, #0]
 8004ab2:	bd38      	pop	{r3, r4, r5, pc}
 8004ab4:	20000684 	.word	0x20000684

08004ab8 <_lseek_r>:
 8004ab8:	b538      	push	{r3, r4, r5, lr}
 8004aba:	4604      	mov	r4, r0
 8004abc:	4608      	mov	r0, r1
 8004abe:	4611      	mov	r1, r2
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	4d05      	ldr	r5, [pc, #20]	; (8004ad8 <_lseek_r+0x20>)
 8004ac4:	602a      	str	r2, [r5, #0]
 8004ac6:	461a      	mov	r2, r3
 8004ac8:	f7fd fa70 	bl	8001fac <_lseek>
 8004acc:	1c43      	adds	r3, r0, #1
 8004ace:	d102      	bne.n	8004ad6 <_lseek_r+0x1e>
 8004ad0:	682b      	ldr	r3, [r5, #0]
 8004ad2:	b103      	cbz	r3, 8004ad6 <_lseek_r+0x1e>
 8004ad4:	6023      	str	r3, [r4, #0]
 8004ad6:	bd38      	pop	{r3, r4, r5, pc}
 8004ad8:	20000684 	.word	0x20000684

08004adc <_read_r>:
 8004adc:	b538      	push	{r3, r4, r5, lr}
 8004ade:	4604      	mov	r4, r0
 8004ae0:	4608      	mov	r0, r1
 8004ae2:	4611      	mov	r1, r2
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	4d05      	ldr	r5, [pc, #20]	; (8004afc <_read_r+0x20>)
 8004ae8:	602a      	str	r2, [r5, #0]
 8004aea:	461a      	mov	r2, r3
 8004aec:	f7fd fa01 	bl	8001ef2 <_read>
 8004af0:	1c43      	adds	r3, r0, #1
 8004af2:	d102      	bne.n	8004afa <_read_r+0x1e>
 8004af4:	682b      	ldr	r3, [r5, #0]
 8004af6:	b103      	cbz	r3, 8004afa <_read_r+0x1e>
 8004af8:	6023      	str	r3, [r4, #0]
 8004afa:	bd38      	pop	{r3, r4, r5, pc}
 8004afc:	20000684 	.word	0x20000684

08004b00 <_init>:
 8004b00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b02:	bf00      	nop
 8004b04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b06:	bc08      	pop	{r3}
 8004b08:	469e      	mov	lr, r3
 8004b0a:	4770      	bx	lr

08004b0c <_fini>:
 8004b0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b0e:	bf00      	nop
 8004b10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b12:	bc08      	pop	{r3}
 8004b14:	469e      	mov	lr, r3
 8004b16:	4770      	bx	lr
